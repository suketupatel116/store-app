{"ast":null,"code":"import * as React from 'react';\nimport { mergeCallbacks, useId, useEventCallback, useMergedRefs } from '@fluentui/react-utilities';\nimport { getDropdownActionFromKey, getIndexFromAction } from '../utils/dropdownKeyActions';\n/*\n * useTriggerListboxSlots returns a tuple of trigger/listbox shorthand,\n * with the semantics and event handlers needed for the Combobox and Dropdown components.\n * The element type of the ref should always match the element type used in the trigger shorthand.\n */\nexport function useTriggerListboxSlots(props, state, ref, triggerSlot, listboxSlot) {\n  const {\n    multiselect\n  } = props;\n  const {\n    activeOption,\n    getCount,\n    getIndexOfId,\n    getOptionAtIndex,\n    ignoreNextBlur,\n    open,\n    selectOption,\n    setActiveOption,\n    setFocusVisible,\n    setHasFocus,\n    setOpen\n  } = state;\n  // handle trigger focus/blur\n  const triggerRef = React.useRef(null);\n  // resolve listbox shorthand props\n  const listboxId = useId('fluent-listbox', listboxSlot === null || listboxSlot === void 0 ? void 0 : listboxSlot.id);\n  const listbox = listboxSlot && {\n    id: listboxId,\n    multiselect,\n    tabIndex: undefined,\n    ...listboxSlot\n  };\n  // resolve trigger shorthand props\n  const trigger = {\n    'aria-expanded': open,\n    'aria-activedescendant': open ? activeOption === null || activeOption === void 0 ? void 0 : activeOption.id : undefined,\n    role: 'combobox',\n    ...triggerSlot,\n    // explicitly type the ref as an intersection here to prevent type errors\n    // since the `children` prop has mutually incompatible types between input/button\n    // functionally both ref and triggerRef will always be the same element type\n    ref: useMergedRefs(ref, triggerSlot === null || triggerSlot === void 0 ? void 0 : triggerSlot.ref, triggerRef)\n  };\n  /*\n  * Handle focus when clicking the listbox popup:\n  * 1. Move focus back to the button/input when the listbox is clicked (otherwise it goes to body)\n  * 2. Do not close the listbox on button/input blur when clicking into the listbox\n  */\n  const listboxOnClick = useEventCallback(mergeCallbacks(event => {\n    var _triggerRef_current;\n    (_triggerRef_current = triggerRef.current) === null || _triggerRef_current === void 0 ? void 0 : _triggerRef_current.focus();\n  }, listbox === null || listbox === void 0 ? void 0 : listbox.onClick));\n  const listboxOnMouseOver = useEventCallback(mergeCallbacks(event => {\n    setFocusVisible(false);\n  }, listbox === null || listbox === void 0 ? void 0 : listbox.onMouseOver));\n  const listboxOnMouseDown = useEventCallback(mergeCallbacks(event => {\n    ignoreNextBlur.current = true;\n  }, listbox === null || listbox === void 0 ? void 0 : listbox.onMouseDown));\n  // listbox is nullable, only add event handlers if it exists\n  if (listbox) {\n    listbox.onClick = listboxOnClick;\n    listbox.onMouseOver = listboxOnMouseOver;\n    listbox.onMouseDown = listboxOnMouseDown;\n  }\n  // the trigger should open/close the popup on click or blur\n  trigger.onBlur = mergeCallbacks(event => {\n    if (!ignoreNextBlur.current) {\n      setOpen(event, false);\n    }\n    ignoreNextBlur.current = false;\n    setHasFocus(false);\n  }, trigger.onBlur);\n  trigger.onClick = mergeCallbacks(event => {\n    setOpen(event, !open);\n  }, trigger.onClick);\n  trigger.onFocus = mergeCallbacks(event => {\n    setHasFocus(true);\n  }, trigger.onFocus);\n  // handle combobox keyboard interaction\n  trigger.onKeyDown = mergeCallbacks(event => {\n    const action = getDropdownActionFromKey(event, {\n      open,\n      multiselect\n    });\n    const maxIndex = getCount() - 1;\n    const activeIndex = activeOption ? getIndexOfId(activeOption.id) : -1;\n    let newIndex = activeIndex;\n    switch (action) {\n      case 'Open':\n        event.preventDefault();\n        setFocusVisible(true);\n        setOpen(event, true);\n        break;\n      case 'Close':\n        // stop propagation for escape key to avoid dismissing any parent popups\n        event.stopPropagation();\n        event.preventDefault();\n        setOpen(event, false);\n        break;\n      case 'CloseSelect':\n        !multiselect && !(activeOption === null || activeOption === void 0 ? void 0 : activeOption.disabled) && setOpen(event, false);\n      // fallthrough\n      case 'Select':\n        activeOption && selectOption(event, activeOption);\n        event.preventDefault();\n        break;\n      case 'Tab':\n        !multiselect && activeOption && selectOption(event, activeOption);\n        break;\n      default:\n        newIndex = getIndexFromAction(action, activeIndex, maxIndex);\n    }\n    if (newIndex !== activeIndex) {\n      // prevent default page scroll/keyboard action if the index changed\n      event.preventDefault();\n      setActiveOption(getOptionAtIndex(newIndex));\n      setFocusVisible(true);\n    }\n  }, trigger.onKeyDown);\n  trigger.onMouseOver = mergeCallbacks(event => {\n    setFocusVisible(false);\n  }, trigger.onMouseOver);\n  return [trigger, listbox];\n}","map":{"version":3,"names":["React","mergeCallbacks","useId","useEventCallback","useMergedRefs","getDropdownActionFromKey","getIndexFromAction","useTriggerListboxSlots","props","state","ref","triggerSlot","listboxSlot","multiselect","activeOption","getCount","getIndexOfId","getOptionAtIndex","ignoreNextBlur","open","selectOption","setActiveOption","setFocusVisible","setHasFocus","setOpen","triggerRef","useRef","listboxId","id","listbox","tabIndex","undefined","trigger","role","listboxOnClick","event","_triggerRef_current","current","focus","onClick","listboxOnMouseOver","onMouseOver","listboxOnMouseDown","onMouseDown","onBlur","onFocus","onKeyDown","action","maxIndex","activeIndex","newIndex","preventDefault","stopPropagation","disabled"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-combobox/lib/utils/useTriggerListboxSlots.js"],"sourcesContent":["import * as React from 'react';\nimport { mergeCallbacks, useId, useEventCallback, useMergedRefs } from '@fluentui/react-utilities';\nimport { getDropdownActionFromKey, getIndexFromAction } from '../utils/dropdownKeyActions';\n/*\n * useTriggerListboxSlots returns a tuple of trigger/listbox shorthand,\n * with the semantics and event handlers needed for the Combobox and Dropdown components.\n * The element type of the ref should always match the element type used in the trigger shorthand.\n */ export function useTriggerListboxSlots(props, state, ref, triggerSlot, listboxSlot) {\n    const { multiselect  } = props;\n    const { activeOption , getCount , getIndexOfId , getOptionAtIndex , ignoreNextBlur , open , selectOption , setActiveOption , setFocusVisible , setHasFocus , setOpen  } = state;\n    // handle trigger focus/blur\n    const triggerRef = React.useRef(null);\n    // resolve listbox shorthand props\n    const listboxId = useId('fluent-listbox', listboxSlot === null || listboxSlot === void 0 ? void 0 : listboxSlot.id);\n    const listbox = listboxSlot && {\n        id: listboxId,\n        multiselect,\n        tabIndex: undefined,\n        ...listboxSlot\n    };\n    // resolve trigger shorthand props\n    const trigger = {\n        'aria-expanded': open,\n        'aria-activedescendant': open ? activeOption === null || activeOption === void 0 ? void 0 : activeOption.id : undefined,\n        role: 'combobox',\n        ...triggerSlot,\n        // explicitly type the ref as an intersection here to prevent type errors\n        // since the `children` prop has mutually incompatible types between input/button\n        // functionally both ref and triggerRef will always be the same element type\n        ref: useMergedRefs(ref, triggerSlot === null || triggerSlot === void 0 ? void 0 : triggerSlot.ref, triggerRef)\n    };\n    /*\n   * Handle focus when clicking the listbox popup:\n   * 1. Move focus back to the button/input when the listbox is clicked (otherwise it goes to body)\n   * 2. Do not close the listbox on button/input blur when clicking into the listbox\n   */ const listboxOnClick = useEventCallback(mergeCallbacks((event)=>{\n        var _triggerRef_current;\n        (_triggerRef_current = triggerRef.current) === null || _triggerRef_current === void 0 ? void 0 : _triggerRef_current.focus();\n    }, listbox === null || listbox === void 0 ? void 0 : listbox.onClick));\n    const listboxOnMouseOver = useEventCallback(mergeCallbacks((event)=>{\n        setFocusVisible(false);\n    }, listbox === null || listbox === void 0 ? void 0 : listbox.onMouseOver));\n    const listboxOnMouseDown = useEventCallback(mergeCallbacks((event)=>{\n        ignoreNextBlur.current = true;\n    }, listbox === null || listbox === void 0 ? void 0 : listbox.onMouseDown));\n    // listbox is nullable, only add event handlers if it exists\n    if (listbox) {\n        listbox.onClick = listboxOnClick;\n        listbox.onMouseOver = listboxOnMouseOver;\n        listbox.onMouseDown = listboxOnMouseDown;\n    }\n    // the trigger should open/close the popup on click or blur\n    trigger.onBlur = mergeCallbacks((event)=>{\n        if (!ignoreNextBlur.current) {\n            setOpen(event, false);\n        }\n        ignoreNextBlur.current = false;\n        setHasFocus(false);\n    }, trigger.onBlur);\n    trigger.onClick = mergeCallbacks((event)=>{\n        setOpen(event, !open);\n    }, trigger.onClick);\n    trigger.onFocus = mergeCallbacks((event)=>{\n        setHasFocus(true);\n    }, trigger.onFocus);\n    // handle combobox keyboard interaction\n    trigger.onKeyDown = mergeCallbacks((event)=>{\n        const action = getDropdownActionFromKey(event, {\n            open,\n            multiselect\n        });\n        const maxIndex = getCount() - 1;\n        const activeIndex = activeOption ? getIndexOfId(activeOption.id) : -1;\n        let newIndex = activeIndex;\n        switch(action){\n            case 'Open':\n                event.preventDefault();\n                setFocusVisible(true);\n                setOpen(event, true);\n                break;\n            case 'Close':\n                // stop propagation for escape key to avoid dismissing any parent popups\n                event.stopPropagation();\n                event.preventDefault();\n                setOpen(event, false);\n                break;\n            case 'CloseSelect':\n                !multiselect && !(activeOption === null || activeOption === void 0 ? void 0 : activeOption.disabled) && setOpen(event, false);\n            // fallthrough\n            case 'Select':\n                activeOption && selectOption(event, activeOption);\n                event.preventDefault();\n                break;\n            case 'Tab':\n                !multiselect && activeOption && selectOption(event, activeOption);\n                break;\n            default:\n                newIndex = getIndexFromAction(action, activeIndex, maxIndex);\n        }\n        if (newIndex !== activeIndex) {\n            // prevent default page scroll/keyboard action if the index changed\n            event.preventDefault();\n            setActiveOption(getOptionAtIndex(newIndex));\n            setFocusVisible(true);\n        }\n    }, trigger.onKeyDown);\n    trigger.onMouseOver = mergeCallbacks((event)=>{\n        setFocusVisible(false);\n    }, trigger.onMouseOver);\n    return [\n        trigger,\n        listbox\n    ];\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,cAAc,EAAEC,KAAK,EAAEC,gBAAgB,EAAEC,aAAa,QAAQ,2BAA2B;AAClG,SAASC,wBAAwB,EAAEC,kBAAkB,QAAQ,6BAA6B;AAC1F;AACA;AACA;AACA;AACA;AAAI,OAAO,SAASC,sBAAsBA,CAACC,KAAK,EAAEC,KAAK,EAAEC,GAAG,EAAEC,WAAW,EAAEC,WAAW,EAAE;EACpF,MAAM;IAAEC;EAAa,CAAC,GAAGL,KAAK;EAC9B,MAAM;IAAEM,YAAY;IAAGC,QAAQ;IAAGC,YAAY;IAAGC,gBAAgB;IAAGC,cAAc;IAAGC,IAAI;IAAGC,YAAY;IAAGC,eAAe;IAAGC,eAAe;IAAGC,WAAW;IAAGC;EAAS,CAAC,GAAGf,KAAK;EAC/K;EACA,MAAMgB,UAAU,GAAGzB,KAAK,CAAC0B,MAAM,CAAC,IAAI,CAAC;EACrC;EACA,MAAMC,SAAS,GAAGzB,KAAK,CAAC,gBAAgB,EAAEU,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,WAAW,CAACgB,EAAE,CAAC;EACnH,MAAMC,OAAO,GAAGjB,WAAW,IAAI;IAC3BgB,EAAE,EAAED,SAAS;IACbd,WAAW;IACXiB,QAAQ,EAAEC,SAAS;IACnB,GAAGnB;EACP,CAAC;EACD;EACA,MAAMoB,OAAO,GAAG;IACZ,eAAe,EAAEb,IAAI;IACrB,uBAAuB,EAAEA,IAAI,GAAGL,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACc,EAAE,GAAGG,SAAS;IACvHE,IAAI,EAAE,UAAU;IAChB,GAAGtB,WAAW;IACd;IACA;IACA;IACAD,GAAG,EAAEN,aAAa,CAACM,GAAG,EAAEC,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,WAAW,CAACD,GAAG,EAAEe,UAAU;EACjH,CAAC;EACD;AACJ;AACA;AACA;AACA;EAAM,MAAMS,cAAc,GAAG/B,gBAAgB,CAACF,cAAc,CAAEkC,KAAK,IAAG;IAC9D,IAAIC,mBAAmB;IACvB,CAACA,mBAAmB,GAAGX,UAAU,CAACY,OAAO,MAAM,IAAI,IAAID,mBAAmB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,mBAAmB,CAACE,KAAK,CAAC,CAAC;EAChI,CAAC,EAAET,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACU,OAAO,CAAC,CAAC;EACtE,MAAMC,kBAAkB,GAAGrC,gBAAgB,CAACF,cAAc,CAAEkC,KAAK,IAAG;IAChEb,eAAe,CAAC,KAAK,CAAC;EAC1B,CAAC,EAAEO,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACY,WAAW,CAAC,CAAC;EAC1E,MAAMC,kBAAkB,GAAGvC,gBAAgB,CAACF,cAAc,CAAEkC,KAAK,IAAG;IAChEjB,cAAc,CAACmB,OAAO,GAAG,IAAI;EACjC,CAAC,EAAER,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACc,WAAW,CAAC,CAAC;EAC1E;EACA,IAAId,OAAO,EAAE;IACTA,OAAO,CAACU,OAAO,GAAGL,cAAc;IAChCL,OAAO,CAACY,WAAW,GAAGD,kBAAkB;IACxCX,OAAO,CAACc,WAAW,GAAGD,kBAAkB;EAC5C;EACA;EACAV,OAAO,CAACY,MAAM,GAAG3C,cAAc,CAAEkC,KAAK,IAAG;IACrC,IAAI,CAACjB,cAAc,CAACmB,OAAO,EAAE;MACzBb,OAAO,CAACW,KAAK,EAAE,KAAK,CAAC;IACzB;IACAjB,cAAc,CAACmB,OAAO,GAAG,KAAK;IAC9Bd,WAAW,CAAC,KAAK,CAAC;EACtB,CAAC,EAAES,OAAO,CAACY,MAAM,CAAC;EAClBZ,OAAO,CAACO,OAAO,GAAGtC,cAAc,CAAEkC,KAAK,IAAG;IACtCX,OAAO,CAACW,KAAK,EAAE,CAAChB,IAAI,CAAC;EACzB,CAAC,EAAEa,OAAO,CAACO,OAAO,CAAC;EACnBP,OAAO,CAACa,OAAO,GAAG5C,cAAc,CAAEkC,KAAK,IAAG;IACtCZ,WAAW,CAAC,IAAI,CAAC;EACrB,CAAC,EAAES,OAAO,CAACa,OAAO,CAAC;EACnB;EACAb,OAAO,CAACc,SAAS,GAAG7C,cAAc,CAAEkC,KAAK,IAAG;IACxC,MAAMY,MAAM,GAAG1C,wBAAwB,CAAC8B,KAAK,EAAE;MAC3ChB,IAAI;MACJN;IACJ,CAAC,CAAC;IACF,MAAMmC,QAAQ,GAAGjC,QAAQ,CAAC,CAAC,GAAG,CAAC;IAC/B,MAAMkC,WAAW,GAAGnC,YAAY,GAAGE,YAAY,CAACF,YAAY,CAACc,EAAE,CAAC,GAAG,CAAC,CAAC;IACrE,IAAIsB,QAAQ,GAAGD,WAAW;IAC1B,QAAOF,MAAM;MACT,KAAK,MAAM;QACPZ,KAAK,CAACgB,cAAc,CAAC,CAAC;QACtB7B,eAAe,CAAC,IAAI,CAAC;QACrBE,OAAO,CAACW,KAAK,EAAE,IAAI,CAAC;QACpB;MACJ,KAAK,OAAO;QACR;QACAA,KAAK,CAACiB,eAAe,CAAC,CAAC;QACvBjB,KAAK,CAACgB,cAAc,CAAC,CAAC;QACtB3B,OAAO,CAACW,KAAK,EAAE,KAAK,CAAC;QACrB;MACJ,KAAK,aAAa;QACd,CAACtB,WAAW,IAAI,EAAEC,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACuC,QAAQ,CAAC,IAAI7B,OAAO,CAACW,KAAK,EAAE,KAAK,CAAC;MACjI;MACA,KAAK,QAAQ;QACTrB,YAAY,IAAIM,YAAY,CAACe,KAAK,EAAErB,YAAY,CAAC;QACjDqB,KAAK,CAACgB,cAAc,CAAC,CAAC;QACtB;MACJ,KAAK,KAAK;QACN,CAACtC,WAAW,IAAIC,YAAY,IAAIM,YAAY,CAACe,KAAK,EAAErB,YAAY,CAAC;QACjE;MACJ;QACIoC,QAAQ,GAAG5C,kBAAkB,CAACyC,MAAM,EAAEE,WAAW,EAAED,QAAQ,CAAC;IACpE;IACA,IAAIE,QAAQ,KAAKD,WAAW,EAAE;MAC1B;MACAd,KAAK,CAACgB,cAAc,CAAC,CAAC;MACtB9B,eAAe,CAACJ,gBAAgB,CAACiC,QAAQ,CAAC,CAAC;MAC3C5B,eAAe,CAAC,IAAI,CAAC;IACzB;EACJ,CAAC,EAAEU,OAAO,CAACc,SAAS,CAAC;EACrBd,OAAO,CAACS,WAAW,GAAGxC,cAAc,CAAEkC,KAAK,IAAG;IAC1Cb,eAAe,CAAC,KAAK,CAAC;EAC1B,CAAC,EAAEU,OAAO,CAACS,WAAW,CAAC;EACvB,OAAO,CACHT,OAAO,EACPH,OAAO,CACV;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}