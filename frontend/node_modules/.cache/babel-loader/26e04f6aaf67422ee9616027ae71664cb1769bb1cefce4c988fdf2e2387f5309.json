{"ast":null,"code":"import * as React from 'react';\nimport { getNativeElementProps, mergeCallbacks, resolveShorthand, useId } from '@fluentui/react-utilities';\nimport { getInitials } from '../../utils/index';\nimport { PersonRegular } from '@fluentui/react-icons';\nimport { PresenceBadge } from '@fluentui/react-badge';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { useAvatarContext } from '../../contexts/AvatarContext';\nexport const DEFAULT_STRINGS = {\n  active: 'active',\n  inactive: 'inactive'\n};\nexport const useAvatar_unstable = (props, ref) => {\n  const {\n    dir\n  } = useFluent();\n  const {\n    shape: contextShape,\n    size: contextSize\n  } = useAvatarContext();\n  const {\n    name,\n    size = contextSize !== null && contextSize !== void 0 ? contextSize : 32,\n    shape = contextShape !== null && contextShape !== void 0 ? contextShape : 'circular',\n    active = 'unset',\n    activeAppearance = 'ring',\n    idForColor\n  } = props;\n  let {\n    color = 'neutral'\n  } = props;\n  // Resolve 'colorful' to a specific color name\n  if (color === 'colorful') {\n    var _ref;\n    color = avatarColors[getHashCode((_ref = idForColor !== null && idForColor !== void 0 ? idForColor : name) !== null && _ref !== void 0 ? _ref : '') % avatarColors.length];\n  }\n  const baseId = useId('avatar-');\n  const root = getNativeElementProps('span', {\n    role: 'img',\n    id: baseId,\n    // aria-label and/or aria-labelledby are resolved below\n    ...props,\n    ref\n  }, /* excludedPropNames: */['name']);\n  const [imageHidden, setImageHidden] = React.useState(undefined);\n  let image = resolveShorthand(props.image, {\n    defaultProps: {\n      alt: '',\n      role: 'presentation',\n      'aria-hidden': true,\n      hidden: imageHidden\n    }\n  });\n  // Image shouldn't be rendered if its src is not set\n  if (!(image === null || image === void 0 ? void 0 : image.src)) {\n    image = undefined;\n  }\n  // Hide the image if it fails to load and restore it on a successful load\n  if (image) {\n    image.onError = mergeCallbacks(image.onError, () => setImageHidden(true));\n    image.onLoad = mergeCallbacks(image.onLoad, () => setImageHidden(undefined));\n  }\n  // Resolve the initials slot, defaulted to getInitials.\n  let initials = resolveShorthand(props.initials, {\n    required: true,\n    defaultProps: {\n      children: getInitials(name, dir === 'rtl', {\n        firstInitialOnly: size <= 16\n      }),\n      id: baseId + '__initials'\n    }\n  });\n  // Don't render the initials slot if it's empty\n  if (!(initials === null || initials === void 0 ? void 0 : initials.children)) {\n    initials = undefined;\n  }\n  // Render the icon slot *only if* there aren't any initials or image to display\n  let icon = undefined;\n  if (!initials && (!image || imageHidden)) {\n    icon = resolveShorthand(props.icon, {\n      required: true,\n      defaultProps: {\n        children: /*#__PURE__*/React.createElement(PersonRegular, null),\n        'aria-hidden': true\n      }\n    });\n  }\n  const badge = resolveShorthand(props.badge, {\n    defaultProps: {\n      size: getBadgeSize(size),\n      id: baseId + '__badge'\n    }\n  });\n  let activeAriaLabelElement;\n  // Resolve aria-label and/or aria-labelledby if not provided by the user\n  if (!root['aria-label'] && !root['aria-labelledby']) {\n    if (name) {\n      root['aria-label'] = name;\n      // Include the badge in labelledby if it exists\n      if (badge) {\n        root['aria-labelledby'] = root.id + ' ' + badge.id;\n      }\n    } else if (initials) {\n      // root's aria-label should be the name, but fall back to being labelledby the initials if name is missing\n      root['aria-labelledby'] = initials.id + (badge ? ' ' + badge.id : '');\n    }\n    // Add the active state to the aria label\n    if (active === 'active' || active === 'inactive') {\n      const activeText = DEFAULT_STRINGS[active];\n      if (root['aria-labelledby']) {\n        // If using aria-labelledby, render a hidden span and append it to the labelledby\n        const activeId = baseId + '__active';\n        root['aria-labelledby'] += ' ' + activeId;\n        activeAriaLabelElement = /*#__PURE__*/React.createElement(\"span\", {\n          hidden: true,\n          id: activeId\n        }, activeText);\n      } else if (root['aria-label']) {\n        // Otherwise, just append it to the aria-label\n        root['aria-label'] += ' ' + activeText;\n      }\n    }\n  }\n  return {\n    size,\n    shape,\n    active,\n    activeAppearance,\n    activeAriaLabelElement,\n    color,\n    components: {\n      root: 'span',\n      initials: 'span',\n      icon: 'span',\n      image: 'img',\n      badge: PresenceBadge\n    },\n    root,\n    initials,\n    icon,\n    image,\n    badge\n  };\n};\nconst getBadgeSize = size => {\n  if (size >= 96) {\n    return 'extra-large';\n  } else if (size >= 64) {\n    return 'large';\n  } else if (size >= 56) {\n    return 'medium';\n  } else if (size >= 40) {\n    return 'small';\n  } else if (size >= 28) {\n    return 'extra-small';\n  } else {\n    return 'tiny';\n  }\n};\nconst avatarColors = ['dark-red', 'cranberry', 'red', 'pumpkin', 'peach', 'marigold', 'gold', 'brass', 'brown', 'forest', 'seafoam', 'dark-green', 'light-teal', 'teal', 'steel', 'blue', 'royal-blue', 'cornflower', 'navy', 'lavender', 'purple', 'grape', 'lilac', 'pink', 'magenta', 'plum', 'beige', 'mink', 'platinum', 'anchor'];\nconst getHashCode = str => {\n  let hashCode = 0;\n  for (let len = str.length - 1; len >= 0; len--) {\n    const ch = str.charCodeAt(len);\n    const shift = len % 8;\n    hashCode ^= (ch << shift) + (ch >> 8 - shift); // eslint-disable-line no-bitwise\n  }\n\n  return hashCode;\n};","map":{"version":3,"names":["React","getNativeElementProps","mergeCallbacks","resolveShorthand","useId","getInitials","PersonRegular","PresenceBadge","useFluent_unstable","useFluent","useAvatarContext","DEFAULT_STRINGS","active","inactive","useAvatar_unstable","props","ref","dir","shape","contextShape","size","contextSize","name","activeAppearance","idForColor","color","_ref","avatarColors","getHashCode","length","baseId","root","role","id","imageHidden","setImageHidden","useState","undefined","image","defaultProps","alt","hidden","src","onError","onLoad","initials","required","children","firstInitialOnly","icon","createElement","badge","getBadgeSize","activeAriaLabelElement","activeText","activeId","components","str","hashCode","len","ch","charCodeAt","shift"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-avatar/lib/components/Avatar/useAvatar.js"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, mergeCallbacks, resolveShorthand, useId } from '@fluentui/react-utilities';\nimport { getInitials } from '../../utils/index';\nimport { PersonRegular } from '@fluentui/react-icons';\nimport { PresenceBadge } from '@fluentui/react-badge';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { useAvatarContext } from '../../contexts/AvatarContext';\nexport const DEFAULT_STRINGS = {\n    active: 'active',\n    inactive: 'inactive'\n};\nexport const useAvatar_unstable = (props, ref)=>{\n    const { dir  } = useFluent();\n    const { shape: contextShape , size: contextSize  } = useAvatarContext();\n    const { name , size =contextSize !== null && contextSize !== void 0 ? contextSize : 32 , shape =contextShape !== null && contextShape !== void 0 ? contextShape : 'circular' , active ='unset' , activeAppearance ='ring' , idForColor  } = props;\n    let { color ='neutral'  } = props;\n    // Resolve 'colorful' to a specific color name\n    if (color === 'colorful') {\n        var _ref;\n        color = avatarColors[getHashCode((_ref = idForColor !== null && idForColor !== void 0 ? idForColor : name) !== null && _ref !== void 0 ? _ref : '') % avatarColors.length];\n    }\n    const baseId = useId('avatar-');\n    const root = getNativeElementProps('span', {\n        role: 'img',\n        id: baseId,\n        // aria-label and/or aria-labelledby are resolved below\n        ...props,\n        ref\n    }, /* excludedPropNames: */ [\n        'name'\n    ]);\n    const [imageHidden, setImageHidden] = React.useState(undefined);\n    let image = resolveShorthand(props.image, {\n        defaultProps: {\n            alt: '',\n            role: 'presentation',\n            'aria-hidden': true,\n            hidden: imageHidden\n        }\n    });\n    // Image shouldn't be rendered if its src is not set\n    if (!(image === null || image === void 0 ? void 0 : image.src)) {\n        image = undefined;\n    }\n    // Hide the image if it fails to load and restore it on a successful load\n    if (image) {\n        image.onError = mergeCallbacks(image.onError, ()=>setImageHidden(true));\n        image.onLoad = mergeCallbacks(image.onLoad, ()=>setImageHidden(undefined));\n    }\n    // Resolve the initials slot, defaulted to getInitials.\n    let initials = resolveShorthand(props.initials, {\n        required: true,\n        defaultProps: {\n            children: getInitials(name, dir === 'rtl', {\n                firstInitialOnly: size <= 16\n            }),\n            id: baseId + '__initials'\n        }\n    });\n    // Don't render the initials slot if it's empty\n    if (!(initials === null || initials === void 0 ? void 0 : initials.children)) {\n        initials = undefined;\n    }\n    // Render the icon slot *only if* there aren't any initials or image to display\n    let icon = undefined;\n    if (!initials && (!image || imageHidden)) {\n        icon = resolveShorthand(props.icon, {\n            required: true,\n            defaultProps: {\n                children: /*#__PURE__*/ React.createElement(PersonRegular, null),\n                'aria-hidden': true\n            }\n        });\n    }\n    const badge = resolveShorthand(props.badge, {\n        defaultProps: {\n            size: getBadgeSize(size),\n            id: baseId + '__badge'\n        }\n    });\n    let activeAriaLabelElement;\n    // Resolve aria-label and/or aria-labelledby if not provided by the user\n    if (!root['aria-label'] && !root['aria-labelledby']) {\n        if (name) {\n            root['aria-label'] = name;\n            // Include the badge in labelledby if it exists\n            if (badge) {\n                root['aria-labelledby'] = root.id + ' ' + badge.id;\n            }\n        } else if (initials) {\n            // root's aria-label should be the name, but fall back to being labelledby the initials if name is missing\n            root['aria-labelledby'] = initials.id + (badge ? ' ' + badge.id : '');\n        }\n        // Add the active state to the aria label\n        if (active === 'active' || active === 'inactive') {\n            const activeText = DEFAULT_STRINGS[active];\n            if (root['aria-labelledby']) {\n                // If using aria-labelledby, render a hidden span and append it to the labelledby\n                const activeId = baseId + '__active';\n                root['aria-labelledby'] += ' ' + activeId;\n                activeAriaLabelElement = /*#__PURE__*/ React.createElement(\"span\", {\n                    hidden: true,\n                    id: activeId\n                }, activeText);\n            } else if (root['aria-label']) {\n                // Otherwise, just append it to the aria-label\n                root['aria-label'] += ' ' + activeText;\n            }\n        }\n    }\n    return {\n        size,\n        shape,\n        active,\n        activeAppearance,\n        activeAriaLabelElement,\n        color,\n        components: {\n            root: 'span',\n            initials: 'span',\n            icon: 'span',\n            image: 'img',\n            badge: PresenceBadge\n        },\n        root,\n        initials,\n        icon,\n        image,\n        badge\n    };\n};\nconst getBadgeSize = (size)=>{\n    if (size >= 96) {\n        return 'extra-large';\n    } else if (size >= 64) {\n        return 'large';\n    } else if (size >= 56) {\n        return 'medium';\n    } else if (size >= 40) {\n        return 'small';\n    } else if (size >= 28) {\n        return 'extra-small';\n    } else {\n        return 'tiny';\n    }\n};\nconst avatarColors = [\n    'dark-red',\n    'cranberry',\n    'red',\n    'pumpkin',\n    'peach',\n    'marigold',\n    'gold',\n    'brass',\n    'brown',\n    'forest',\n    'seafoam',\n    'dark-green',\n    'light-teal',\n    'teal',\n    'steel',\n    'blue',\n    'royal-blue',\n    'cornflower',\n    'navy',\n    'lavender',\n    'purple',\n    'grape',\n    'lilac',\n    'pink',\n    'magenta',\n    'plum',\n    'beige',\n    'mink',\n    'platinum',\n    'anchor'\n];\nconst getHashCode = (str)=>{\n    let hashCode = 0;\n    for(let len = str.length - 1; len >= 0; len--){\n        const ch = str.charCodeAt(len);\n        const shift = len % 8;\n        hashCode ^= (ch << shift) + (ch >> 8 - shift); // eslint-disable-line no-bitwise\n    }\n    return hashCode;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}