{"ast":null,"code":"import * as React from 'react';\nimport { getNativeElementProps, useControllableState, useEventCallback } from '@fluentui/react-utilities';\nimport { useArrowNavigationGroup } from '@fluentui/react-tabster';\n/**\n * Returns the props and state required to render the component\n * @param props - Accordion properties\n * @param ref - reference to root HTMLElement of Accordion\n */\nexport const useAccordion_unstable = (props, ref) => {\n  const {\n    openItems: controlledOpenItems,\n    defaultOpenItems,\n    multiple = false,\n    collapsible = false,\n    onToggle,\n    navigation\n  } = props;\n  const [openItems, setOpenItems] = useControllableState({\n    state: React.useMemo(() => normalizeValues(controlledOpenItems), [controlledOpenItems]),\n    defaultState: () => initializeUncontrolledOpenItems({\n      defaultOpenItems,\n      multiple\n    }),\n    initialState: []\n  });\n  const arrowNavigationProps = useArrowNavigationGroup({\n    circular: navigation === 'circular',\n    tabbable: true\n  });\n  const requestToggle = useEventCallback((event, data) => {\n    onToggle === null || onToggle === void 0 ? void 0 : onToggle(event, data);\n    setOpenItems(previousOpenItems => updateOpenItems(data.value, previousOpenItems, multiple, collapsible));\n  });\n  return {\n    collapsible,\n    navigation,\n    openItems,\n    requestToggle,\n    components: {\n      root: 'div'\n    },\n    root: getNativeElementProps('div', {\n      ...props,\n      ...(navigation ? arrowNavigationProps : {}),\n      ref\n    })\n  };\n};\n/**\n * Initial value for the uncontrolled case of the list of open indexes\n */\nfunction initializeUncontrolledOpenItems(_ref) {\n  let {\n    defaultOpenItems,\n    multiple\n  } = _ref;\n  if (defaultOpenItems !== undefined) {\n    if (Array.isArray(defaultOpenItems)) {\n      return multiple ? defaultOpenItems : [defaultOpenItems[0]];\n    }\n    return [defaultOpenItems];\n  }\n  return [];\n}\n/**\n * Updates the list of open indexes based on an index that changes\n * @param value - the index that will change\n * @param previousOpenItems - list of current open indexes\n * @param multiple - if Accordion support multiple Panels opened at the same time\n * @param collapsible - if Accordion support multiple Panels closed at the same time\n */\nfunction updateOpenItems(value, previousOpenItems, multiple, collapsible) {\n  if (multiple) {\n    if (previousOpenItems.includes(value)) {\n      if (previousOpenItems.length > 1 || collapsible) {\n        return previousOpenItems.filter(i => i !== value);\n      }\n    } else {\n      return [...previousOpenItems, value].sort();\n    }\n  } else {\n    return previousOpenItems[0] === value && collapsible ? [] : [value];\n  }\n  return previousOpenItems;\n}\n/**\n * Normalizes Accordion index into an array of indexes\n */\nfunction normalizeValues(index) {\n  if (index === undefined) {\n    return undefined;\n  }\n  return Array.isArray(index) ? index : [index];\n}","map":{"version":3,"names":["React","getNativeElementProps","useControllableState","useEventCallback","useArrowNavigationGroup","useAccordion_unstable","props","ref","openItems","controlledOpenItems","defaultOpenItems","multiple","collapsible","onToggle","navigation","setOpenItems","state","useMemo","normalizeValues","defaultState","initializeUncontrolledOpenItems","initialState","arrowNavigationProps","circular","tabbable","requestToggle","event","data","previousOpenItems","updateOpenItems","value","components","root","_ref","undefined","Array","isArray","includes","length","filter","i","sort","index"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-accordion/lib/components/Accordion/useAccordion.js"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, useControllableState, useEventCallback } from '@fluentui/react-utilities';\nimport { useArrowNavigationGroup } from '@fluentui/react-tabster';\n/**\n * Returns the props and state required to render the component\n * @param props - Accordion properties\n * @param ref - reference to root HTMLElement of Accordion\n */ export const useAccordion_unstable = (props, ref)=>{\n    const { openItems: controlledOpenItems , defaultOpenItems , multiple =false , collapsible =false , onToggle , navigation  } = props;\n    const [openItems, setOpenItems] = useControllableState({\n        state: React.useMemo(()=>normalizeValues(controlledOpenItems), [\n            controlledOpenItems\n        ]),\n        defaultState: ()=>initializeUncontrolledOpenItems({\n                defaultOpenItems,\n                multiple\n            }),\n        initialState: []\n    });\n    const arrowNavigationProps = useArrowNavigationGroup({\n        circular: navigation === 'circular',\n        tabbable: true\n    });\n    const requestToggle = useEventCallback((event, data)=>{\n        onToggle === null || onToggle === void 0 ? void 0 : onToggle(event, data);\n        setOpenItems((previousOpenItems)=>updateOpenItems(data.value, previousOpenItems, multiple, collapsible));\n    });\n    return {\n        collapsible,\n        navigation,\n        openItems,\n        requestToggle,\n        components: {\n            root: 'div'\n        },\n        root: getNativeElementProps('div', {\n            ...props,\n            ...navigation ? arrowNavigationProps : {},\n            ref\n        })\n    };\n};\n/**\n * Initial value for the uncontrolled case of the list of open indexes\n */ function initializeUncontrolledOpenItems({ defaultOpenItems , multiple  }) {\n    if (defaultOpenItems !== undefined) {\n        if (Array.isArray(defaultOpenItems)) {\n            return multiple ? defaultOpenItems : [\n                defaultOpenItems[0]\n            ];\n        }\n        return [\n            defaultOpenItems\n        ];\n    }\n    return [];\n}\n/**\n * Updates the list of open indexes based on an index that changes\n * @param value - the index that will change\n * @param previousOpenItems - list of current open indexes\n * @param multiple - if Accordion support multiple Panels opened at the same time\n * @param collapsible - if Accordion support multiple Panels closed at the same time\n */ function updateOpenItems(value, previousOpenItems, multiple, collapsible) {\n    if (multiple) {\n        if (previousOpenItems.includes(value)) {\n            if (previousOpenItems.length > 1 || collapsible) {\n                return previousOpenItems.filter((i)=>i !== value);\n            }\n        } else {\n            return [\n                ...previousOpenItems,\n                value\n            ].sort();\n        }\n    } else {\n        return previousOpenItems[0] === value && collapsible ? [] : [\n            value\n        ];\n    }\n    return previousOpenItems;\n}\n/**\n * Normalizes Accordion index into an array of indexes\n */ function normalizeValues(index) {\n    if (index === undefined) {\n        return undefined;\n    }\n    return Array.isArray(index) ? index : [\n        index\n    ];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}