{"ast":null,"code":"import * as React from 'react';\nimport { defaultSSRContextValue, useSSRContext } from '../ssr/index';\nconst IdPrefixContext = React.createContext(undefined);\n/**\n * Allows to define a prefix that will be used for all IDs generated by useId() hook. It's useful to avoid collisions\n * between different bundles.\n */\nexport const IdPrefixProvider = IdPrefixContext.Provider;\nfunction useIdPrefix() {\n  return React.useContext(IdPrefixContext) || '';\n}\n/**\n * Resets generated IDs, should be used only in tests.\n */\nexport function resetIdsForTests() {\n  defaultSSRContextValue.current = 0;\n}\n/**\n * Hook to generate a unique ID.\n *\n * @param prefix - Optional prefix for the ID. Defaults to 'fui-'.\n * @param providedId - Optional id provided by a parent component. Defaults to the provided value if present,\n *  without conditioning the hook call\n * @returns The ID\n */\nexport function useId() {\n  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'fui-';\n  let providedId = arguments.length > 1 ? arguments[1] : undefined;\n  const contextValue = useSSRContext();\n  const idPrefix = useIdPrefix();\n  // Checking if useId is available on React, if it is, we use it to generate the id. String concatenation is used to\n  // prevent bundlers from complaining with older versions of React.\n  const _useId = React['use' + 'Id'];\n  if (_useId) {\n    const generatedId = _useId();\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const escapedId = React.useMemo(() => generatedId.replace(/:/g, ''), [generatedId]);\n    return providedId || `${idPrefix}${prefix}${escapedId}`;\n  }\n  // Hooks appear to be running conditionally, but they will always run in the same order since it's based on\n  // the version of React being used. This is safe to ignore.\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return React.useMemo(() => {\n    if (providedId) {\n      return providedId;\n    }\n    return `${idPrefix}${prefix}${++contextValue.current}`;\n  }, [idPrefix, prefix, providedId, contextValue]);\n}","map":{"version":3,"names":["React","defaultSSRContextValue","useSSRContext","IdPrefixContext","createContext","undefined","IdPrefixProvider","Provider","useIdPrefix","useContext","resetIdsForTests","current","useId","prefix","arguments","length","providedId","contextValue","idPrefix","_useId","generatedId","escapedId","useMemo","replace"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-utilities/lib/hooks/useId.js"],"sourcesContent":["import * as React from 'react';\nimport { defaultSSRContextValue, useSSRContext } from '../ssr/index';\nconst IdPrefixContext = React.createContext(undefined);\n/**\n * Allows to define a prefix that will be used for all IDs generated by useId() hook. It's useful to avoid collisions\n * between different bundles.\n */ export const IdPrefixProvider = IdPrefixContext.Provider;\nfunction useIdPrefix() {\n    return React.useContext(IdPrefixContext) || '';\n}\n/**\n * Resets generated IDs, should be used only in tests.\n */ export function resetIdsForTests() {\n    defaultSSRContextValue.current = 0;\n}\n/**\n * Hook to generate a unique ID.\n *\n * @param prefix - Optional prefix for the ID. Defaults to 'fui-'.\n * @param providedId - Optional id provided by a parent component. Defaults to the provided value if present,\n *  without conditioning the hook call\n * @returns The ID\n */ export function useId(prefix = 'fui-', providedId) {\n    const contextValue = useSSRContext();\n    const idPrefix = useIdPrefix();\n    // Checking if useId is available on React, if it is, we use it to generate the id. String concatenation is used to\n    // prevent bundlers from complaining with older versions of React.\n    const _useId = React['use' + 'Id'];\n    if (_useId) {\n        const generatedId = _useId();\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const escapedId = React.useMemo(()=>generatedId.replace(/:/g, ''), [\n            generatedId\n        ]);\n        return providedId || `${idPrefix}${prefix}${escapedId}`;\n    }\n    // Hooks appear to be running conditionally, but they will always run in the same order since it's based on\n    // the version of React being used. This is safe to ignore.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return React.useMemo(()=>{\n        if (providedId) {\n            return providedId;\n        }\n        return `${idPrefix}${prefix}${++contextValue.current}`;\n    }, [\n        idPrefix,\n        prefix,\n        providedId,\n        contextValue\n    ]);\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,sBAAsB,EAAEC,aAAa,QAAQ,cAAc;AACpE,MAAMC,eAAe,GAAGH,KAAK,CAACI,aAAa,CAACC,SAAS,CAAC;AACtD;AACA;AACA;AACA;AAAI,OAAO,MAAMC,gBAAgB,GAAGH,eAAe,CAACI,QAAQ;AAC5D,SAASC,WAAWA,CAAA,EAAG;EACnB,OAAOR,KAAK,CAACS,UAAU,CAACN,eAAe,CAAC,IAAI,EAAE;AAClD;AACA;AACA;AACA;AAAI,OAAO,SAASO,gBAAgBA,CAAA,EAAG;EACnCT,sBAAsB,CAACU,OAAO,GAAG,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,SAASC,KAAKA,CAAA,EAA8B;EAAA,IAA7BC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAT,SAAA,GAAAS,SAAA,MAAG,MAAM;EAAA,IAAEE,UAAU,GAAAF,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAT,SAAA;EACjD,MAAMY,YAAY,GAAGf,aAAa,CAAC,CAAC;EACpC,MAAMgB,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B;EACA;EACA,MAAMW,MAAM,GAAGnB,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;EAClC,IAAImB,MAAM,EAAE;IACR,MAAMC,WAAW,GAAGD,MAAM,CAAC,CAAC;IAC5B;IACA,MAAME,SAAS,GAAGrB,KAAK,CAACsB,OAAO,CAAC,MAAIF,WAAW,CAACG,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,CAC/DH,WAAW,CACd,CAAC;IACF,OAAOJ,UAAU,IAAK,GAAEE,QAAS,GAAEL,MAAO,GAAEQ,SAAU,EAAC;EAC3D;EACA;EACA;EACA;EACA,OAAOrB,KAAK,CAACsB,OAAO,CAAC,MAAI;IACrB,IAAIN,UAAU,EAAE;MACZ,OAAOA,UAAU;IACrB;IACA,OAAQ,GAAEE,QAAS,GAAEL,MAAO,GAAE,EAAEI,YAAY,CAACN,OAAQ,EAAC;EAC1D,CAAC,EAAE,CACCO,QAAQ,EACRL,MAAM,EACNG,UAAU,EACVC,YAAY,CACf,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}