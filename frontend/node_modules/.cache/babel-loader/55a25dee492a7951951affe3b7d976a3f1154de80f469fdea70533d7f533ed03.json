{"ast":null,"code":"import { tokens } from '@fluentui/react-theme';\nimport { shorthands } from '@griffel/react';\nimport { createCustomFocusIndicatorStyle } from './createCustomFocusIndicatorStyle';\nimport { defaultOptions } from './constants';\n/**\n * Get the position of the focus outline\n *\n * @param options - Configures the style of the focus outline\n * @param position - The position of the focus outline\n * @returns CSS value for the position of the focus outline\n */\nfunction getOutlinePosition(_ref, position) {\n  let {\n    outlineWidth,\n    outlineOffset\n  } = _ref;\n  const offsetValue = (outlineOffset === null || outlineOffset === void 0 ? void 0 : outlineOffset[position]) || outlineOffset;\n  if (!outlineOffset) {\n    return `calc(${outlineWidth} * -1)`;\n  }\n  return `calc(0px - ${outlineWidth} - ${offsetValue})`;\n}\n/**\n * NOTE: the element with the focus outline needs to have `position: relative` so that the\n * pseudo element can be properly positioned.\n *\n * @param options - Configures the style of the focus outline\n * @returns focus outline styles object\n */\nconst getFocusOutlineStyles = options => {\n  const {\n    outlineRadius,\n    outlineColor,\n    outlineWidth\n  } = options;\n  return {\n    ...shorthands.borderColor('transparent'),\n    '::after': {\n      content: '\"\"',\n      position: 'absolute',\n      pointerEvents: 'none',\n      zIndex: 1,\n      ...shorthands.borderStyle('solid'),\n      ...shorthands.borderWidth(outlineWidth),\n      ...shorthands.borderRadius(outlineRadius),\n      ...shorthands.borderColor(outlineColor),\n      top: getOutlinePosition(options, 'top'),\n      right: getOutlinePosition(options, 'right'),\n      bottom: getOutlinePosition(options, 'bottom'),\n      left: getOutlinePosition(options, 'left')\n    }\n  };\n};\n/**\n * NOTE: The element with the focus outline needs to have `position: relative` so that the\n * pseudo element can be properly positioned.\n *\n * @param options - Configure the style of the focus outline\n * @returns focus outline styles object for @see makeStyles\n */\nexport const createFocusOutlineStyle = function () {\n  let {\n    enableOutline = false,\n    selector = defaultOptions.selector,\n    style = defaultOptions.style\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n  return {\n    ':focus': {\n      outlineStyle: enableOutline ? undefined : 'none'\n    },\n    ':focus-visible': {\n      outlineStyle: enableOutline ? undefined : 'none'\n    },\n    ...createCustomFocusIndicatorStyle(getFocusOutlineStyles({\n      outlineColor: tokens.colorStrokeFocus2,\n      outlineRadius: tokens.borderRadiusMedium,\n      // FIXME: tokens.strokeWidthThick causes some weird bugs\n      outlineWidth: '2px',\n      ...style\n    }), {\n      selector\n    })\n  };\n};","map":{"version":3,"names":["tokens","shorthands","createCustomFocusIndicatorStyle","defaultOptions","getOutlinePosition","_ref","position","outlineWidth","outlineOffset","offsetValue","getFocusOutlineStyles","options","outlineRadius","outlineColor","borderColor","content","pointerEvents","zIndex","borderStyle","borderWidth","borderRadius","top","right","bottom","left","createFocusOutlineStyle","enableOutline","selector","style","arguments","length","undefined","outlineStyle","colorStrokeFocus2","borderRadiusMedium"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-tabster/lib/focus/createFocusOutlineStyle.js"],"sourcesContent":["import { tokens } from '@fluentui/react-theme';\nimport { shorthands } from '@griffel/react';\nimport { createCustomFocusIndicatorStyle } from './createCustomFocusIndicatorStyle';\nimport { defaultOptions } from './constants';\n/**\n * Get the position of the focus outline\n *\n * @param options - Configures the style of the focus outline\n * @param position - The position of the focus outline\n * @returns CSS value for the position of the focus outline\n */ function getOutlinePosition({ outlineWidth , outlineOffset  }, position) {\n    const offsetValue = (outlineOffset === null || outlineOffset === void 0 ? void 0 : outlineOffset[position]) || outlineOffset;\n    if (!outlineOffset) {\n        return `calc(${outlineWidth} * -1)`;\n    }\n    return `calc(0px - ${outlineWidth} - ${offsetValue})`;\n}\n/**\n * NOTE: the element with the focus outline needs to have `position: relative` so that the\n * pseudo element can be properly positioned.\n *\n * @param options - Configures the style of the focus outline\n * @returns focus outline styles object\n */ const getFocusOutlineStyles = (options)=>{\n    const { outlineRadius , outlineColor , outlineWidth  } = options;\n    return {\n        ...shorthands.borderColor('transparent'),\n        '::after': {\n            content: '\"\"',\n            position: 'absolute',\n            pointerEvents: 'none',\n            zIndex: 1,\n            ...shorthands.borderStyle('solid'),\n            ...shorthands.borderWidth(outlineWidth),\n            ...shorthands.borderRadius(outlineRadius),\n            ...shorthands.borderColor(outlineColor),\n            top: getOutlinePosition(options, 'top'),\n            right: getOutlinePosition(options, 'right'),\n            bottom: getOutlinePosition(options, 'bottom'),\n            left: getOutlinePosition(options, 'left')\n        }\n    };\n};\n/**\n * NOTE: The element with the focus outline needs to have `position: relative` so that the\n * pseudo element can be properly positioned.\n *\n * @param options - Configure the style of the focus outline\n * @returns focus outline styles object for @see makeStyles\n */ export const createFocusOutlineStyle = ({ enableOutline =false , selector =defaultOptions.selector , style =defaultOptions.style  } = defaultOptions)=>({\n        ':focus': {\n            outlineStyle: enableOutline ? undefined : 'none'\n        },\n        ':focus-visible': {\n            outlineStyle: enableOutline ? undefined : 'none'\n        },\n        ...createCustomFocusIndicatorStyle(getFocusOutlineStyles({\n            outlineColor: tokens.colorStrokeFocus2,\n            outlineRadius: tokens.borderRadiusMedium,\n            // FIXME: tokens.strokeWidthThick causes some weird bugs\n            outlineWidth: '2px',\n            ...style\n        }), {\n            selector\n        })\n    });\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,+BAA+B,QAAQ,mCAAmC;AACnF,SAASC,cAAc,QAAQ,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,SAASC,kBAAkBA,CAAAC,IAAA,EAAoCC,QAAQ,EAAE;EAAA,IAA7C;IAAEC,YAAY;IAAGC;EAAe,CAAC,GAAAH,IAAA;EAC7D,MAAMI,WAAW,GAAG,CAACD,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACF,QAAQ,CAAC,KAAKE,aAAa;EAC5H,IAAI,CAACA,aAAa,EAAE;IAChB,OAAQ,QAAOD,YAAa,QAAO;EACvC;EACA,OAAQ,cAAaA,YAAa,MAAKE,WAAY,GAAE;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,MAAMC,qBAAqB,GAAIC,OAAO,IAAG;EACzC,MAAM;IAAEC,aAAa;IAAGC,YAAY;IAAGN;EAAc,CAAC,GAAGI,OAAO;EAChE,OAAO;IACH,GAAGV,UAAU,CAACa,WAAW,CAAC,aAAa,CAAC;IACxC,SAAS,EAAE;MACPC,OAAO,EAAE,IAAI;MACbT,QAAQ,EAAE,UAAU;MACpBU,aAAa,EAAE,MAAM;MACrBC,MAAM,EAAE,CAAC;MACT,GAAGhB,UAAU,CAACiB,WAAW,CAAC,OAAO,CAAC;MAClC,GAAGjB,UAAU,CAACkB,WAAW,CAACZ,YAAY,CAAC;MACvC,GAAGN,UAAU,CAACmB,YAAY,CAACR,aAAa,CAAC;MACzC,GAAGX,UAAU,CAACa,WAAW,CAACD,YAAY,CAAC;MACvCQ,GAAG,EAAEjB,kBAAkB,CAACO,OAAO,EAAE,KAAK,CAAC;MACvCW,KAAK,EAAElB,kBAAkB,CAACO,OAAO,EAAE,OAAO,CAAC;MAC3CY,MAAM,EAAEnB,kBAAkB,CAACO,OAAO,EAAE,QAAQ,CAAC;MAC7Ca,IAAI,EAAEpB,kBAAkB,CAACO,OAAO,EAAE,MAAM;IAC5C;EACJ,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,MAAMc,uBAAuB,GAAG,SAAAA,CAAA;EAAA,IAAC;IAAEC,aAAa,GAAE,KAAK;IAAGC,QAAQ,GAAExB,cAAc,CAACwB,QAAQ;IAAGC,KAAK,GAAEzB,cAAc,CAACyB;EAAO,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG1B,cAAc;EAAA,OAAI;IACpJ,QAAQ,EAAE;MACN6B,YAAY,EAAEN,aAAa,GAAGK,SAAS,GAAG;IAC9C,CAAC;IACD,gBAAgB,EAAE;MACdC,YAAY,EAAEN,aAAa,GAAGK,SAAS,GAAG;IAC9C,CAAC;IACD,GAAG7B,+BAA+B,CAACQ,qBAAqB,CAAC;MACrDG,YAAY,EAAEb,MAAM,CAACiC,iBAAiB;MACtCrB,aAAa,EAAEZ,MAAM,CAACkC,kBAAkB;MACxC;MACA3B,YAAY,EAAE,KAAK;MACnB,GAAGqB;IACP,CAAC,CAAC,EAAE;MACAD;IACJ,CAAC;EACL,CAAC;AAAA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}