{"ast":null,"code":"import { useCallback } from 'react';\nimport { useControllableState } from '@fluentui/react-utilities';\nexport const useSelection = props => {\n  const {\n    defaultSelectedOptions,\n    multiselect,\n    onOptionSelect\n  } = props;\n  const [selectedOptions, setSelectedOptions] = useControllableState({\n    state: props.selectedOptions,\n    defaultState: defaultSelectedOptions,\n    initialState: []\n  });\n  const selectOption = useCallback((event, option) => {\n    // if the option is disabled, do nothing\n    if (option.disabled) {\n      return;\n    }\n    // for single-select, always return the selected option\n    let newSelection = [option.value];\n    // toggle selected state of the option for multiselect\n    if (multiselect) {\n      const selectedIndex = selectedOptions.findIndex(o => o === option.value);\n      if (selectedIndex > -1) {\n        // deselect option\n        newSelection = [...selectedOptions.slice(0, selectedIndex), ...selectedOptions.slice(selectedIndex + 1)];\n      } else {\n        // select option\n        newSelection = [...selectedOptions, option.value];\n      }\n    }\n    setSelectedOptions(newSelection);\n    onOptionSelect === null || onOptionSelect === void 0 ? void 0 : onOptionSelect(event, {\n      optionValue: option.value,\n      optionText: option.text,\n      selectedOptions: newSelection\n    });\n  }, [onOptionSelect, multiselect, selectedOptions, setSelectedOptions]);\n  const clearSelection = event => {\n    setSelectedOptions([]);\n    onOptionSelect === null || onOptionSelect === void 0 ? void 0 : onOptionSelect(event, {\n      optionValue: undefined,\n      optionText: undefined,\n      selectedOptions: []\n    });\n  };\n  return {\n    clearSelection,\n    selectOption,\n    selectedOptions\n  };\n};","map":{"version":3,"names":["useCallback","useControllableState","useSelection","props","defaultSelectedOptions","multiselect","onOptionSelect","selectedOptions","setSelectedOptions","state","defaultState","initialState","selectOption","event","option","disabled","newSelection","value","selectedIndex","findIndex","o","slice","optionValue","optionText","text","clearSelection","undefined"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-combobox/lib/utils/useSelection.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { useControllableState } from '@fluentui/react-utilities';\nexport const useSelection = (props)=>{\n    const { defaultSelectedOptions , multiselect , onOptionSelect  } = props;\n    const [selectedOptions, setSelectedOptions] = useControllableState({\n        state: props.selectedOptions,\n        defaultState: defaultSelectedOptions,\n        initialState: []\n    });\n    const selectOption = useCallback((event, option)=>{\n        // if the option is disabled, do nothing\n        if (option.disabled) {\n            return;\n        }\n        // for single-select, always return the selected option\n        let newSelection = [\n            option.value\n        ];\n        // toggle selected state of the option for multiselect\n        if (multiselect) {\n            const selectedIndex = selectedOptions.findIndex((o)=>o === option.value);\n            if (selectedIndex > -1) {\n                // deselect option\n                newSelection = [\n                    ...selectedOptions.slice(0, selectedIndex),\n                    ...selectedOptions.slice(selectedIndex + 1)\n                ];\n            } else {\n                // select option\n                newSelection = [\n                    ...selectedOptions,\n                    option.value\n                ];\n            }\n        }\n        setSelectedOptions(newSelection);\n        onOptionSelect === null || onOptionSelect === void 0 ? void 0 : onOptionSelect(event, {\n            optionValue: option.value,\n            optionText: option.text,\n            selectedOptions: newSelection\n        });\n    }, [\n        onOptionSelect,\n        multiselect,\n        selectedOptions,\n        setSelectedOptions\n    ]);\n    const clearSelection = (event)=>{\n        setSelectedOptions([]);\n        onOptionSelect === null || onOptionSelect === void 0 ? void 0 : onOptionSelect(event, {\n            optionValue: undefined,\n            optionText: undefined,\n            selectedOptions: []\n        });\n    };\n    return {\n        clearSelection,\n        selectOption,\n        selectedOptions\n    };\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,oBAAoB,QAAQ,2BAA2B;AAChE,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAG;EACjC,MAAM;IAAEC,sBAAsB;IAAGC,WAAW;IAAGC;EAAgB,CAAC,GAAGH,KAAK;EACxE,MAAM,CAACI,eAAe,EAAEC,kBAAkB,CAAC,GAAGP,oBAAoB,CAAC;IAC/DQ,KAAK,EAAEN,KAAK,CAACI,eAAe;IAC5BG,YAAY,EAAEN,sBAAsB;IACpCO,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,MAAMC,YAAY,GAAGZ,WAAW,CAAC,CAACa,KAAK,EAAEC,MAAM,KAAG;IAC9C;IACA,IAAIA,MAAM,CAACC,QAAQ,EAAE;MACjB;IACJ;IACA;IACA,IAAIC,YAAY,GAAG,CACfF,MAAM,CAACG,KAAK,CACf;IACD;IACA,IAAIZ,WAAW,EAAE;MACb,MAAMa,aAAa,GAAGX,eAAe,CAACY,SAAS,CAAEC,CAAC,IAAGA,CAAC,KAAKN,MAAM,CAACG,KAAK,CAAC;MACxE,IAAIC,aAAa,GAAG,CAAC,CAAC,EAAE;QACpB;QACAF,YAAY,GAAG,CACX,GAAGT,eAAe,CAACc,KAAK,CAAC,CAAC,EAAEH,aAAa,CAAC,EAC1C,GAAGX,eAAe,CAACc,KAAK,CAACH,aAAa,GAAG,CAAC,CAAC,CAC9C;MACL,CAAC,MAAM;QACH;QACAF,YAAY,GAAG,CACX,GAAGT,eAAe,EAClBO,MAAM,CAACG,KAAK,CACf;MACL;IACJ;IACAT,kBAAkB,CAACQ,YAAY,CAAC;IAChCV,cAAc,KAAK,IAAI,IAAIA,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACO,KAAK,EAAE;MAClFS,WAAW,EAAER,MAAM,CAACG,KAAK;MACzBM,UAAU,EAAET,MAAM,CAACU,IAAI;MACvBjB,eAAe,EAAES;IACrB,CAAC,CAAC;EACN,CAAC,EAAE,CACCV,cAAc,EACdD,WAAW,EACXE,eAAe,EACfC,kBAAkB,CACrB,CAAC;EACF,MAAMiB,cAAc,GAAIZ,KAAK,IAAG;IAC5BL,kBAAkB,CAAC,EAAE,CAAC;IACtBF,cAAc,KAAK,IAAI,IAAIA,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACO,KAAK,EAAE;MAClFS,WAAW,EAAEI,SAAS;MACtBH,UAAU,EAAEG,SAAS;MACrBnB,eAAe,EAAE;IACrB,CAAC,CAAC;EACN,CAAC;EACD,OAAO;IACHkB,cAAc;IACdb,YAAY;IACZL;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}