{"ast":null,"code":"import { generateStyles } from './generateStyles.esm.js';\n\n/**\r\n * A function that implements CSS spec conformant expansion for \"borderColor\"\r\n *\r\n * @example\r\n *  borderColor('red')\r\n *  borderColor('red', 'blue')\r\n *  borderColor('red', 'blue', 'green')\r\n *  borderColor('red', 'blue', 'green', 'yellow')\r\n *\r\n * See https://developer.mozilla.org/en-US/docs/Web/CSS/border-color\r\n */\nfunction borderColor() {\n  for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n    values[_key] = arguments[_key];\n  }\n  return generateStyles('border', 'Color', ...values);\n}\nexport { borderColor };","map":{"version":3,"names":["borderColor","_len","arguments","length","values","Array","_key","generateStyles"],"sources":["/Users/suketupatel/Desktop/application/frontend/packages/core/src/shorthands/borderColor.ts"],"sourcesContent":["import type { GriffelStyle } from '@griffel/style-types';\nimport { generateStyles } from './generateStyles';\nimport type { BorderColorInput } from './types';\n\ntype BorderColorStyle = Pick<\n  GriffelStyle,\n  'borderTopColor' | 'borderRightColor' | 'borderBottomColor' | 'borderLeftColor'\n>;\n\nexport function borderColor(all: BorderColorInput): BorderColorStyle;\nexport function borderColor(vertical: BorderColorInput, horizontal: BorderColorInput): BorderColorStyle;\nexport function borderColor(\n  top: BorderColorInput,\n  horizontal: BorderColorInput,\n  bottom: BorderColorInput,\n): BorderColorStyle;\nexport function borderColor(\n  top: BorderColorInput,\n  right: BorderColorInput,\n  bottom: BorderColorInput,\n  left: BorderColorInput,\n): BorderColorStyle;\n\n/**\n * A function that implements CSS spec conformant expansion for \"borderColor\"\n *\n * @example\n *  borderColor('red')\n *  borderColor('red', 'blue')\n *  borderColor('red', 'blue', 'green')\n *  borderColor('red', 'blue', 'green', 'yellow')\n *\n * See https://developer.mozilla.org/en-US/docs/Web/CSS/border-color\n */\nexport function borderColor(...values: BorderColorInput[]): BorderColorStyle {\n  return generateStyles<BorderColorStyle>('border', 'Color', ...values);\n}\n"],"mappings":";;AAuBA;;;;;;;;;;;SAWgBA,WAAWA,CAAA,EAA8B;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAA1BC,MAA0B,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAA1BF,MAA0B,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EACvD,OAAOC,cAAc,CAAmB,QAAQ,EAAE,OAAO,EAAE,GAAGH,MAAM,CAAC;AACvE"},"metadata":{},"sourceType":"module","externalDependencies":[]}