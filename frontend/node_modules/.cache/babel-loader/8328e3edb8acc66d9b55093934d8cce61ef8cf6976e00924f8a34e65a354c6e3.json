{"ast":null,"code":"const cssVarRegEx = /var\\(.*\\)/gi;\nfunction isValidGridAreaInput(value) {\n  return value === undefined || typeof value === 'number' || typeof value === 'string' && !cssVarRegEx.test(value);\n}\n// A custom-ident can be an alpha-numeric string including dash (-), underscore, escaped (\\) characters, and escaped unicode\nconst customIdentRegEx = /^[a-zA-Z0-9\\-_\\\\#;]+$/;\nconst nonCustomIdentRegEx = /^-moz-initial$|^auto$|^initial$|^inherit$|^revert$|^unset$|^span \\d+$|\\d.*/;\n// See https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident\nfunction isCustomIdent(value) {\n  return value !== undefined && typeof value === 'string' && customIdentRegEx.test(value) && !nonCustomIdentRegEx.test(value);\n}\n/**\r\n * A function that implements CSS spec conformant expansion for \"grid-area\"\r\n *\r\n * @example\r\n *   gridArea('auto')\r\n *   gridArea('first', 'second')\r\n *   gridArea(2, 4, 4)\r\n *   gridArea(2, 4, 1, 3)\r\n *\r\n * See https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area\r\n */\nfunction gridArea() {\n  for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n    values[_key] = arguments[_key];\n  }\n  // if any value is not valid, then do not apply the CSS.\n  if (values.some(value => !isValidGridAreaInput(value))) {\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.error(`The value passed to shorthands.gridArea() did not match any gridArea property specs. The CSS styles were not generated. Please, check the gridArea documentation.`, ['The value passed to shorthands.gridArea() did not match any gridArea property specs. ', 'The CSS styles were not generated.\\n', 'Please, check the `grid-area` documentation:\\n', '- https://developer.mozilla.org/docs/Web/CSS/grid-area', '- https://griffel.js.org/react/api/shorthands#shorthandsgridarea'].join(''));\n    }\n    return {};\n  }\n  const gridRowStart = values[0] !== undefined ? values[0] : 'auto';\n  // When grid-column-start is omitted, if grid-row-start is a <custom-ident>,\n  // all four longhands are set to that value.\n  // Otherwise, it is set to auto.\n  const gridColumnStart = values[1] !== undefined ? values[1] : isCustomIdent(gridRowStart) ? gridRowStart : 'auto';\n  // When grid-row-end is omitted,\n  // if grid-row-start is a <custom-ident>, grid-row-end is set to that <custom-ident>;\n  // otherwise, it is set to auto.\n  const gridRowEnd = values[2] !== undefined ? values[2] : isCustomIdent(gridRowStart) ? gridRowStart : 'auto';\n  // When grid-column-end is omitted,\n  // if grid-column-start is a <custom-ident>, grid-column-end is set to that <custom-ident>;\n  // otherwise, it is set to auto.\n  const gridColumnEnd = values[3] !== undefined ? values[3] : isCustomIdent(gridColumnStart) ? gridColumnStart : 'auto';\n  return {\n    gridRowStart,\n    gridColumnStart,\n    gridRowEnd,\n    gridColumnEnd\n  };\n}\nexport { gridArea };","map":{"version":3,"names":["cssVarRegEx","isValidGridAreaInput","value","undefined","test","customIdentRegEx","nonCustomIdentRegEx","isCustomIdent","gridArea","_len","arguments","length","values","Array","_key","some","process","env","NODE_ENV","console","error","join","gridRowStart","gridColumnStart","gridRowEnd","gridColumnEnd"],"sources":["/Users/suketupatel/Desktop/application/frontend/packages/core/src/shorthands/gridArea.ts"],"sourcesContent":["import type { GriffelStyle } from '@griffel/style-types';\nimport type { GridAreaInput } from './types';\n\ntype GridAreaStyle = Pick<GriffelStyle, 'gridRowStart' | 'gridRowEnd' | 'gridColumnStart' | 'gridColumnEnd'>;\n\nconst cssVarRegEx = /var\\(.*\\)/gi;\n\nfunction isValidGridAreaInput(value: GridAreaInput) {\n  return value === undefined || typeof value === 'number' || (typeof value === 'string' && !cssVarRegEx.test(value));\n}\n\n// A custom-ident can be an alpha-numeric string including dash (-), underscore, escaped (\\) characters, and escaped unicode\nconst customIdentRegEx = /^[a-zA-Z0-9\\-_\\\\#;]+$/;\nconst nonCustomIdentRegEx = /^-moz-initial$|^auto$|^initial$|^inherit$|^revert$|^unset$|^span \\d+$|\\d.*/;\n\n// See https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident\nfunction isCustomIdent(value: GridAreaInput | undefined): boolean {\n  return (\n    value !== undefined && typeof value === 'string' && customIdentRegEx.test(value) && !nonCustomIdentRegEx.test(value)\n  );\n}\n\nexport function gridArea(all: GridAreaInput): GridAreaStyle;\nexport function gridArea(rowStart: GridAreaInput, columnStart: GridAreaInput): GridAreaStyle;\nexport function gridArea(rowStart: GridAreaInput, columnStart: GridAreaInput, rowEnd: GridAreaInput): GridAreaStyle;\nexport function gridArea(\n  rowStart: GridAreaInput,\n  columnStart: GridAreaInput,\n  rowEnd: GridAreaInput,\n  columnEnd: GridAreaInput,\n): GridAreaStyle;\n\n/**\n * A function that implements CSS spec conformant expansion for \"grid-area\"\n *\n * @example\n *   gridArea('auto')\n *   gridArea('first', 'second')\n *   gridArea(2, 4, 4)\n *   gridArea(2, 4, 1, 3)\n *\n * See https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area\n */\nexport function gridArea(...values: GridAreaInput[]): GridAreaStyle {\n  // if any value is not valid, then do not apply the CSS.\n  if (values.some(value => !isValidGridAreaInput(value))) {\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.error(\n        `The value passed to shorthands.gridArea() did not match any gridArea property specs. The CSS styles were not generated. Please, check the gridArea documentation.`,\n        [\n          'The value passed to shorthands.gridArea() did not match any gridArea property specs. ',\n          'The CSS styles were not generated.\\n',\n          'Please, check the `grid-area` documentation:\\n',\n          '- https://developer.mozilla.org/docs/Web/CSS/grid-area',\n          '- https://griffel.js.org/react/api/shorthands#shorthandsgridarea',\n        ].join(''),\n      );\n    }\n\n    return {};\n  }\n  const gridRowStart = values[0] !== undefined ? values[0] : 'auto';\n\n  // When grid-column-start is omitted, if grid-row-start is a <custom-ident>,\n  // all four longhands are set to that value.\n  // Otherwise, it is set to auto.\n  const gridColumnStart = values[1] !== undefined ? values[1] : isCustomIdent(gridRowStart) ? gridRowStart : 'auto';\n\n  // When grid-row-end is omitted,\n  // if grid-row-start is a <custom-ident>, grid-row-end is set to that <custom-ident>;\n  // otherwise, it is set to auto.\n  const gridRowEnd = values[2] !== undefined ? values[2] : isCustomIdent(gridRowStart) ? gridRowStart : 'auto';\n\n  // When grid-column-end is omitted,\n  // if grid-column-start is a <custom-ident>, grid-column-end is set to that <custom-ident>;\n  // otherwise, it is set to auto.\n  const gridColumnEnd = values[3] !== undefined ? values[3] : isCustomIdent(gridColumnStart) ? gridColumnStart : 'auto';\n\n  return {\n    gridRowStart,\n    gridColumnStart,\n    gridRowEnd,\n    gridColumnEnd,\n  };\n}\n"],"mappings":"AAKA,MAAMA,WAAW,GAAG,aAAa;AAEjC,SAASC,oBAAoBA,CAACC,KAAoB;EAChD,OAAOA,KAAK,KAAKC,SAAS,IAAI,OAAOD,KAAK,KAAK,QAAQ,IAAK,OAAOA,KAAK,KAAK,QAAQ,IAAI,CAACF,WAAW,CAACI,IAAI,CAACF,KAAK,CAAE;AACpH;AAEA;AACA,MAAMG,gBAAgB,GAAG,uBAAuB;AAChD,MAAMC,mBAAmB,GAAG,4EAA4E;AAExG;AACA,SAASC,aAAaA,CAACL,KAAgC;EACrD,OACEA,KAAK,KAAKC,SAAS,IAAI,OAAOD,KAAK,KAAK,QAAQ,IAAIG,gBAAgB,CAACD,IAAI,CAACF,KAAK,CAAC,IAAI,CAACI,mBAAmB,CAACF,IAAI,CAACF,KAAK,CAAC;AAExH;AAYA;;;;;;;;;;;SAWgBM,QAAQA,CAAA,EAA2B;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAvBC,MAAuB,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAvBF,MAAuB,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;;EAEjD,IAAIF,MAAM,CAACG,IAAI,CAACb,KAAK,IAAI,CAACD,oBAAoB,CAACC,KAAK,CAAC,CAAC,EAAE;IACtD,IAAIc,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;;MAEzCC,OAAO,CAACC,KAAK,oKACwJ,EACnK,CACE,uFAAuF,EACvF,sCAAsC,EACtC,gDAAgD,EAChD,wDAAwD,EACxD,kEAAkE,CACnE,CAACC,IAAI,CAAC,EAAE,CAAC,CACX;;IAGH,OAAO,EAAE;;EAEX,MAAMC,YAAY,GAAGV,MAAM,CAAC,CAAC,CAAC,KAAKT,SAAS,GAAGS,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM;;;;EAKjE,MAAMW,eAAe,GAAGX,MAAM,CAAC,CAAC,CAAC,KAAKT,SAAS,GAAGS,MAAM,CAAC,CAAC,CAAC,GAAGL,aAAa,CAACe,YAAY,CAAC,GAAGA,YAAY,GAAG,MAAM;;;;EAKjH,MAAME,UAAU,GAAGZ,MAAM,CAAC,CAAC,CAAC,KAAKT,SAAS,GAAGS,MAAM,CAAC,CAAC,CAAC,GAAGL,aAAa,CAACe,YAAY,CAAC,GAAGA,YAAY,GAAG,MAAM;;;;EAK5G,MAAMG,aAAa,GAAGb,MAAM,CAAC,CAAC,CAAC,KAAKT,SAAS,GAAGS,MAAM,CAAC,CAAC,CAAC,GAAGL,aAAa,CAACgB,eAAe,CAAC,GAAGA,eAAe,GAAG,MAAM;EAErH,OAAO;IACLD,YAAY;IACZC,eAAe;IACfC,UAAU;IACVC;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}