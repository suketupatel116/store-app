{"ast":null,"code":"import * as React from 'react';\nimport { TableResizeHandle } from '../TableResizeHandle';\nimport { useMeasureElement } from './useMeasureElement';\nimport { useTableColumnResizeMouseHandler } from './useTableColumnResizeMouseHandler';\nimport { useTableColumnResizeState } from './useTableColumnResizeState';\nimport { useKeyboardResizing } from './useKeyboardResizing';\nexport const defaultColumnSizingState = {\n  getColumnWidths: () => [],\n  getOnMouseDown: () => () => null,\n  setColumnWidth: () => null,\n  getTableHeaderCellProps: () => ({\n    style: {},\n    columnId: ''\n  }),\n  getTableCellProps: () => ({\n    style: {},\n    columnId: ''\n  }),\n  enableKeyboardMode: () => () => null\n};\nexport function useTableColumnSizing_unstable(params) {\n  // False positive, these plugin hooks are intended to be run on every render\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return tableState => useTableColumnSizingState(tableState, params);\n}\nfunction getColumnStyles(column) {\n  const width = column.width;\n  return {\n    // native styles\n    width,\n    // non-native element styles (flex layout)\n    minWidth: width,\n    maxWidth: width\n  };\n}\nfunction useTableColumnSizingState(tableState, params) {\n  const {\n    columns\n  } = tableState;\n  // Gets the container width\n  const {\n    width,\n    measureElementRef\n  } = useMeasureElement();\n  // Creates the state based on columns and available containerWidth\n  const columnResizeState = useTableColumnResizeState(columns, width + ((params === null || params === void 0 ? void 0 : params.containerWidthOffset) || 0), params);\n  // Creates the mouse handler and attaches the state to it\n  const mouseHandler = useTableColumnResizeMouseHandler(columnResizeState);\n  // Creates the keyboard handler for resizing columns\n  const {\n    toggleInteractiveMode,\n    getKeyboardResizingProps\n  } = useKeyboardResizing(columnResizeState);\n  const enableKeyboardMode = React.useCallback((columnId, onChange) => e => {\n    e.preventDefault();\n    e.nativeEvent.stopPropagation();\n    toggleInteractiveMode(columnId, onChange);\n  }, [toggleInteractiveMode]);\n  return {\n    ...tableState,\n    tableRef: measureElementRef,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    columnSizing_unstable: {\n      getOnMouseDown: mouseHandler.getOnMouseDown,\n      setColumnWidth: (columnId, w) => columnResizeState.setColumnWidth(undefined, {\n        columnId,\n        width: w\n      }),\n      getColumnWidths: columnResizeState.getColumns,\n      getTableHeaderCellProps: columnId => {\n        const col = columnResizeState.getColumnById(columnId);\n        const aside = /*#__PURE__*/React.createElement(TableResizeHandle, {\n          onMouseDown: mouseHandler.getOnMouseDown(columnId),\n          onTouchStart: mouseHandler.getOnMouseDown(columnId),\n          ...getKeyboardResizingProps(columnId, (col === null || col === void 0 ? void 0 : col.width) || 0)\n        });\n        return col ? {\n          style: getColumnStyles(col),\n          aside\n        } : {};\n      },\n      getTableCellProps: columnId => {\n        const col = columnResizeState.getColumnById(columnId);\n        return col ? {\n          style: getColumnStyles(col)\n        } : {};\n      },\n      enableKeyboardMode\n    }\n  };\n}","map":{"version":3,"names":["React","TableResizeHandle","useMeasureElement","useTableColumnResizeMouseHandler","useTableColumnResizeState","useKeyboardResizing","defaultColumnSizingState","getColumnWidths","getOnMouseDown","setColumnWidth","getTableHeaderCellProps","style","columnId","getTableCellProps","enableKeyboardMode","useTableColumnSizing_unstable","params","tableState","useTableColumnSizingState","getColumnStyles","column","width","minWidth","maxWidth","columns","measureElementRef","columnResizeState","containerWidthOffset","mouseHandler","toggleInteractiveMode","getKeyboardResizingProps","useCallback","onChange","e","preventDefault","nativeEvent","stopPropagation","tableRef","columnSizing_unstable","w","undefined","getColumns","col","getColumnById","aside","createElement","onMouseDown","onTouchStart"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-table/lib/hooks/useTableColumnSizing.js"],"sourcesContent":["import * as React from 'react';\nimport { TableResizeHandle } from '../TableResizeHandle';\nimport { useMeasureElement } from './useMeasureElement';\nimport { useTableColumnResizeMouseHandler } from './useTableColumnResizeMouseHandler';\nimport { useTableColumnResizeState } from './useTableColumnResizeState';\nimport { useKeyboardResizing } from './useKeyboardResizing';\nexport const defaultColumnSizingState = {\n    getColumnWidths: ()=>[],\n    getOnMouseDown: ()=>()=>null,\n    setColumnWidth: ()=>null,\n    getTableHeaderCellProps: ()=>({\n            style: {},\n            columnId: ''\n        }),\n    getTableCellProps: ()=>({\n            style: {},\n            columnId: ''\n        }),\n    enableKeyboardMode: ()=>()=>null\n};\nexport function useTableColumnSizing_unstable(params) {\n    // False positive, these plugin hooks are intended to be run on every render\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return (tableState)=>useTableColumnSizingState(tableState, params);\n}\nfunction getColumnStyles(column) {\n    const width = column.width;\n    return {\n        // native styles\n        width,\n        // non-native element styles (flex layout)\n        minWidth: width,\n        maxWidth: width\n    };\n}\nfunction useTableColumnSizingState(tableState, params) {\n    const { columns  } = tableState;\n    // Gets the container width\n    const { width , measureElementRef  } = useMeasureElement();\n    // Creates the state based on columns and available containerWidth\n    const columnResizeState = useTableColumnResizeState(columns, width + ((params === null || params === void 0 ? void 0 : params.containerWidthOffset) || 0), params);\n    // Creates the mouse handler and attaches the state to it\n    const mouseHandler = useTableColumnResizeMouseHandler(columnResizeState);\n    // Creates the keyboard handler for resizing columns\n    const { toggleInteractiveMode , getKeyboardResizingProps  } = useKeyboardResizing(columnResizeState);\n    const enableKeyboardMode = React.useCallback((columnId, onChange)=>(e)=>{\n            e.preventDefault();\n            e.nativeEvent.stopPropagation();\n            toggleInteractiveMode(columnId, onChange);\n        }, [\n        toggleInteractiveMode\n    ]);\n    return {\n        ...tableState,\n        tableRef: measureElementRef,\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        columnSizing_unstable: {\n            getOnMouseDown: mouseHandler.getOnMouseDown,\n            setColumnWidth: (columnId, w)=>columnResizeState.setColumnWidth(undefined, {\n                    columnId,\n                    width: w\n                }),\n            getColumnWidths: columnResizeState.getColumns,\n            getTableHeaderCellProps: (columnId)=>{\n                const col = columnResizeState.getColumnById(columnId);\n                const aside = /*#__PURE__*/ React.createElement(TableResizeHandle, {\n                    onMouseDown: mouseHandler.getOnMouseDown(columnId),\n                    onTouchStart: mouseHandler.getOnMouseDown(columnId),\n                    ...getKeyboardResizingProps(columnId, (col === null || col === void 0 ? void 0 : col.width) || 0)\n                });\n                return col ? {\n                    style: getColumnStyles(col),\n                    aside\n                } : {};\n            },\n            getTableCellProps: (columnId)=>{\n                const col = columnResizeState.getColumnById(columnId);\n                return col ? {\n                    style: getColumnStyles(col)\n                } : {};\n            },\n            enableKeyboardMode\n        }\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}