{"ast":null,"code":"import * as React from 'react';\nimport { useControllableState } from '../hooks/useControllableState';\nimport { createSetFromIterable } from '../utils/createSetFromIterable';\nfunction useSelectionState(params) {\n  const [selected, setSelected] = useControllableState({\n    initialState: new Set(),\n    defaultState: React.useMemo(() => params.defaultSelectedItems && createSetFromIterable(params.defaultSelectedItems), [params.defaultSelectedItems]),\n    state: React.useMemo(() => params.selectedItems && createSetFromIterable(params.selectedItems), [params.selectedItems])\n  });\n  const changeSelection = (event, nextSelectedItems) => {\n    var _params_onSelectionChange;\n    (_params_onSelectionChange = params.onSelectionChange) === null || _params_onSelectionChange === void 0 ? void 0 : _params_onSelectionChange.call(params, event, {\n      selectedItems: nextSelectedItems\n    });\n    setSelected(nextSelectedItems);\n  };\n  return [selected, changeSelection];\n}\nfunction useSingleSelection(params) {\n  const [selected, changeSelection] = useSelectionState(params);\n  var _selected_has;\n  const methods = {\n    deselectItem: event => changeSelection(event, new Set()),\n    selectItem: (event, itemId) => changeSelection(event, new Set([itemId])),\n    toggleAllItems: () => {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error('[react-utilities]: `toggleAllItems` should not be used in single selection mode');\n      }\n    },\n    toggleItem: (event, itemId) => changeSelection(event, new Set([itemId])),\n    clearItems: event => changeSelection(event, new Set()),\n    isSelected: itemId => (_selected_has = selected.has(itemId)) !== null && _selected_has !== void 0 ? _selected_has : false\n  };\n  return [selected, methods];\n}\nfunction useMultipleSelection(params) {\n  const [selected, changeSelection] = useSelectionState(params);\n  const methods = {\n    toggleItem: (event, itemId) => {\n      const nextSelectedItems = new Set(selected);\n      if (selected.has(itemId)) {\n        nextSelectedItems.delete(itemId);\n      } else {\n        nextSelectedItems.add(itemId);\n      }\n      changeSelection(event, nextSelectedItems);\n    },\n    selectItem: (event, itemId) => {\n      const nextSelectedItems = new Set(selected);\n      nextSelectedItems.add(itemId);\n      changeSelection(event, nextSelectedItems);\n    },\n    deselectItem: (event, itemId) => {\n      const nextSelectedItems = new Set(selected);\n      nextSelectedItems.delete(itemId);\n      changeSelection(event, nextSelectedItems);\n    },\n    clearItems: event => {\n      changeSelection(event, new Set());\n    },\n    isSelected: itemId => selected.has(itemId),\n    toggleAllItems: (event, itemIds) => {\n      const allItemsSelected = itemIds.every(itemId => selected.has(itemId));\n      const nextSelectedItems = new Set(selected);\n      if (allItemsSelected) {\n        nextSelectedItems.clear();\n      } else {\n        itemIds.forEach(itemId => nextSelectedItems.add(itemId));\n      }\n      changeSelection(event, nextSelectedItems);\n    }\n  };\n  return [selected, methods];\n}\nexport function useSelection(params) {\n  if (params.selectionMode === 'multiselect') {\n    // selectionMode is a static value, so we can safely ignore rules-of-hooks\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useMultipleSelection(params);\n  }\n  // selectionMode is a static value, so we can safely ignore rules-of-hooks\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useSingleSelection(params);\n}","map":{"version":3,"names":["React","useControllableState","createSetFromIterable","useSelectionState","params","selected","setSelected","initialState","Set","defaultState","useMemo","defaultSelectedItems","state","selectedItems","changeSelection","event","nextSelectedItems","_params_onSelectionChange","onSelectionChange","call","useSingleSelection","_selected_has","methods","deselectItem","selectItem","itemId","toggleAllItems","process","env","NODE_ENV","Error","toggleItem","clearItems","isSelected","has","useMultipleSelection","delete","add","itemIds","allItemsSelected","every","clear","forEach","useSelection","selectionMode"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-utilities/lib/selection/useSelection.js"],"sourcesContent":["import * as React from 'react';\nimport { useControllableState } from '../hooks/useControllableState';\nimport { createSetFromIterable } from '../utils/createSetFromIterable';\nfunction useSelectionState(params) {\n    const [selected, setSelected] = useControllableState({\n        initialState: new Set(),\n        defaultState: React.useMemo(()=>params.defaultSelectedItems && createSetFromIterable(params.defaultSelectedItems), [\n            params.defaultSelectedItems\n        ]),\n        state: React.useMemo(()=>params.selectedItems && createSetFromIterable(params.selectedItems), [\n            params.selectedItems\n        ])\n    });\n    const changeSelection = (event, nextSelectedItems)=>{\n        var _params_onSelectionChange;\n        (_params_onSelectionChange = params.onSelectionChange) === null || _params_onSelectionChange === void 0 ? void 0 : _params_onSelectionChange.call(params, event, {\n            selectedItems: nextSelectedItems\n        });\n        setSelected(nextSelectedItems);\n    };\n    return [\n        selected,\n        changeSelection\n    ];\n}\nfunction useSingleSelection(params) {\n    const [selected, changeSelection] = useSelectionState(params);\n    var _selected_has;\n    const methods = {\n        deselectItem: (event)=>changeSelection(event, new Set()),\n        selectItem: (event, itemId)=>changeSelection(event, new Set([\n                itemId\n            ])),\n        toggleAllItems: ()=>{\n            if (process.env.NODE_ENV !== 'production') {\n                throw new Error('[react-utilities]: `toggleAllItems` should not be used in single selection mode');\n            }\n        },\n        toggleItem: (event, itemId)=>changeSelection(event, new Set([\n                itemId\n            ])),\n        clearItems: (event)=>changeSelection(event, new Set()),\n        isSelected: (itemId)=>(_selected_has = selected.has(itemId)) !== null && _selected_has !== void 0 ? _selected_has : false\n    };\n    return [\n        selected,\n        methods\n    ];\n}\nfunction useMultipleSelection(params) {\n    const [selected, changeSelection] = useSelectionState(params);\n    const methods = {\n        toggleItem: (event, itemId)=>{\n            const nextSelectedItems = new Set(selected);\n            if (selected.has(itemId)) {\n                nextSelectedItems.delete(itemId);\n            } else {\n                nextSelectedItems.add(itemId);\n            }\n            changeSelection(event, nextSelectedItems);\n        },\n        selectItem: (event, itemId)=>{\n            const nextSelectedItems = new Set(selected);\n            nextSelectedItems.add(itemId);\n            changeSelection(event, nextSelectedItems);\n        },\n        deselectItem: (event, itemId)=>{\n            const nextSelectedItems = new Set(selected);\n            nextSelectedItems.delete(itemId);\n            changeSelection(event, nextSelectedItems);\n        },\n        clearItems: (event)=>{\n            changeSelection(event, new Set());\n        },\n        isSelected: (itemId)=>selected.has(itemId),\n        toggleAllItems: (event, itemIds)=>{\n            const allItemsSelected = itemIds.every((itemId)=>selected.has(itemId));\n            const nextSelectedItems = new Set(selected);\n            if (allItemsSelected) {\n                nextSelectedItems.clear();\n            } else {\n                itemIds.forEach((itemId)=>nextSelectedItems.add(itemId));\n            }\n            changeSelection(event, nextSelectedItems);\n        }\n    };\n    return [\n        selected,\n        methods\n    ];\n}\nexport function useSelection(params) {\n    if (params.selectionMode === 'multiselect') {\n        // selectionMode is a static value, so we can safely ignore rules-of-hooks\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        return useMultipleSelection(params);\n    }\n    // selectionMode is a static value, so we can safely ignore rules-of-hooks\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useSingleSelection(params);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}