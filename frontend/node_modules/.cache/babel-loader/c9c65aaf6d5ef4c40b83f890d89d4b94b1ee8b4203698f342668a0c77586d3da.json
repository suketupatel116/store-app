{"ast":null,"code":"import * as React from 'react';\nimport { mergeCallbacks, useControllableState, useEventCallback } from '@fluentui/react-utilities';\nexport function useToggleState(props, state) {\n  const {\n    checked,\n    defaultChecked,\n    disabled,\n    disabledFocusable\n  } = props;\n  const {\n    onClick,\n    role\n  } = state.root;\n  const [checkedValue, setCheckedValue] = useControllableState({\n    state: checked,\n    defaultState: defaultChecked,\n    initialState: false\n  });\n  const isCheckboxTypeRole = role === 'menuitemcheckbox' || role === 'checkbox';\n  const onToggleClick = React.useCallback(ev => {\n    if (!disabled && !disabledFocusable) {\n      if (ev.defaultPrevented) {\n        return;\n      }\n      setCheckedValue(!checkedValue);\n    }\n  }, [checkedValue, disabled, disabledFocusable, setCheckedValue]);\n  return {\n    ...state,\n    checked: checkedValue,\n    root: {\n      ...state.root,\n      [isCheckboxTypeRole ? 'aria-checked' : 'aria-pressed']: checkedValue,\n      onClick: useEventCallback(mergeCallbacks(onClick, onToggleClick))\n    }\n  };\n}","map":{"version":3,"names":["React","mergeCallbacks","useControllableState","useEventCallback","useToggleState","props","state","checked","defaultChecked","disabled","disabledFocusable","onClick","role","root","checkedValue","setCheckedValue","defaultState","initialState","isCheckboxTypeRole","onToggleClick","useCallback","ev","defaultPrevented"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-button/lib/utils/useToggleState.js"],"sourcesContent":["import * as React from 'react';\nimport { mergeCallbacks, useControllableState, useEventCallback } from '@fluentui/react-utilities';\nexport function useToggleState(props, state) {\n    const { checked , defaultChecked , disabled , disabledFocusable  } = props;\n    const { onClick , role  } = state.root;\n    const [checkedValue, setCheckedValue] = useControllableState({\n        state: checked,\n        defaultState: defaultChecked,\n        initialState: false\n    });\n    const isCheckboxTypeRole = role === 'menuitemcheckbox' || role === 'checkbox';\n    const onToggleClick = React.useCallback((ev)=>{\n        if (!disabled && !disabledFocusable) {\n            if (ev.defaultPrevented) {\n                return;\n            }\n            setCheckedValue(!checkedValue);\n        }\n    }, [\n        checkedValue,\n        disabled,\n        disabledFocusable,\n        setCheckedValue\n    ]);\n    return {\n        ...state,\n        checked: checkedValue,\n        root: {\n            ...state.root,\n            [isCheckboxTypeRole ? 'aria-checked' : 'aria-pressed']: checkedValue,\n            onClick: useEventCallback(mergeCallbacks(onClick, onToggleClick))\n        }\n    };\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,cAAc,EAAEC,oBAAoB,EAAEC,gBAAgB,QAAQ,2BAA2B;AAClG,OAAO,SAASC,cAAcA,CAACC,KAAK,EAAEC,KAAK,EAAE;EACzC,MAAM;IAAEC,OAAO;IAAGC,cAAc;IAAGC,QAAQ;IAAGC;EAAmB,CAAC,GAAGL,KAAK;EAC1E,MAAM;IAAEM,OAAO;IAAGC;EAAM,CAAC,GAAGN,KAAK,CAACO,IAAI;EACtC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGb,oBAAoB,CAAC;IACzDI,KAAK,EAAEC,OAAO;IACdS,YAAY,EAAER,cAAc;IAC5BS,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,MAAMC,kBAAkB,GAAGN,IAAI,KAAK,kBAAkB,IAAIA,IAAI,KAAK,UAAU;EAC7E,MAAMO,aAAa,GAAGnB,KAAK,CAACoB,WAAW,CAAEC,EAAE,IAAG;IAC1C,IAAI,CAACZ,QAAQ,IAAI,CAACC,iBAAiB,EAAE;MACjC,IAAIW,EAAE,CAACC,gBAAgB,EAAE;QACrB;MACJ;MACAP,eAAe,CAAC,CAACD,YAAY,CAAC;IAClC;EACJ,CAAC,EAAE,CACCA,YAAY,EACZL,QAAQ,EACRC,iBAAiB,EACjBK,eAAe,CAClB,CAAC;EACF,OAAO;IACH,GAAGT,KAAK;IACRC,OAAO,EAAEO,YAAY;IACrBD,IAAI,EAAE;MACF,GAAGP,KAAK,CAACO,IAAI;MACb,CAACK,kBAAkB,GAAG,cAAc,GAAG,cAAc,GAAGJ,YAAY;MACpEH,OAAO,EAAER,gBAAgB,CAACF,cAAc,CAACU,OAAO,EAAEQ,aAAa,CAAC;IACpE;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}