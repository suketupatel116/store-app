{"ast":null,"code":"import { __styles, mergeClasses, shorthands } from '@griffel/react';\nimport { useDividerStyles_unstable } from '@fluentui/react-divider';\nconst useBaseStyles = /*#__PURE__*/__styles({\n  root: {\n    mc9l5x: \"ftuwxu6\",\n    B2u0y6b: \"f1lwjmbk\",\n    z8tnut: \"f1g0x7ka\",\n    z189sj: [\"f11qrl6u\", \"fjlbh76\"],\n    Byoj8tv: \"f1qch9an\",\n    uwmqm3: [\"fjlbh76\", \"f11qrl6u\"]\n  },\n  vertical: {\n    B2u0y6b: \"fe668z\"\n  }\n}, {\n  d: [\".ftuwxu6{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;}\", \".f1lwjmbk{max-width:1px;}\", \".f1g0x7ka{padding-top:0;}\", \".f11qrl6u{padding-right:12px;}\", \".fjlbh76{padding-left:12px;}\", \".f1qch9an{padding-bottom:0;}\", \".fe668z{max-width:initial;}\"]\n});\n/**\n * Apply styling to the ToolbarDivider slots based on the state\n */\nexport const useToolbarDividerStyles_unstable = state => {\n  useDividerStyles_unstable(state);\n  const {\n    vertical\n  } = state;\n  const toolbarDividerStyles = useBaseStyles();\n  state.root.className = mergeClasses(toolbarDividerStyles.root, !vertical && toolbarDividerStyles.vertical, state.root.className);\n  return state;\n};","map":{"version":3,"names":["__styles","mergeClasses","shorthands","useDividerStyles_unstable","useBaseStyles","root","mc9l5x","B2u0y6b","z8tnut","z189sj","Byoj8tv","uwmqm3","vertical","d","useToolbarDividerStyles_unstable","state","toolbarDividerStyles","className"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-toolbar/lib/components/ToolbarDivider/useToolbarDividerStyles.styles.js"],"sourcesContent":["import { makeStyles, mergeClasses, shorthands } from '@griffel/react';\nimport { useDividerStyles_unstable } from '@fluentui/react-divider';\nconst useBaseStyles = makeStyles({\n    // Base styles\n    root: {\n        display: 'inline-flex',\n        maxWidth: '1px',\n        ...shorthands.padding('0', '12px')\n    },\n    vertical: {\n        maxWidth: 'initial'\n    }\n});\n/**\n * Apply styling to the ToolbarDivider slots based on the state\n */ export const useToolbarDividerStyles_unstable = (state)=>{\n    useDividerStyles_unstable(state);\n    const { vertical  } = state;\n    const toolbarDividerStyles = useBaseStyles();\n    state.root.className = mergeClasses(toolbarDividerStyles.root, !vertical && toolbarDividerStyles.vertical, state.root.className);\n    return state;\n};\n"],"mappings":"AAAA,SAAAA,QAAA,EAAqBC,YAAY,EAAEC,UAAU,QAAQ,gBAAgB;AACrE,SAASC,yBAAyB,QAAQ,yBAAyB;AACnE,MAAMC,aAAa,gBAAGJ,QAAA;EAAAK,IAAA;IAAAC,MAAA;IAAAC,OAAA;IAAAC,MAAA;IAAAC,MAAA;IAAAC,OAAA;IAAAC,MAAA;EAAA;EAAAC,QAAA;IAAAL,OAAA;EAAA;AAAA;EAAAM,CAAA;AAAA,CAUrB,CAAC;AACF;AACA;AACA;AAAI,OAAO,MAAMC,gCAAgC,GAAIC,KAAK,IAAG;EACzDZ,yBAAyB,CAACY,KAAK,CAAC;EAChC,MAAM;IAAEH;EAAU,CAAC,GAAGG,KAAK;EAC3B,MAAMC,oBAAoB,GAAGZ,aAAa,CAAC,CAAC;EAC5CW,KAAK,CAACV,IAAI,CAACY,SAAS,GAAGhB,YAAY,CAACe,oBAAoB,CAACX,IAAI,EAAE,CAACO,QAAQ,IAAII,oBAAoB,CAACJ,QAAQ,EAAEG,KAAK,CAACV,IAAI,CAACY,SAAS,CAAC;EAChI,OAAOF,KAAK;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}