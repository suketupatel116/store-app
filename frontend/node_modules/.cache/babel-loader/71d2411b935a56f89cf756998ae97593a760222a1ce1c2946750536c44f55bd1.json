{"ast":null,"code":"import * as React from 'react';\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs - Refs to collectively update with one ref value.\n * @returns A function with an attached \"current\" prop, so that it can be treated like a RefObject.\n */\nexport function useMergedRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n  const mergedCallback = React.useCallback(value => {\n    // Update the \"current\" prop hanging on the function.\n    mergedCallback.current = value;\n    for (const ref of refs) {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref) {\n        // work around the immutability of the React.Ref type\n        ref.current = value;\n      }\n    }\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- already exhaustive\n  [...refs]);\n  return mergedCallback;\n}","map":{"version":3,"names":["React","useMergedRefs","_len","arguments","length","refs","Array","_key","mergedCallback","useCallback","value","current","ref"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-utilities/lib/hooks/useMergedRefs.js"],"sourcesContent":["import * as React from 'react';\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs - Refs to collectively update with one ref value.\n * @returns A function with an attached \"current\" prop, so that it can be treated like a RefObject.\n */ export function useMergedRefs(...refs) {\n    const mergedCallback = React.useCallback((value)=>{\n        // Update the \"current\" prop hanging on the function.\n        mergedCallback.current = value;\n        for (const ref of refs){\n            if (typeof ref === 'function') {\n                ref(value);\n            } else if (ref) {\n                // work around the immutability of the React.Ref type\n                ref.current = value;\n            }\n        }\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps -- already exhaustive\n    [\n        ...refs\n    ]);\n    return mergedCallback;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,SAASC,aAAaA,CAAA,EAAU;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAANC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EACrC,MAAMC,cAAc,GAAGR,KAAK,CAACS,WAAW,CAAEC,KAAK,IAAG;IAC9C;IACAF,cAAc,CAACG,OAAO,GAAGD,KAAK;IAC9B,KAAK,MAAME,GAAG,IAAIP,IAAI,EAAC;MACnB,IAAI,OAAOO,GAAG,KAAK,UAAU,EAAE;QAC3BA,GAAG,CAACF,KAAK,CAAC;MACd,CAAC,MAAM,IAAIE,GAAG,EAAE;QACZ;QACAA,GAAG,CAACD,OAAO,GAAGD,KAAK;MACvB;IACJ;EACJ,CAAC;EAAE;EACH,CACI,GAAGL,IAAI,CACV,CAAC;EACF,OAAOG,cAAc;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}