{"ast":null,"code":"/**\r\n * A function that implements expansion for \"textDecoration\" to all sides of an element, it's simplified - check usage examples.\r\n *\r\n * @example\r\n *  textDecoration('none')\r\n *  textDecoration('dotted')\r\n *  textDecoration('underline', 'dotted')\r\n *  textDecoration('underline', 'dotted', 'red')\r\n *  textDecoration('underline', 'dotted', 'red', '2px')\r\n *\r\n * See https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration\r\n */\nfunction textDecoration(value) {\n  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n  if (values.length === 0) {\n    return isTextDecorationStyleInput(value) ? {\n      textDecorationStyle: value\n    } : {\n      textDecorationLine: value\n    };\n  }\n  const [textDecorationStyle, textDecorationColor, textDecorationThickness] = values;\n  return {\n    textDecorationLine: value,\n    ...(textDecorationStyle && {\n      textDecorationStyle\n    }),\n    ...(textDecorationColor && {\n      textDecorationColor\n    }),\n    ...(textDecorationThickness && {\n      textDecorationThickness\n    })\n  };\n}\nconst textDecorationStyleInputs = ['dashed', 'dotted', 'double', 'solid', 'wavy'];\nfunction isTextDecorationStyleInput(value) {\n  return textDecorationStyleInputs.includes(value);\n}\nexport { textDecoration };","map":{"version":3,"names":["textDecoration","value","_len","arguments","length","values","Array","_key","isTextDecorationStyleInput","textDecorationStyle","textDecorationLine","textDecorationColor","textDecorationThickness","textDecorationStyleInputs","includes"],"sources":["/Users/suketupatel/Desktop/application/frontend/packages/core/src/shorthands/textDecoration.ts"],"sourcesContent":["import type { GriffelStyle } from '@griffel/style-types';\nimport {\n  TextDecorationColorInput,\n  TextDecorationLineInput,\n  TextDecorationStyleInput,\n  TextDecorationThicknessInput,\n} from './types';\n\ntype TextDecorationStyle = Pick<\n  GriffelStyle,\n  'textDecorationStyle' | 'textDecorationLine' | 'textDecorationColor' | 'textDecorationThickness'\n>;\n\nexport function textDecoration(style: TextDecorationStyleInput): TextDecorationStyle;\nexport function textDecoration(line: TextDecorationLineInput): TextDecorationStyle;\n\nexport function textDecoration(line: TextDecorationLineInput, style: TextDecorationStyleInput): TextDecorationStyle;\nexport function textDecoration(\n  line: TextDecorationLineInput,\n  style: TextDecorationStyleInput,\n  color: TextDecorationColorInput,\n): TextDecorationStyle;\nexport function textDecoration(\n  line: TextDecorationLineInput,\n  style: TextDecorationStyleInput,\n  color: TextDecorationColorInput,\n  thickness: TextDecorationThicknessInput,\n): TextDecorationStyle;\n\n/**\n * A function that implements expansion for \"textDecoration\" to all sides of an element, it's simplified - check usage examples.\n *\n * @example\n *  textDecoration('none')\n *  textDecoration('dotted')\n *  textDecoration('underline', 'dotted')\n *  textDecoration('underline', 'dotted', 'red')\n *  textDecoration('underline', 'dotted', 'red', '2px')\n *\n * See https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration\n */\nexport function textDecoration(\n  value: TextDecorationLineInput | TextDecorationStyleInput,\n  ...values: [TextDecorationStyleInput?, TextDecorationColorInput?, TextDecorationThicknessInput?]\n): TextDecorationStyle {\n  if (values.length === 0) {\n    return isTextDecorationStyleInput(value) ? { textDecorationStyle: value } : { textDecorationLine: value };\n  }\n\n  const [textDecorationStyle, textDecorationColor, textDecorationThickness] = values;\n\n  return {\n    textDecorationLine: value,\n    ...(textDecorationStyle && { textDecorationStyle }),\n    ...(textDecorationColor && { textDecorationColor }),\n    ...(textDecorationThickness && { textDecorationThickness }),\n  };\n}\n\nconst textDecorationStyleInputs: TextDecorationStyleInput[] = ['dashed', 'dotted', 'double', 'solid', 'wavy'];\n\nfunction isTextDecorationStyleInput(\n  value: TextDecorationLineInput | TextDecorationStyleInput,\n): value is TextDecorationStyleInput {\n  return textDecorationStyleInputs.includes(value as TextDecorationStyleInput);\n}\n"],"mappings":"AA6BA;;;;;;;;;;;;SAYgBA,cAAcA,CAC5BC,KAAyD,EACuC;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAA7FC,MAA6F,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAA7FF,MAA6F,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;EAAA;EAEhG,IAAIF,MAAM,CAACD,MAAM,KAAK,CAAC,EAAE;IACvB,OAAOI,0BAA0B,CAACP,KAAK,CAAC,GAAG;MAAEQ,mBAAmB,EAAER;KAAO,GAAG;MAAES,kBAAkB,EAAET;KAAO;;EAG3G,MAAM,CAACQ,mBAAmB,EAAEE,mBAAmB,EAAEC,uBAAuB,CAAC,GAAGP,MAAM;EAElF,OAAO;IACLK,kBAAkB,EAAET,KAAK;IACzB,IAAIQ,mBAAmB,IAAI;MAAEA;KAAqB,CAAC;IACnD,IAAIE,mBAAmB,IAAI;MAAEA;KAAqB,CAAC;IACnD,IAAIC,uBAAuB,IAAI;MAAEA;KAAyB;GAC3D;AACH;AAEA,MAAMC,yBAAyB,GAA+B,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC;AAE7G,SAASL,0BAA0BA,CACjCP,KAAyD;EAEzD,OAAOY,yBAAyB,CAACC,QAAQ,CAACb,KAAiC,CAAC;AAC9E"},"metadata":{},"sourceType":"module","externalDependencies":[]}