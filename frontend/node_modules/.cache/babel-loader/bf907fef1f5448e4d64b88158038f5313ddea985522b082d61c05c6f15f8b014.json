{"ast":null,"code":"import { useEventCallback, useIsomorphicLayoutEffect } from '@fluentui/react-utilities';\nimport * as React from 'react';\nimport { columnDefinitionsToState, adjustColumnWidthsToFitContainer, getColumnById, setColumnProperty, getColumnWidth } from '../utils/columnResizeUtils';\nconst createReducer = () => (state, action) => {\n  switch (action.type) {\n    case 'CONTAINER_WIDTH_UPDATED':\n      return {\n        ...state,\n        containerWidth: action.containerWidth,\n        columnWidthState: adjustColumnWidthsToFitContainer(state.columnWidthState, action.containerWidth)\n      };\n    case 'COLUMNS_UPDATED':\n      const newS = columnDefinitionsToState(action.columns, state.columnWidthState, state.columnSizingOptions);\n      return {\n        ...state,\n        columns: action.columns,\n        columnWidthState: adjustColumnWidthsToFitContainer(newS, state.containerWidth)\n      };\n    case 'COLUMN_SIZING_OPTIONS_UPDATED':\n      const newState = columnDefinitionsToState(state.columns, state.columnWidthState, action.columnSizingOptions);\n      return {\n        ...state,\n        columnSizingOptions: action.columnSizingOptions,\n        columnWidthState: adjustColumnWidthsToFitContainer(newState, state.containerWidth)\n      };\n    case 'SET_COLUMN_WIDTH':\n      const {\n        columnId,\n        width\n      } = action;\n      const {\n        containerWidth\n      } = state;\n      const column = getColumnById(state.columnWidthState, columnId);\n      let newColumnWidthState = [...state.columnWidthState];\n      if (!column) {\n        return state;\n      }\n      // Adjust the column width and measure the new total width\n      newColumnWidthState = setColumnProperty(newColumnWidthState, columnId, 'width', width);\n      // Set this width as idealWidth, because its a deliberate change, not a recalculation because of container\n      newColumnWidthState = setColumnProperty(newColumnWidthState, columnId, 'idealWidth', width);\n      // Adjust the widths to the container size\n      newColumnWidthState = adjustColumnWidthsToFitContainer(newColumnWidthState, containerWidth);\n      return {\n        ...state,\n        columnWidthState: newColumnWidthState\n      };\n  }\n};\nexport function useTableColumnResizeState(columns, containerWidth) {\n  let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    onColumnResize,\n    columnSizingOptions\n  } = params;\n  const reducer = React.useMemo(() => createReducer(), []);\n  const [state, dispatch] = React.useReducer(reducer, {\n    columns,\n    containerWidth: 0,\n    columnWidthState: columnDefinitionsToState(columns, undefined, columnSizingOptions),\n    columnSizingOptions\n  });\n  useIsomorphicLayoutEffect(() => {\n    dispatch({\n      type: 'CONTAINER_WIDTH_UPDATED',\n      containerWidth\n    });\n  }, [containerWidth]);\n  useIsomorphicLayoutEffect(() => {\n    dispatch({\n      type: 'COLUMNS_UPDATED',\n      columns\n    });\n  }, [columns]);\n  useIsomorphicLayoutEffect(() => {\n    dispatch({\n      type: 'COLUMN_SIZING_OPTIONS_UPDATED',\n      columnSizingOptions\n    });\n  }, [columnSizingOptions]);\n  const setColumnWidth = useEventCallback((event, data) => {\n    let {\n      width\n    } = data;\n    const {\n      columnId\n    } = data;\n    const col = getColumnById(state.columnWidthState, columnId);\n    if (!col) {\n      return;\n    }\n    width = Math.max(col.minWidth || 0, width);\n    if (onColumnResize) {\n      onColumnResize(event, {\n        columnId,\n        width\n      });\n    }\n    dispatch({\n      type: 'SET_COLUMN_WIDTH',\n      columnId,\n      width\n    });\n  });\n  return {\n    getColumnById: colId => getColumnById(state.columnWidthState, colId),\n    getColumns: () => state.columnWidthState,\n    getColumnWidth: colId => getColumnWidth(state.columnWidthState, colId),\n    setColumnWidth\n  };\n}","map":{"version":3,"names":["useEventCallback","useIsomorphicLayoutEffect","React","columnDefinitionsToState","adjustColumnWidthsToFitContainer","getColumnById","setColumnProperty","getColumnWidth","createReducer","state","action","type","containerWidth","columnWidthState","newS","columns","columnSizingOptions","newState","columnId","width","column","newColumnWidthState","useTableColumnResizeState","params","arguments","length","undefined","onColumnResize","reducer","useMemo","dispatch","useReducer","setColumnWidth","event","data","col","Math","max","minWidth","colId","getColumns"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-table/lib/hooks/useTableColumnResizeState.js"],"sourcesContent":["import { useEventCallback, useIsomorphicLayoutEffect } from '@fluentui/react-utilities';\nimport * as React from 'react';\nimport { columnDefinitionsToState, adjustColumnWidthsToFitContainer, getColumnById, setColumnProperty, getColumnWidth } from '../utils/columnResizeUtils';\nconst createReducer = ()=>(state, action)=>{\n        switch(action.type){\n            case 'CONTAINER_WIDTH_UPDATED':\n                return {\n                    ...state,\n                    containerWidth: action.containerWidth,\n                    columnWidthState: adjustColumnWidthsToFitContainer(state.columnWidthState, action.containerWidth)\n                };\n            case 'COLUMNS_UPDATED':\n                const newS = columnDefinitionsToState(action.columns, state.columnWidthState, state.columnSizingOptions);\n                return {\n                    ...state,\n                    columns: action.columns,\n                    columnWidthState: adjustColumnWidthsToFitContainer(newS, state.containerWidth)\n                };\n            case 'COLUMN_SIZING_OPTIONS_UPDATED':\n                const newState = columnDefinitionsToState(state.columns, state.columnWidthState, action.columnSizingOptions);\n                return {\n                    ...state,\n                    columnSizingOptions: action.columnSizingOptions,\n                    columnWidthState: adjustColumnWidthsToFitContainer(newState, state.containerWidth)\n                };\n            case 'SET_COLUMN_WIDTH':\n                const { columnId , width  } = action;\n                const { containerWidth  } = state;\n                const column = getColumnById(state.columnWidthState, columnId);\n                let newColumnWidthState = [\n                    ...state.columnWidthState\n                ];\n                if (!column) {\n                    return state;\n                }\n                // Adjust the column width and measure the new total width\n                newColumnWidthState = setColumnProperty(newColumnWidthState, columnId, 'width', width);\n                // Set this width as idealWidth, because its a deliberate change, not a recalculation because of container\n                newColumnWidthState = setColumnProperty(newColumnWidthState, columnId, 'idealWidth', width);\n                // Adjust the widths to the container size\n                newColumnWidthState = adjustColumnWidthsToFitContainer(newColumnWidthState, containerWidth);\n                return {\n                    ...state,\n                    columnWidthState: newColumnWidthState\n                };\n        }\n    };\nexport function useTableColumnResizeState(columns, containerWidth, params = {}) {\n    const { onColumnResize , columnSizingOptions  } = params;\n    const reducer = React.useMemo(()=>createReducer(), []);\n    const [state, dispatch] = React.useReducer(reducer, {\n        columns,\n        containerWidth: 0,\n        columnWidthState: columnDefinitionsToState(columns, undefined, columnSizingOptions),\n        columnSizingOptions\n    });\n    useIsomorphicLayoutEffect(()=>{\n        dispatch({\n            type: 'CONTAINER_WIDTH_UPDATED',\n            containerWidth\n        });\n    }, [\n        containerWidth\n    ]);\n    useIsomorphicLayoutEffect(()=>{\n        dispatch({\n            type: 'COLUMNS_UPDATED',\n            columns\n        });\n    }, [\n        columns\n    ]);\n    useIsomorphicLayoutEffect(()=>{\n        dispatch({\n            type: 'COLUMN_SIZING_OPTIONS_UPDATED',\n            columnSizingOptions\n        });\n    }, [\n        columnSizingOptions\n    ]);\n    const setColumnWidth = useEventCallback((event, data)=>{\n        let { width  } = data;\n        const { columnId  } = data;\n        const col = getColumnById(state.columnWidthState, columnId);\n        if (!col) {\n            return;\n        }\n        width = Math.max(col.minWidth || 0, width);\n        if (onColumnResize) {\n            onColumnResize(event, {\n                columnId,\n                width\n            });\n        }\n        dispatch({\n            type: 'SET_COLUMN_WIDTH',\n            columnId,\n            width\n        });\n    });\n    return {\n        getColumnById: (colId)=>getColumnById(state.columnWidthState, colId),\n        getColumns: ()=>state.columnWidthState,\n        getColumnWidth: (colId)=>getColumnWidth(state.columnWidthState, colId),\n        setColumnWidth\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}