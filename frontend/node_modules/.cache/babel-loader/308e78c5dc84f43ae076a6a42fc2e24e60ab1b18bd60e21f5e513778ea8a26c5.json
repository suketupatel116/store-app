{"ast":null,"code":"/**\n * Regular expressions matching characters to ignore when calculating the initials.\n */ /**\n    * Regular expression matching characters within various types of enclosures, including the enclosures themselves\n    *  so for example, (xyz) [xyz] {xyz} all would be ignored\n    */const UNWANTED_ENCLOSURES_REGEX = /[\\(\\[\\{][^\\)\\]\\}]*[\\)\\]\\}]/g;\n/**\n * Regular expression matching special ASCII characters except space, plus some unicode special characters.\n * Applies after unwanted enclosures have been removed\n */\nconst UNWANTED_CHARS_REGEX = /[\\0-\\u001F\\!-/:-@\\[-`\\{-\\u00BF\\u0250-\\u036F\\uD800-\\uFFFF]/g;\n/**\n * Regular expression matching phone numbers. Applied after chars matching UNWANTED_CHARS_REGEX have been removed\n * and number has been trimmed for whitespaces\n */\nconst PHONENUMBER_REGEX = /^\\d+[\\d\\s]*(:?ext|x|)\\s*\\d+$/i;\n/** Regular expression matching one or more spaces. */\nconst MULTIPLE_WHITESPACES_REGEX = /\\s+/g;\n/**\n * Regular expression matching languages for which we currently don't support initials.\n * Arabic:   Arabic, Arabic Supplement, Arabic Extended-A.\n * Korean:   Hangul Jamo, Hangul Compatibility Jamo, Hangul Jamo Extended-A, Hangul Syllables, Hangul Jamo Extended-B.\n * Japanese: Hiragana, Katakana.\n * CJK:      CJK Unified Ideographs Extension A, CJK Unified Ideographs, CJK Compatibility Ideographs,\n *             CJK Unified Ideographs Extension B\n */\nconst UNSUPPORTED_TEXT_REGEX = /[\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\u1100-\\u11FF\\u3130-\\u318F\\uA960-\\uA97F\\uAC00-\\uD7AF\\uD7B0-\\uD7FF\\u3040-\\u309F\\u30A0-\\u30FF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD869][\\uDC00-\\uDED6]/;\nfunction getInitialsLatin(displayName, isRtl, firstInitialOnly) {\n  let initials = '';\n  const splits = displayName.split(' ');\n  if (splits.length !== 0) {\n    initials += splits[0].charAt(0).toUpperCase();\n  }\n  if (!firstInitialOnly) {\n    if (splits.length === 2) {\n      initials += splits[1].charAt(0).toUpperCase();\n    } else if (splits.length === 3) {\n      initials += splits[2].charAt(0).toUpperCase();\n    }\n  }\n  if (isRtl && initials.length > 1) {\n    return initials.charAt(1) + initials.charAt(0);\n  }\n  return initials;\n}\nfunction cleanupDisplayName(displayName) {\n  displayName = displayName.replace(UNWANTED_ENCLOSURES_REGEX, '');\n  displayName = displayName.replace(UNWANTED_CHARS_REGEX, '');\n  displayName = displayName.replace(MULTIPLE_WHITESPACES_REGEX, ' ');\n  displayName = displayName.trim();\n  return displayName;\n}\n/**\n * Get (up to 2 characters) initials based on display name of the persona.\n *\n * @param displayName - The full name of the person or entity\n * @param isRtl - Whether the display is in RTL\n * @param options - Extra options to control the behavior of getInitials\n *\n * @returns The 1 or 2 character initials based on the name. Or an empty string if no initials\n * could be derived from the name.\n *\n * @internal\n */\nexport function getInitials(displayName, isRtl, options) {\n  if (!displayName) {\n    return '';\n  }\n  displayName = cleanupDisplayName(displayName);\n  // For names containing CJK characters, and phone numbers, we don't display initials\n  if (UNSUPPORTED_TEXT_REGEX.test(displayName) || !(options === null || options === void 0 ? void 0 : options.allowPhoneInitials) && PHONENUMBER_REGEX.test(displayName)) {\n    return '';\n  }\n  return getInitialsLatin(displayName, isRtl, options === null || options === void 0 ? void 0 : options.firstInitialOnly);\n}","map":{"version":3,"names":["UNWANTED_ENCLOSURES_REGEX","UNWANTED_CHARS_REGEX","PHONENUMBER_REGEX","MULTIPLE_WHITESPACES_REGEX","UNSUPPORTED_TEXT_REGEX","getInitialsLatin","displayName","isRtl","firstInitialOnly","initials","splits","split","length","charAt","toUpperCase","cleanupDisplayName","replace","trim","getInitials","options","test","allowPhoneInitials"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-avatar/lib/utils/getInitials.js"],"sourcesContent":["/**\n * Regular expressions matching characters to ignore when calculating the initials.\n */ /**\n * Regular expression matching characters within various types of enclosures, including the enclosures themselves\n *  so for example, (xyz) [xyz] {xyz} all would be ignored\n */ const UNWANTED_ENCLOSURES_REGEX = /[\\(\\[\\{][^\\)\\]\\}]*[\\)\\]\\}]/g;\n/**\n * Regular expression matching special ASCII characters except space, plus some unicode special characters.\n * Applies after unwanted enclosures have been removed\n */ const UNWANTED_CHARS_REGEX = /[\\0-\\u001F\\!-/:-@\\[-`\\{-\\u00BF\\u0250-\\u036F\\uD800-\\uFFFF]/g;\n/**\n * Regular expression matching phone numbers. Applied after chars matching UNWANTED_CHARS_REGEX have been removed\n * and number has been trimmed for whitespaces\n */ const PHONENUMBER_REGEX = /^\\d+[\\d\\s]*(:?ext|x|)\\s*\\d+$/i;\n/** Regular expression matching one or more spaces. */ const MULTIPLE_WHITESPACES_REGEX = /\\s+/g;\n/**\n * Regular expression matching languages for which we currently don't support initials.\n * Arabic:   Arabic, Arabic Supplement, Arabic Extended-A.\n * Korean:   Hangul Jamo, Hangul Compatibility Jamo, Hangul Jamo Extended-A, Hangul Syllables, Hangul Jamo Extended-B.\n * Japanese: Hiragana, Katakana.\n * CJK:      CJK Unified Ideographs Extension A, CJK Unified Ideographs, CJK Compatibility Ideographs,\n *             CJK Unified Ideographs Extension B\n */ const UNSUPPORTED_TEXT_REGEX = /[\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\u1100-\\u11FF\\u3130-\\u318F\\uA960-\\uA97F\\uAC00-\\uD7AF\\uD7B0-\\uD7FF\\u3040-\\u309F\\u30A0-\\u30FF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD869][\\uDC00-\\uDED6]/;\nfunction getInitialsLatin(displayName, isRtl, firstInitialOnly) {\n    let initials = '';\n    const splits = displayName.split(' ');\n    if (splits.length !== 0) {\n        initials += splits[0].charAt(0).toUpperCase();\n    }\n    if (!firstInitialOnly) {\n        if (splits.length === 2) {\n            initials += splits[1].charAt(0).toUpperCase();\n        } else if (splits.length === 3) {\n            initials += splits[2].charAt(0).toUpperCase();\n        }\n    }\n    if (isRtl && initials.length > 1) {\n        return initials.charAt(1) + initials.charAt(0);\n    }\n    return initials;\n}\nfunction cleanupDisplayName(displayName) {\n    displayName = displayName.replace(UNWANTED_ENCLOSURES_REGEX, '');\n    displayName = displayName.replace(UNWANTED_CHARS_REGEX, '');\n    displayName = displayName.replace(MULTIPLE_WHITESPACES_REGEX, ' ');\n    displayName = displayName.trim();\n    return displayName;\n}\n/**\n * Get (up to 2 characters) initials based on display name of the persona.\n *\n * @param displayName - The full name of the person or entity\n * @param isRtl - Whether the display is in RTL\n * @param options - Extra options to control the behavior of getInitials\n *\n * @returns The 1 or 2 character initials based on the name. Or an empty string if no initials\n * could be derived from the name.\n *\n * @internal\n */ export function getInitials(displayName, isRtl, options) {\n    if (!displayName) {\n        return '';\n    }\n    displayName = cleanupDisplayName(displayName);\n    // For names containing CJK characters, and phone numbers, we don't display initials\n    if (UNSUPPORTED_TEXT_REGEX.test(displayName) || !(options === null || options === void 0 ? void 0 : options.allowPhoneInitials) && PHONENUMBER_REGEX.test(displayName)) {\n        return '';\n    }\n    return getInitialsLatin(displayName, isRtl, options === null || options === void 0 ? void 0 : options.firstInitialOnly);\n}\n"],"mappings":"AAAA;AACA;AACA,GAFA,CAEI;AACJ;AACA;AACA,MAAI,MAAMA,yBAAyB,GAAG,6BAA6B;AACnE;AACA;AACA;AACA;AAAI,MAAMC,oBAAoB,GAAG,4DAA4D;AAC7F;AACA;AACA;AACA;AAAI,MAAMC,iBAAiB,GAAG,+BAA+B;AAC7D;AAAuD,MAAMC,0BAA0B,GAAG,MAAM;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,MAAMC,sBAAsB,GAAG,4MAA4M;AAC/O,SAASC,gBAAgBA,CAACC,WAAW,EAAEC,KAAK,EAAEC,gBAAgB,EAAE;EAC5D,IAAIC,QAAQ,GAAG,EAAE;EACjB,MAAMC,MAAM,GAAGJ,WAAW,CAACK,KAAK,CAAC,GAAG,CAAC;EACrC,IAAID,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE;IACrBH,QAAQ,IAAIC,MAAM,CAAC,CAAC,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACjD;EACA,IAAI,CAACN,gBAAgB,EAAE;IACnB,IAAIE,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE;MACrBH,QAAQ,IAAIC,MAAM,CAAC,CAAC,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACjD,CAAC,MAAM,IAAIJ,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE;MAC5BH,QAAQ,IAAIC,MAAM,CAAC,CAAC,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACjD;EACJ;EACA,IAAIP,KAAK,IAAIE,QAAQ,CAACG,MAAM,GAAG,CAAC,EAAE;IAC9B,OAAOH,QAAQ,CAACI,MAAM,CAAC,CAAC,CAAC,GAAGJ,QAAQ,CAACI,MAAM,CAAC,CAAC,CAAC;EAClD;EACA,OAAOJ,QAAQ;AACnB;AACA,SAASM,kBAAkBA,CAACT,WAAW,EAAE;EACrCA,WAAW,GAAGA,WAAW,CAACU,OAAO,CAAChB,yBAAyB,EAAE,EAAE,CAAC;EAChEM,WAAW,GAAGA,WAAW,CAACU,OAAO,CAACf,oBAAoB,EAAE,EAAE,CAAC;EAC3DK,WAAW,GAAGA,WAAW,CAACU,OAAO,CAACb,0BAA0B,EAAE,GAAG,CAAC;EAClEG,WAAW,GAAGA,WAAW,CAACW,IAAI,CAAC,CAAC;EAChC,OAAOX,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,SAASY,WAAWA,CAACZ,WAAW,EAAEC,KAAK,EAAEY,OAAO,EAAE;EACzD,IAAI,CAACb,WAAW,EAAE;IACd,OAAO,EAAE;EACb;EACAA,WAAW,GAAGS,kBAAkB,CAACT,WAAW,CAAC;EAC7C;EACA,IAAIF,sBAAsB,CAACgB,IAAI,CAACd,WAAW,CAAC,IAAI,EAAEa,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACE,kBAAkB,CAAC,IAAInB,iBAAiB,CAACkB,IAAI,CAACd,WAAW,CAAC,EAAE;IACpK,OAAO,EAAE;EACb;EACA,OAAOD,gBAAgB,CAACC,WAAW,EAAEC,KAAK,EAAEY,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACX,gBAAgB,CAAC;AAC3H"},"metadata":{},"sourceType":"module","externalDependencies":[]}