{"ast":null,"code":"import * as React from 'react';\nimport { isFluentTrigger } from './isFluentTrigger';\n/**\n * @internal\n * Gets the trigger element of a FluentTriggerComponent (such as Tooltip or MenuTrigger).\n *\n * In the case where the immediate child is itself a FluentTriggerComponent and/or React Fragment,\n * it returns the first descendant that is _not_ a FluentTriggerComponent or Fragment.\n * This allows multiple triggers to be stacked, and still apply their props to the actual trigger element.\n *\n * For example, the following returns `<div id=\"child\" />`:\n * ```jsx\n * getTriggerChild(\n *   <Tooltip>\n *     <MenuTrigger>\n *       <div id=\"child\" />\n *     </MenuTrigger>\n *   </Tooltip>\n * );\n * ```\n *\n * In the case where the immediate child is not a valid element,\n * null is returned\n */\nexport function getTriggerChild(children) {\n  if (!React.isValidElement(children)) {\n    return null;\n  }\n  return isFluentTrigger(children) ? getTriggerChild(\n  // FIXME: This casting should be unnecessary as isFluentTrigger is a guard type method,\n  // but for some reason it's failing on build\n  children.props.children) : children;\n}","map":{"version":3,"names":["React","isFluentTrigger","getTriggerChild","children","isValidElement","props"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-utilities/lib/trigger/getTriggerChild.js"],"sourcesContent":["import * as React from 'react';\nimport { isFluentTrigger } from './isFluentTrigger';\n/**\n * @internal\n * Gets the trigger element of a FluentTriggerComponent (such as Tooltip or MenuTrigger).\n *\n * In the case where the immediate child is itself a FluentTriggerComponent and/or React Fragment,\n * it returns the first descendant that is _not_ a FluentTriggerComponent or Fragment.\n * This allows multiple triggers to be stacked, and still apply their props to the actual trigger element.\n *\n * For example, the following returns `<div id=\"child\" />`:\n * ```jsx\n * getTriggerChild(\n *   <Tooltip>\n *     <MenuTrigger>\n *       <div id=\"child\" />\n *     </MenuTrigger>\n *   </Tooltip>\n * );\n * ```\n *\n * In the case where the immediate child is not a valid element,\n * null is returned\n */ export function getTriggerChild(children) {\n    if (!React.isValidElement(children)) {\n        return null;\n    }\n    return isFluentTrigger(children) ? getTriggerChild(// FIXME: This casting should be unnecessary as isFluentTrigger is a guard type method,\n    // but for some reason it's failing on build\n    children.props.children) : children;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,eAAe,QAAQ,mBAAmB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,SAASC,eAAeA,CAACC,QAAQ,EAAE;EAC1C,IAAI,CAACH,KAAK,CAACI,cAAc,CAACD,QAAQ,CAAC,EAAE;IACjC,OAAO,IAAI;EACf;EACA,OAAOF,eAAe,CAACE,QAAQ,CAAC,GAAGD,eAAe;EAAC;EACnD;EACAC,QAAQ,CAACE,KAAK,CAACF,QAAQ,CAAC,GAAGA,QAAQ;AACvC"},"metadata":{},"sourceType":"module","externalDependencies":[]}