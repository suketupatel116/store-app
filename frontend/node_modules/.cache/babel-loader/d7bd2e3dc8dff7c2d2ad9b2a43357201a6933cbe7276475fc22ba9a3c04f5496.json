{"ast":null,"code":"import * as React from 'react';\nimport { useFieldControlProps_unstable } from '@fluentui/react-field';\nimport { ArrowLeft, ArrowRight } from '@fluentui/keyboard-keys';\nimport { ChevronDownRegular as ChevronDownIcon } from '@fluentui/react-icons';\nimport { getPartitionedNativeProps, resolveShorthand, mergeCallbacks, useEventCallback, useId, useMergedRefs } from '@fluentui/react-utilities';\nimport { getDropdownActionFromKey } from '../../utils/dropdownKeyActions';\nimport { useComboboxBaseState } from '../../utils/useComboboxBaseState';\nimport { useComboboxPopup } from '../../utils/useComboboxPopup';\nimport { useTriggerListboxSlots } from '../../utils/useTriggerListboxSlots';\nimport { Listbox } from '../Listbox/Listbox';\n/**\n * Create the state required to render Combobox.\n *\n * The returned state can be modified with hooks such as useComboboxStyles_unstable,\n * before being passed to renderCombobox_unstable.\n *\n * @param props - props from this instance of Combobox\n * @param ref - reference to root HTMLElement of Combobox\n */\nexport const useCombobox_unstable = (props, ref) => {\n  var _props_input;\n  // Merge props from surrounding <Field>, if any\n  props = useFieldControlProps_unstable(props, {\n    supportsLabelFor: true,\n    supportsRequired: true,\n    supportsSize: true\n  });\n  const baseState = useComboboxBaseState({\n    ...props,\n    editable: true\n  });\n  const {\n    activeOption,\n    clearSelection,\n    getIndexOfId,\n    getOptionsMatchingText,\n    hasFocus,\n    open,\n    selectOption,\n    selectedOptions,\n    setActiveOption,\n    setFocusVisible,\n    setOpen,\n    setValue,\n    value\n  } = baseState;\n  const {\n    disabled,\n    freeform,\n    inlinePopup,\n    multiselect\n  } = props;\n  const comboId = useId('combobox-');\n  const {\n    primary: triggerNativeProps,\n    root: rootNativeProps\n  } = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['children', 'size']\n  });\n  const rootRef = React.useRef(null);\n  const triggerRef = React.useRef(null);\n  // NVDA and JAWS have bugs that suppress reading the input value text when aria-activedescendant is set\n  // To prevent this, we clear the HTML attribute (but save the state) when a user presses left/right arrows\n  // ref: https://github.com/microsoft/fluentui/issues/26359#issuecomment-1397759888\n  const [hideActiveDescendant, setHideActiveDescendant] = React.useState(false);\n  // save the typing vs. navigating options state, as the space key should behave differently in each case\n  // we do not want to update the combobox when this changes, just save the value between renders\n  const isTyping = React.useRef(false);\n  // calculate listbox width style based on trigger width\n  const [popupDimensions, setPopupDimensions] = React.useState();\n  React.useEffect(() => {\n    // only recalculate width when opening\n    if (open) {\n      var _rootRef_current;\n      const width = `${(_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.clientWidth}px`;\n      if (width !== (popupDimensions === null || popupDimensions === void 0 ? void 0 : popupDimensions.width)) {\n        setPopupDimensions({\n          width\n        });\n      }\n    }\n  }, [open, popupDimensions]);\n  // set active option and selection based on typing\n  const getOptionFromInput = inputValue => {\n    const searchString = inputValue === null || inputValue === void 0 ? void 0 : inputValue.trim().toLowerCase();\n    if (!searchString || searchString.length === 0) {\n      return;\n    }\n    const matcher = optionText => optionText.toLowerCase().indexOf(searchString) === 0;\n    const matches = getOptionsMatchingText(matcher);\n    // return first matching option after the current active option, looping back to the top\n    if (matches.length > 1 && activeOption) {\n      const startIndex = getIndexOfId(activeOption.id);\n      const nextMatch = matches.find(option => getIndexOfId(option.id) >= startIndex);\n      return nextMatch !== null && nextMatch !== void 0 ? nextMatch : matches[0];\n    }\n    var _matches_;\n    return (_matches_ = matches[0]) !== null && _matches_ !== void 0 ? _matches_ : undefined;\n  };\n  /* Handle typed input */ // reset any typed value when an option is selected\n  baseState.selectOption = (ev, option) => {\n    setValue(undefined);\n    selectOption(ev, option);\n  };\n  const onTriggerBlur = ev => {\n    // handle selection and updating value if freeform is false\n    if (!baseState.open && !freeform) {\n      // select matching option, if the value fully matches\n      if (value && activeOption && value.trim().toLowerCase() === (activeOption === null || activeOption === void 0 ? void 0 : activeOption.text.toLowerCase())) {\n        baseState.selectOption(ev, activeOption);\n      }\n      // reset typed value when the input loses focus while collapsed, unless freeform is true\n      setValue(undefined);\n    }\n  };\n  baseState.setOpen = (ev, newState) => {\n    if (disabled) {\n      return;\n    }\n    if (!newState && !freeform) {\n      setValue(undefined);\n    }\n    setOpen(ev, newState);\n  };\n  // update value and active option based on input\n  const onTriggerChange = ev => {\n    const inputValue = ev.target.value;\n    // update uncontrolled value\n    baseState.setValue(inputValue);\n    // handle updating active option based on input\n    const matchingOption = getOptionFromInput(inputValue);\n    setActiveOption(matchingOption);\n    setFocusVisible(true);\n    // clear selection for single-select if the input value no longer matches the selection\n    if (!multiselect && selectedOptions.length === 1 && (inputValue.length < 1 || !matchingOption)) {\n      clearSelection(ev);\n    }\n  };\n  // resolve input and listbox slot props\n  let triggerSlot;\n  let listboxSlot;\n  triggerSlot = resolveShorthand(props.input, {\n    required: true,\n    defaultProps: {\n      ref: useMergedRefs((_props_input = props.input) === null || _props_input === void 0 ? void 0 : _props_input.ref, triggerRef),\n      type: 'text',\n      value: value !== null && value !== void 0 ? value : '',\n      ...triggerNativeProps\n    }\n  });\n  const resolvedPropsOnKeyDown = triggerSlot.onKeyDown;\n  triggerSlot.onChange = mergeCallbacks(triggerSlot.onChange, onTriggerChange);\n  triggerSlot.onBlur = mergeCallbacks(triggerSlot.onBlur, onTriggerBlur);\n  // only resolve listbox slot if needed\n  listboxSlot = open || hasFocus ? resolveShorthand(props.listbox, {\n    required: true,\n    defaultProps: {\n      children: props.children,\n      style: popupDimensions\n    }\n  }) : undefined;\n  [triggerSlot, listboxSlot] = useComboboxPopup(props, triggerSlot, listboxSlot);\n  [triggerSlot, listboxSlot] = useTriggerListboxSlots(props, baseState, ref, triggerSlot, listboxSlot);\n  if (hideActiveDescendant) {\n    triggerSlot['aria-activedescendant'] = undefined;\n  }\n  const state = {\n    components: {\n      root: 'div',\n      input: 'input',\n      expandIcon: 'span',\n      listbox: Listbox\n    },\n    root: resolveShorthand(props.root, {\n      required: true,\n      defaultProps: {\n        'aria-owns': !inlinePopup ? listboxSlot === null || listboxSlot === void 0 ? void 0 : listboxSlot.id : undefined,\n        ...rootNativeProps\n      }\n    }),\n    input: triggerSlot,\n    listbox: listboxSlot,\n    expandIcon: resolveShorthand(props.expandIcon, {\n      required: true,\n      defaultProps: {\n        'aria-expanded': open,\n        children: /*#__PURE__*/React.createElement(ChevronDownIcon, null),\n        role: 'button'\n      }\n    }),\n    ...baseState\n  };\n  state.root.ref = useMergedRefs(state.root.ref, rootRef);\n  /* Set input.onKeyDown here, so we can override the default behavior for spacebar */\n  const defaultOnTriggerKeyDown = state.input.onKeyDown;\n  state.input.onKeyDown = useEventCallback(ev => {\n    if (!open && getDropdownActionFromKey(ev) === 'Type') {\n      baseState.setOpen(ev, true);\n    }\n    // clear activedescendant when moving the text insertion cursor\n    if (ev.key === ArrowLeft || ev.key === ArrowRight) {\n      setHideActiveDescendant(true);\n    } else {\n      setHideActiveDescendant(false);\n    }\n    // update typing state to true if the user is typing\n    const action = getDropdownActionFromKey(ev, {\n      open,\n      multiselect\n    });\n    if (action === 'Type') {\n      isTyping.current = true;\n    } else if (action === 'Open' && ev.key !== ' ' || action === 'Next' || action === 'Previous' || action === 'First' || action === 'Last' || action === 'PageUp' || action === 'PageDown') {\n      isTyping.current = false;\n    }\n    // allow space to insert a character if freeform & the last action was typing, or if the popup is closed\n    if (freeform && (isTyping.current || !open) && ev.key === ' ') {\n      resolvedPropsOnKeyDown === null || resolvedPropsOnKeyDown === void 0 ? void 0 : resolvedPropsOnKeyDown(ev);\n      return;\n    }\n    // if we're not allowing space to type, continue with default behavior\n    defaultOnTriggerKeyDown === null || defaultOnTriggerKeyDown === void 0 ? void 0 : defaultOnTriggerKeyDown(ev);\n  });\n  /* handle open/close + focus change when clicking expandIcon */\n  const {\n    onMouseDown: onIconMouseDown,\n    onClick: onIconClick\n  } = state.expandIcon || {};\n  const onExpandIconMouseDown = useEventCallback(mergeCallbacks(onIconMouseDown, () => {\n    // do not dismiss on blur when closing via clicking the icon\n    if (open) {\n      baseState.ignoreNextBlur.current = true;\n    }\n  }));\n  const onExpandIconClick = useEventCallback(mergeCallbacks(onIconClick, event => {\n    var _triggerRef_current;\n    // open and set focus\n    state.setOpen(event, !state.open);\n    (_triggerRef_current = triggerRef.current) === null || _triggerRef_current === void 0 ? void 0 : _triggerRef_current.focus();\n    // set focus visible=false, since this can only be done with the mouse/pointer\n    setFocusVisible(false);\n  }));\n  if (state.expandIcon) {\n    state.expandIcon.onMouseDown = onExpandIconMouseDown;\n    state.expandIcon.onClick = onExpandIconClick;\n    // If there is no explicit aria-label, calculate default accName attribute for expandIcon button,\n    // using the following steps:\n    // 1. If there is an aria-label, it is \"Open [aria-label]\"\n    // 2. If there is an aria-labelledby, it is \"Open [aria-labelledby target]\" (using aria-labelledby + ids)\n    // 3. If there is no aria-label/ledby attr, it falls back to \"Open\"\n    // We can't fall back to a label/htmlFor name because of https://github.com/w3c/accname/issues/179\n    const hasExpandLabel = state.expandIcon['aria-label'] || state.expandIcon['aria-labelledby'];\n    const defaultOpenString = 'Open'; // this is english-only since it is the fallback\n    if (!hasExpandLabel) {\n      if (props['aria-labelledby']) {\n        var _state_expandIcon_id;\n        const chevronId = (_state_expandIcon_id = state.expandIcon.id) !== null && _state_expandIcon_id !== void 0 ? _state_expandIcon_id : `${comboId}-chevron`;\n        const chevronLabelledBy = `${chevronId} ${state.input['aria-labelledby']}`;\n        state.expandIcon['aria-label'] = defaultOpenString;\n        state.expandIcon.id = chevronId;\n        state.expandIcon['aria-labelledby'] = chevronLabelledBy;\n      } else if (props['aria-label']) {\n        state.expandIcon['aria-label'] = `${defaultOpenString} ${props['aria-label']}`;\n      } else {\n        state.expandIcon['aria-label'] = defaultOpenString;\n      }\n    }\n  }\n  return state;\n};","map":{"version":3,"names":["React","useFieldControlProps_unstable","ArrowLeft","ArrowRight","ChevronDownRegular","ChevronDownIcon","getPartitionedNativeProps","resolveShorthand","mergeCallbacks","useEventCallback","useId","useMergedRefs","getDropdownActionFromKey","useComboboxBaseState","useComboboxPopup","useTriggerListboxSlots","Listbox","useCombobox_unstable","props","ref","_props_input","supportsLabelFor","supportsRequired","supportsSize","baseState","editable","activeOption","clearSelection","getIndexOfId","getOptionsMatchingText","hasFocus","open","selectOption","selectedOptions","setActiveOption","setFocusVisible","setOpen","setValue","value","disabled","freeform","inlinePopup","multiselect","comboId","primary","triggerNativeProps","root","rootNativeProps","primarySlotTagName","excludedPropNames","rootRef","useRef","triggerRef","hideActiveDescendant","setHideActiveDescendant","useState","isTyping","popupDimensions","setPopupDimensions","useEffect","_rootRef_current","width","current","clientWidth","getOptionFromInput","inputValue","searchString","trim","toLowerCase","length","matcher","optionText","indexOf","matches","startIndex","id","nextMatch","find","option","_matches_","undefined","ev","onTriggerBlur","text","newState","onTriggerChange","target","matchingOption","triggerSlot","listboxSlot","input","required","defaultProps","type","resolvedPropsOnKeyDown","onKeyDown","onChange","onBlur","listbox","children","style","state","components","expandIcon","createElement","role","defaultOnTriggerKeyDown","key","action","onMouseDown","onIconMouseDown","onClick","onIconClick","onExpandIconMouseDown","ignoreNextBlur","onExpandIconClick","event","_triggerRef_current","focus","hasExpandLabel","defaultOpenString","_state_expandIcon_id","chevronId","chevronLabelledBy"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-combobox/lib/components/Combobox/useCombobox.js"],"sourcesContent":["import * as React from 'react';\nimport { useFieldControlProps_unstable } from '@fluentui/react-field';\nimport { ArrowLeft, ArrowRight } from '@fluentui/keyboard-keys';\nimport { ChevronDownRegular as ChevronDownIcon } from '@fluentui/react-icons';\nimport { getPartitionedNativeProps, resolveShorthand, mergeCallbacks, useEventCallback, useId, useMergedRefs } from '@fluentui/react-utilities';\nimport { getDropdownActionFromKey } from '../../utils/dropdownKeyActions';\nimport { useComboboxBaseState } from '../../utils/useComboboxBaseState';\nimport { useComboboxPopup } from '../../utils/useComboboxPopup';\nimport { useTriggerListboxSlots } from '../../utils/useTriggerListboxSlots';\nimport { Listbox } from '../Listbox/Listbox';\n/**\n * Create the state required to render Combobox.\n *\n * The returned state can be modified with hooks such as useComboboxStyles_unstable,\n * before being passed to renderCombobox_unstable.\n *\n * @param props - props from this instance of Combobox\n * @param ref - reference to root HTMLElement of Combobox\n */ export const useCombobox_unstable = (props, ref)=>{\n    var _props_input;\n    // Merge props from surrounding <Field>, if any\n    props = useFieldControlProps_unstable(props, {\n        supportsLabelFor: true,\n        supportsRequired: true,\n        supportsSize: true\n    });\n    const baseState = useComboboxBaseState({\n        ...props,\n        editable: true\n    });\n    const { activeOption , clearSelection , getIndexOfId , getOptionsMatchingText , hasFocus , open , selectOption , selectedOptions , setActiveOption , setFocusVisible , setOpen , setValue , value  } = baseState;\n    const { disabled , freeform , inlinePopup , multiselect  } = props;\n    const comboId = useId('combobox-');\n    const { primary: triggerNativeProps , root: rootNativeProps  } = getPartitionedNativeProps({\n        props,\n        primarySlotTagName: 'input',\n        excludedPropNames: [\n            'children',\n            'size'\n        ]\n    });\n    const rootRef = React.useRef(null);\n    const triggerRef = React.useRef(null);\n    // NVDA and JAWS have bugs that suppress reading the input value text when aria-activedescendant is set\n    // To prevent this, we clear the HTML attribute (but save the state) when a user presses left/right arrows\n    // ref: https://github.com/microsoft/fluentui/issues/26359#issuecomment-1397759888\n    const [hideActiveDescendant, setHideActiveDescendant] = React.useState(false);\n    // save the typing vs. navigating options state, as the space key should behave differently in each case\n    // we do not want to update the combobox when this changes, just save the value between renders\n    const isTyping = React.useRef(false);\n    // calculate listbox width style based on trigger width\n    const [popupDimensions, setPopupDimensions] = React.useState();\n    React.useEffect(()=>{\n        // only recalculate width when opening\n        if (open) {\n            var _rootRef_current;\n            const width = `${(_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.clientWidth}px`;\n            if (width !== (popupDimensions === null || popupDimensions === void 0 ? void 0 : popupDimensions.width)) {\n                setPopupDimensions({\n                    width\n                });\n            }\n        }\n    }, [\n        open,\n        popupDimensions\n    ]);\n    // set active option and selection based on typing\n    const getOptionFromInput = (inputValue)=>{\n        const searchString = inputValue === null || inputValue === void 0 ? void 0 : inputValue.trim().toLowerCase();\n        if (!searchString || searchString.length === 0) {\n            return;\n        }\n        const matcher = (optionText)=>optionText.toLowerCase().indexOf(searchString) === 0;\n        const matches = getOptionsMatchingText(matcher);\n        // return first matching option after the current active option, looping back to the top\n        if (matches.length > 1 && activeOption) {\n            const startIndex = getIndexOfId(activeOption.id);\n            const nextMatch = matches.find((option)=>getIndexOfId(option.id) >= startIndex);\n            return nextMatch !== null && nextMatch !== void 0 ? nextMatch : matches[0];\n        }\n        var _matches_;\n        return (_matches_ = matches[0]) !== null && _matches_ !== void 0 ? _matches_ : undefined;\n    };\n    /* Handle typed input */ // reset any typed value when an option is selected\n    baseState.selectOption = (ev, option)=>{\n        setValue(undefined);\n        selectOption(ev, option);\n    };\n    const onTriggerBlur = (ev)=>{\n        // handle selection and updating value if freeform is false\n        if (!baseState.open && !freeform) {\n            // select matching option, if the value fully matches\n            if (value && activeOption && value.trim().toLowerCase() === (activeOption === null || activeOption === void 0 ? void 0 : activeOption.text.toLowerCase())) {\n                baseState.selectOption(ev, activeOption);\n            }\n            // reset typed value when the input loses focus while collapsed, unless freeform is true\n            setValue(undefined);\n        }\n    };\n    baseState.setOpen = (ev, newState)=>{\n        if (disabled) {\n            return;\n        }\n        if (!newState && !freeform) {\n            setValue(undefined);\n        }\n        setOpen(ev, newState);\n    };\n    // update value and active option based on input\n    const onTriggerChange = (ev)=>{\n        const inputValue = ev.target.value;\n        // update uncontrolled value\n        baseState.setValue(inputValue);\n        // handle updating active option based on input\n        const matchingOption = getOptionFromInput(inputValue);\n        setActiveOption(matchingOption);\n        setFocusVisible(true);\n        // clear selection for single-select if the input value no longer matches the selection\n        if (!multiselect && selectedOptions.length === 1 && (inputValue.length < 1 || !matchingOption)) {\n            clearSelection(ev);\n        }\n    };\n    // resolve input and listbox slot props\n    let triggerSlot;\n    let listboxSlot;\n    triggerSlot = resolveShorthand(props.input, {\n        required: true,\n        defaultProps: {\n            ref: useMergedRefs((_props_input = props.input) === null || _props_input === void 0 ? void 0 : _props_input.ref, triggerRef),\n            type: 'text',\n            value: value !== null && value !== void 0 ? value : '',\n            ...triggerNativeProps\n        }\n    });\n    const resolvedPropsOnKeyDown = triggerSlot.onKeyDown;\n    triggerSlot.onChange = mergeCallbacks(triggerSlot.onChange, onTriggerChange);\n    triggerSlot.onBlur = mergeCallbacks(triggerSlot.onBlur, onTriggerBlur);\n    // only resolve listbox slot if needed\n    listboxSlot = open || hasFocus ? resolveShorthand(props.listbox, {\n        required: true,\n        defaultProps: {\n            children: props.children,\n            style: popupDimensions\n        }\n    }) : undefined;\n    [triggerSlot, listboxSlot] = useComboboxPopup(props, triggerSlot, listboxSlot);\n    [triggerSlot, listboxSlot] = useTriggerListboxSlots(props, baseState, ref, triggerSlot, listboxSlot);\n    if (hideActiveDescendant) {\n        triggerSlot['aria-activedescendant'] = undefined;\n    }\n    const state = {\n        components: {\n            root: 'div',\n            input: 'input',\n            expandIcon: 'span',\n            listbox: Listbox\n        },\n        root: resolveShorthand(props.root, {\n            required: true,\n            defaultProps: {\n                'aria-owns': !inlinePopup ? listboxSlot === null || listboxSlot === void 0 ? void 0 : listboxSlot.id : undefined,\n                ...rootNativeProps\n            }\n        }),\n        input: triggerSlot,\n        listbox: listboxSlot,\n        expandIcon: resolveShorthand(props.expandIcon, {\n            required: true,\n            defaultProps: {\n                'aria-expanded': open,\n                children: /*#__PURE__*/ React.createElement(ChevronDownIcon, null),\n                role: 'button'\n            }\n        }),\n        ...baseState\n    };\n    state.root.ref = useMergedRefs(state.root.ref, rootRef);\n    /* Set input.onKeyDown here, so we can override the default behavior for spacebar */ const defaultOnTriggerKeyDown = state.input.onKeyDown;\n    state.input.onKeyDown = useEventCallback((ev)=>{\n        if (!open && getDropdownActionFromKey(ev) === 'Type') {\n            baseState.setOpen(ev, true);\n        }\n        // clear activedescendant when moving the text insertion cursor\n        if (ev.key === ArrowLeft || ev.key === ArrowRight) {\n            setHideActiveDescendant(true);\n        } else {\n            setHideActiveDescendant(false);\n        }\n        // update typing state to true if the user is typing\n        const action = getDropdownActionFromKey(ev, {\n            open,\n            multiselect\n        });\n        if (action === 'Type') {\n            isTyping.current = true;\n        } else if (action === 'Open' && ev.key !== ' ' || action === 'Next' || action === 'Previous' || action === 'First' || action === 'Last' || action === 'PageUp' || action === 'PageDown') {\n            isTyping.current = false;\n        }\n        // allow space to insert a character if freeform & the last action was typing, or if the popup is closed\n        if (freeform && (isTyping.current || !open) && ev.key === ' ') {\n            resolvedPropsOnKeyDown === null || resolvedPropsOnKeyDown === void 0 ? void 0 : resolvedPropsOnKeyDown(ev);\n            return;\n        }\n        // if we're not allowing space to type, continue with default behavior\n        defaultOnTriggerKeyDown === null || defaultOnTriggerKeyDown === void 0 ? void 0 : defaultOnTriggerKeyDown(ev);\n    });\n    /* handle open/close + focus change when clicking expandIcon */ const { onMouseDown: onIconMouseDown , onClick: onIconClick  } = state.expandIcon || {};\n    const onExpandIconMouseDown = useEventCallback(mergeCallbacks(onIconMouseDown, ()=>{\n        // do not dismiss on blur when closing via clicking the icon\n        if (open) {\n            baseState.ignoreNextBlur.current = true;\n        }\n    }));\n    const onExpandIconClick = useEventCallback(mergeCallbacks(onIconClick, (event)=>{\n        var _triggerRef_current;\n        // open and set focus\n        state.setOpen(event, !state.open);\n        (_triggerRef_current = triggerRef.current) === null || _triggerRef_current === void 0 ? void 0 : _triggerRef_current.focus();\n        // set focus visible=false, since this can only be done with the mouse/pointer\n        setFocusVisible(false);\n    }));\n    if (state.expandIcon) {\n        state.expandIcon.onMouseDown = onExpandIconMouseDown;\n        state.expandIcon.onClick = onExpandIconClick;\n        // If there is no explicit aria-label, calculate default accName attribute for expandIcon button,\n        // using the following steps:\n        // 1. If there is an aria-label, it is \"Open [aria-label]\"\n        // 2. If there is an aria-labelledby, it is \"Open [aria-labelledby target]\" (using aria-labelledby + ids)\n        // 3. If there is no aria-label/ledby attr, it falls back to \"Open\"\n        // We can't fall back to a label/htmlFor name because of https://github.com/w3c/accname/issues/179\n        const hasExpandLabel = state.expandIcon['aria-label'] || state.expandIcon['aria-labelledby'];\n        const defaultOpenString = 'Open'; // this is english-only since it is the fallback\n        if (!hasExpandLabel) {\n            if (props['aria-labelledby']) {\n                var _state_expandIcon_id;\n                const chevronId = (_state_expandIcon_id = state.expandIcon.id) !== null && _state_expandIcon_id !== void 0 ? _state_expandIcon_id : `${comboId}-chevron`;\n                const chevronLabelledBy = `${chevronId} ${state.input['aria-labelledby']}`;\n                state.expandIcon['aria-label'] = defaultOpenString;\n                state.expandIcon.id = chevronId;\n                state.expandIcon['aria-labelledby'] = chevronLabelledBy;\n            } else if (props['aria-label']) {\n                state.expandIcon['aria-label'] = `${defaultOpenString} ${props['aria-label']}`;\n            } else {\n                state.expandIcon['aria-label'] = defaultOpenString;\n            }\n        }\n    }\n    return state;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}