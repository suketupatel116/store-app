{"ast":null,"code":"import * as React from 'react';\n/**\n * Similar to `getSlots`, main difference is that it's compatible with new custom jsx pragma\n *\n * @internal\n * This is an internal temporary method, this method will cease to exist eventually!\n *\n * * ❗️❗️ **DO NOT USE IT EXTERNALLY** ❗️❗️\n */\nexport function getSlotsNext(state) {\n  const slots = {};\n  const slotProps = {};\n  const slotNames = Object.keys(state.components);\n  for (const slotName of slotNames) {\n    const [slot, props] = getSlotNext(state, slotName);\n    slots[slotName] = slot;\n    slotProps[slotName] = props;\n  }\n  return {\n    slots,\n    slotProps: slotProps\n  };\n}\nfunction getSlotNext(state, slotName) {\n  var _state_components, _state_components1;\n  const props = state[slotName];\n  if (props === undefined) {\n    return [null, undefined];\n  }\n  // TS Error: Property 'as' does not exist on type 'UnknownSlotProps | undefined'.ts(2339)\n  const {\n    as: asProp,\n    ...propsWithoutAs\n  } = props;\n  const slot = ((_state_components = state.components) === null || _state_components === void 0 ? void 0 : _state_components[slotName]) === undefined || typeof state.components[slotName] === 'string' ? asProp || ((_state_components1 = state.components) === null || _state_components1 === void 0 ? void 0 : _state_components1[slotName]) || 'div' : state.components[slotName];\n  const shouldOmitAsProp = typeof slot === 'string' && asProp;\n  const slotProps = shouldOmitAsProp ? propsWithoutAs : props;\n  return [slot, slotProps];\n}","map":{"version":3,"names":["React","getSlotsNext","state","slots","slotProps","slotNames","Object","keys","components","slotName","slot","props","getSlotNext","_state_components","_state_components1","undefined","as","asProp","propsWithoutAs","shouldOmitAsProp"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-utilities/lib/compose/getSlotsNext.js"],"sourcesContent":["import * as React from 'react';\n/**\n * Similar to `getSlots`, main difference is that it's compatible with new custom jsx pragma\n *\n * @internal\n * This is an internal temporary method, this method will cease to exist eventually!\n *\n * * ❗️❗️ **DO NOT USE IT EXTERNALLY** ❗️❗️\n */ export function getSlotsNext(state) {\n    const slots = {};\n    const slotProps = {};\n    const slotNames = Object.keys(state.components);\n    for (const slotName of slotNames){\n        const [slot, props] = getSlotNext(state, slotName);\n        slots[slotName] = slot;\n        slotProps[slotName] = props;\n    }\n    return {\n        slots,\n        slotProps: slotProps\n    };\n}\nfunction getSlotNext(state, slotName) {\n    var _state_components, _state_components1;\n    const props = state[slotName];\n    if (props === undefined) {\n        return [\n            null,\n            undefined\n        ];\n    }\n    // TS Error: Property 'as' does not exist on type 'UnknownSlotProps | undefined'.ts(2339)\n    const { as: asProp , ...propsWithoutAs } = props;\n    const slot = ((_state_components = state.components) === null || _state_components === void 0 ? void 0 : _state_components[slotName]) === undefined || typeof state.components[slotName] === 'string' ? asProp || ((_state_components1 = state.components) === null || _state_components1 === void 0 ? void 0 : _state_components1[slotName]) || 'div' : state.components[slotName];\n    const shouldOmitAsProp = typeof slot === 'string' && asProp;\n    const slotProps = shouldOmitAsProp ? propsWithoutAs : props;\n    return [\n        slot,\n        slotProps\n    ];\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,SAASC,YAAYA,CAACC,KAAK,EAAE;EACpC,MAAMC,KAAK,GAAG,CAAC,CAAC;EAChB,MAAMC,SAAS,GAAG,CAAC,CAAC;EACpB,MAAMC,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACL,KAAK,CAACM,UAAU,CAAC;EAC/C,KAAK,MAAMC,QAAQ,IAAIJ,SAAS,EAAC;IAC7B,MAAM,CAACK,IAAI,EAAEC,KAAK,CAAC,GAAGC,WAAW,CAACV,KAAK,EAAEO,QAAQ,CAAC;IAClDN,KAAK,CAACM,QAAQ,CAAC,GAAGC,IAAI;IACtBN,SAAS,CAACK,QAAQ,CAAC,GAAGE,KAAK;EAC/B;EACA,OAAO;IACHR,KAAK;IACLC,SAAS,EAAEA;EACf,CAAC;AACL;AACA,SAASQ,WAAWA,CAACV,KAAK,EAAEO,QAAQ,EAAE;EAClC,IAAII,iBAAiB,EAAEC,kBAAkB;EACzC,MAAMH,KAAK,GAAGT,KAAK,CAACO,QAAQ,CAAC;EAC7B,IAAIE,KAAK,KAAKI,SAAS,EAAE;IACrB,OAAO,CACH,IAAI,EACJA,SAAS,CACZ;EACL;EACA;EACA,MAAM;IAAEC,EAAE,EAAEC,MAAM;IAAG,GAAGC;EAAe,CAAC,GAAGP,KAAK;EAChD,MAAMD,IAAI,GAAG,CAAC,CAACG,iBAAiB,GAAGX,KAAK,CAACM,UAAU,MAAM,IAAI,IAAIK,iBAAiB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACJ,QAAQ,CAAC,MAAMM,SAAS,IAAI,OAAOb,KAAK,CAACM,UAAU,CAACC,QAAQ,CAAC,KAAK,QAAQ,GAAGQ,MAAM,KAAK,CAACH,kBAAkB,GAAGZ,KAAK,CAACM,UAAU,MAAM,IAAI,IAAIM,kBAAkB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,kBAAkB,CAACL,QAAQ,CAAC,CAAC,IAAI,KAAK,GAAGP,KAAK,CAACM,UAAU,CAACC,QAAQ,CAAC;EACnX,MAAMU,gBAAgB,GAAG,OAAOT,IAAI,KAAK,QAAQ,IAAIO,MAAM;EAC3D,MAAMb,SAAS,GAAGe,gBAAgB,GAAGD,cAAc,GAAGP,KAAK;EAC3D,OAAO,CACHD,IAAI,EACJN,SAAS,CACZ;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}