{"ast":null,"code":"import * as React from 'react';\nimport { CheckmarkCircleFilled, DismissCircleFilled, InfoFilled, WarningFilled } from '@fluentui/react-icons';\nimport { getNativeElementProps, resolveShorthand } from '@fluentui/react-utilities';\nimport { useBackgroundAppearance } from '@fluentui/react-shared-contexts';\nimport { useToastContainerContext } from '../../contexts/toastContainerContext';\n/**\n * Create the state required to render ToastTitle.\n *\n * The returned state can be modified with hooks such as useToastTitleStyles_unstable,\n * before being passed to renderToastTitle_unstable.\n *\n * @param props - props from this instance of ToastTitle\n * @param ref - reference to root HTMLElement of ToastTitle\n */\nexport const useToastTitle_unstable = (props, ref) => {\n  const {\n    intent,\n    titleId\n  } = useToastContainerContext();\n  const backgroundAppearance = useBackgroundAppearance();\n  /** Determine the role and media to render based on the intent */\n  let defaultIcon;\n  switch (intent) {\n    case 'success':\n      defaultIcon = /*#__PURE__*/React.createElement(CheckmarkCircleFilled, null);\n      break;\n    case 'error':\n      defaultIcon = /*#__PURE__*/React.createElement(DismissCircleFilled, null);\n      break;\n    case 'warning':\n      defaultIcon = /*#__PURE__*/React.createElement(WarningFilled, null);\n      break;\n    case 'info':\n      defaultIcon = /*#__PURE__*/React.createElement(InfoFilled, null);\n      break;\n  }\n  return {\n    action: resolveShorthand(props.action),\n    components: {\n      root: 'div',\n      media: 'div',\n      action: 'div'\n    },\n    media: resolveShorthand(props.media, {\n      required: !!intent,\n      defaultProps: {\n        children: defaultIcon\n      }\n    }),\n    root: getNativeElementProps('div', {\n      ref,\n      children: props.children,\n      id: titleId,\n      ...props\n    }),\n    intent,\n    backgroundAppearance\n  };\n};","map":{"version":3,"names":["React","CheckmarkCircleFilled","DismissCircleFilled","InfoFilled","WarningFilled","getNativeElementProps","resolveShorthand","useBackgroundAppearance","useToastContainerContext","useToastTitle_unstable","props","ref","intent","titleId","backgroundAppearance","defaultIcon","createElement","action","components","root","media","required","defaultProps","children","id"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-toast/lib/components/ToastTitle/useToastTitle.js"],"sourcesContent":["import * as React from 'react';\nimport { CheckmarkCircleFilled, DismissCircleFilled, InfoFilled, WarningFilled } from '@fluentui/react-icons';\nimport { getNativeElementProps, resolveShorthand } from '@fluentui/react-utilities';\nimport { useBackgroundAppearance } from '@fluentui/react-shared-contexts';\nimport { useToastContainerContext } from '../../contexts/toastContainerContext';\n/**\n * Create the state required to render ToastTitle.\n *\n * The returned state can be modified with hooks such as useToastTitleStyles_unstable,\n * before being passed to renderToastTitle_unstable.\n *\n * @param props - props from this instance of ToastTitle\n * @param ref - reference to root HTMLElement of ToastTitle\n */ export const useToastTitle_unstable = (props, ref)=>{\n    const { intent , titleId  } = useToastContainerContext();\n    const backgroundAppearance = useBackgroundAppearance();\n    /** Determine the role and media to render based on the intent */ let defaultIcon;\n    switch(intent){\n        case 'success':\n            defaultIcon = /*#__PURE__*/ React.createElement(CheckmarkCircleFilled, null);\n            break;\n        case 'error':\n            defaultIcon = /*#__PURE__*/ React.createElement(DismissCircleFilled, null);\n            break;\n        case 'warning':\n            defaultIcon = /*#__PURE__*/ React.createElement(WarningFilled, null);\n            break;\n        case 'info':\n            defaultIcon = /*#__PURE__*/ React.createElement(InfoFilled, null);\n            break;\n    }\n    return {\n        action: resolveShorthand(props.action),\n        components: {\n            root: 'div',\n            media: 'div',\n            action: 'div'\n        },\n        media: resolveShorthand(props.media, {\n            required: !!intent,\n            defaultProps: {\n                children: defaultIcon\n            }\n        }),\n        root: getNativeElementProps('div', {\n            ref,\n            children: props.children,\n            id: titleId,\n            ...props\n        }),\n        intent,\n        backgroundAppearance\n    };\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,qBAAqB,EAAEC,mBAAmB,EAAEC,UAAU,EAAEC,aAAa,QAAQ,uBAAuB;AAC7G,SAASC,qBAAqB,EAAEC,gBAAgB,QAAQ,2BAA2B;AACnF,SAASC,uBAAuB,QAAQ,iCAAiC;AACzE,SAASC,wBAAwB,QAAQ,sCAAsC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,MAAMC,sBAAsB,GAAGA,CAACC,KAAK,EAAEC,GAAG,KAAG;EACpD,MAAM;IAAEC,MAAM;IAAGC;EAAS,CAAC,GAAGL,wBAAwB,CAAC,CAAC;EACxD,MAAMM,oBAAoB,GAAGP,uBAAuB,CAAC,CAAC;EACtD;EAAkE,IAAIQ,WAAW;EACjF,QAAOH,MAAM;IACT,KAAK,SAAS;MACVG,WAAW,GAAG,aAAcf,KAAK,CAACgB,aAAa,CAACf,qBAAqB,EAAE,IAAI,CAAC;MAC5E;IACJ,KAAK,OAAO;MACRc,WAAW,GAAG,aAAcf,KAAK,CAACgB,aAAa,CAACd,mBAAmB,EAAE,IAAI,CAAC;MAC1E;IACJ,KAAK,SAAS;MACVa,WAAW,GAAG,aAAcf,KAAK,CAACgB,aAAa,CAACZ,aAAa,EAAE,IAAI,CAAC;MACpE;IACJ,KAAK,MAAM;MACPW,WAAW,GAAG,aAAcf,KAAK,CAACgB,aAAa,CAACb,UAAU,EAAE,IAAI,CAAC;MACjE;EACR;EACA,OAAO;IACHc,MAAM,EAAEX,gBAAgB,CAACI,KAAK,CAACO,MAAM,CAAC;IACtCC,UAAU,EAAE;MACRC,IAAI,EAAE,KAAK;MACXC,KAAK,EAAE,KAAK;MACZH,MAAM,EAAE;IACZ,CAAC;IACDG,KAAK,EAAEd,gBAAgB,CAACI,KAAK,CAACU,KAAK,EAAE;MACjCC,QAAQ,EAAE,CAAC,CAACT,MAAM;MAClBU,YAAY,EAAE;QACVC,QAAQ,EAAER;MACd;IACJ,CAAC,CAAC;IACFI,IAAI,EAAEd,qBAAqB,CAAC,KAAK,EAAE;MAC/BM,GAAG;MACHY,QAAQ,EAAEb,KAAK,CAACa,QAAQ;MACxBC,EAAE,EAAEX,OAAO;MACX,GAAGH;IACP,CAAC,CAAC;IACFE,MAAM;IACNE;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}