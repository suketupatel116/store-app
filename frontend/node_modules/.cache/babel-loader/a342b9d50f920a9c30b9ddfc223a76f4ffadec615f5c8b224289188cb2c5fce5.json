{"ast":null,"code":"import * as React from 'react';\nimport { isInteractiveHTMLElement, useEventCallback, resolveShorthand } from '@fluentui/react-utilities';\nimport { Space } from '@fluentui/keyboard-keys';\nimport { useTableRow_unstable } from '../TableRow/useTableRow';\nimport { useDataGridContext_unstable } from '../../contexts/dataGridContext';\nimport { DataGridSelectionCell } from '../DataGridSelectionCell/DataGridSelectionCell';\nimport { useTableRowIdContext } from '../../contexts/rowIdContext';\nimport { useIsInTableHeader } from '../../contexts/tableHeaderContext';\n/**\n * Create the state required to render DataGridRow.\n *\n * The returned state can be modified with hooks such as useDataGridRowStyles_unstable,\n * before being passed to renderDataGridRow_unstable.\n *\n * @param props - props from this instance of DataGridRow\n * @param ref - reference to root HTMLElement of DataGridRow\n */\nexport const useDataGridRow_unstable = (props, ref) => {\n  const rowId = useTableRowIdContext();\n  const isHeader = useIsInTableHeader();\n  const columnDefs = useDataGridContext_unstable(ctx => ctx.columns);\n  const selectable = useDataGridContext_unstable(ctx => ctx.selectableRows);\n  const selected = useDataGridContext_unstable(ctx => ctx.selection.isRowSelected(rowId));\n  const focusMode = useDataGridContext_unstable(ctx => ctx.focusMode);\n  const compositeRowTabsterAttribute = useDataGridContext_unstable(ctx => ctx.compositeRowTabsterAttribute);\n  const tabbable = focusMode === 'row_unstable' || focusMode === 'composite';\n  const appearance = useDataGridContext_unstable(ctx => {\n    if (!isHeader && selectable && ctx.selection.isRowSelected(rowId)) {\n      return ctx.selectionAppearance;\n    }\n    return 'none';\n  });\n  const toggleRow = useDataGridContext_unstable(ctx => ctx.selection.toggleRow);\n  const dataGridContextValue = useDataGridContext_unstable(ctx => ctx);\n  const onClick = useEventCallback(e => {\n    var _props_onClick;\n    if (selectable && !isHeader) {\n      toggleRow(e, rowId);\n    }\n    (_props_onClick = props.onClick) === null || _props_onClick === void 0 ? void 0 : _props_onClick.call(props, e);\n  });\n  const onKeyDown = useEventCallback(e => {\n    var _props_onKeyDown;\n    if (selectable && !isHeader && e.key === Space && !isInteractiveHTMLElement(e.target)) {\n      // stop scrolling\n      e.preventDefault();\n      toggleRow(e, rowId);\n    }\n    (_props_onKeyDown = props.onKeyDown) === null || _props_onKeyDown === void 0 ? void 0 : _props_onKeyDown.call(props, e);\n  });\n  const baseState = useTableRow_unstable({\n    appearance,\n    'aria-selected': selectable ? selected : undefined,\n    tabIndex: tabbable && !isHeader ? 0 : undefined,\n    ...(focusMode === 'composite' && !isHeader && compositeRowTabsterAttribute),\n    ...props,\n    onClick,\n    onKeyDown,\n    children: null,\n    as: 'div'\n  }, ref);\n  return {\n    ...baseState,\n    components: {\n      ...baseState.components,\n      selectionCell: DataGridSelectionCell\n    },\n    selectionCell: resolveShorthand(props.selectionCell, {\n      required: selectable\n    }),\n    renderCell: props.children,\n    columnDefs,\n    dataGridContextValue\n  };\n};","map":{"version":3,"names":["React","isInteractiveHTMLElement","useEventCallback","resolveShorthand","Space","useTableRow_unstable","useDataGridContext_unstable","DataGridSelectionCell","useTableRowIdContext","useIsInTableHeader","useDataGridRow_unstable","props","ref","rowId","isHeader","columnDefs","ctx","columns","selectable","selectableRows","selected","selection","isRowSelected","focusMode","compositeRowTabsterAttribute","tabbable","appearance","selectionAppearance","toggleRow","dataGridContextValue","onClick","e","_props_onClick","call","onKeyDown","_props_onKeyDown","key","target","preventDefault","baseState","undefined","tabIndex","children","as","components","selectionCell","required","renderCell"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-table/lib/components/DataGridRow/useDataGridRow.js"],"sourcesContent":["import * as React from 'react';\nimport { isInteractiveHTMLElement, useEventCallback, resolveShorthand } from '@fluentui/react-utilities';\nimport { Space } from '@fluentui/keyboard-keys';\nimport { useTableRow_unstable } from '../TableRow/useTableRow';\nimport { useDataGridContext_unstable } from '../../contexts/dataGridContext';\nimport { DataGridSelectionCell } from '../DataGridSelectionCell/DataGridSelectionCell';\nimport { useTableRowIdContext } from '../../contexts/rowIdContext';\nimport { useIsInTableHeader } from '../../contexts/tableHeaderContext';\n/**\n * Create the state required to render DataGridRow.\n *\n * The returned state can be modified with hooks such as useDataGridRowStyles_unstable,\n * before being passed to renderDataGridRow_unstable.\n *\n * @param props - props from this instance of DataGridRow\n * @param ref - reference to root HTMLElement of DataGridRow\n */ export const useDataGridRow_unstable = (props, ref)=>{\n    const rowId = useTableRowIdContext();\n    const isHeader = useIsInTableHeader();\n    const columnDefs = useDataGridContext_unstable((ctx)=>ctx.columns);\n    const selectable = useDataGridContext_unstable((ctx)=>ctx.selectableRows);\n    const selected = useDataGridContext_unstable((ctx)=>ctx.selection.isRowSelected(rowId));\n    const focusMode = useDataGridContext_unstable((ctx)=>ctx.focusMode);\n    const compositeRowTabsterAttribute = useDataGridContext_unstable((ctx)=>ctx.compositeRowTabsterAttribute);\n    const tabbable = focusMode === 'row_unstable' || focusMode === 'composite';\n    const appearance = useDataGridContext_unstable((ctx)=>{\n        if (!isHeader && selectable && ctx.selection.isRowSelected(rowId)) {\n            return ctx.selectionAppearance;\n        }\n        return 'none';\n    });\n    const toggleRow = useDataGridContext_unstable((ctx)=>ctx.selection.toggleRow);\n    const dataGridContextValue = useDataGridContext_unstable((ctx)=>ctx);\n    const onClick = useEventCallback((e)=>{\n        var _props_onClick;\n        if (selectable && !isHeader) {\n            toggleRow(e, rowId);\n        }\n        (_props_onClick = props.onClick) === null || _props_onClick === void 0 ? void 0 : _props_onClick.call(props, e);\n    });\n    const onKeyDown = useEventCallback((e)=>{\n        var _props_onKeyDown;\n        if (selectable && !isHeader && e.key === Space && !isInteractiveHTMLElement(e.target)) {\n            // stop scrolling\n            e.preventDefault();\n            toggleRow(e, rowId);\n        }\n        (_props_onKeyDown = props.onKeyDown) === null || _props_onKeyDown === void 0 ? void 0 : _props_onKeyDown.call(props, e);\n    });\n    const baseState = useTableRow_unstable({\n        appearance,\n        'aria-selected': selectable ? selected : undefined,\n        tabIndex: tabbable && !isHeader ? 0 : undefined,\n        ...focusMode === 'composite' && !isHeader && compositeRowTabsterAttribute,\n        ...props,\n        onClick,\n        onKeyDown,\n        children: null,\n        as: 'div'\n    }, ref);\n    return {\n        ...baseState,\n        components: {\n            ...baseState.components,\n            selectionCell: DataGridSelectionCell\n        },\n        selectionCell: resolveShorthand(props.selectionCell, {\n            required: selectable\n        }),\n        renderCell: props.children,\n        columnDefs,\n        dataGridContextValue\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}