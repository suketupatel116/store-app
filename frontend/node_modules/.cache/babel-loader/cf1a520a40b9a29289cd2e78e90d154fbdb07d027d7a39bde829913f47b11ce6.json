{"ast":null,"code":"import * as React from 'react';\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\n/**\n * @internal\n * https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback\n *\n * Modified `useCallback` that can be used when dependencies change too frequently. Can occur when\n * e.g. user props are dependencies which could change on every render\n * e.g. volatile values (i.e. useState/useDispatch) are dependencies which could change frequently\n *\n * This should not be used often, but can be a useful re-render optimization since the callback is a ref and\n * will not be invalidated between re-renders\n *\n * @param fn - The callback function that will be used\n */\nexport const useEventCallback = fn => {\n  const callbackRef = React.useRef(() => {\n    throw new Error('Cannot call an event handler while rendering');\n  });\n  useIsomorphicLayoutEffect(() => {\n    callbackRef.current = fn;\n  }, [fn]);\n  return React.useCallback(function () {\n    const callback = callbackRef.current;\n    return callback(...arguments);\n  }, [callbackRef]);\n};","map":{"version":3,"names":["React","useIsomorphicLayoutEffect","useEventCallback","fn","callbackRef","useRef","Error","current","useCallback","callback","arguments"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-utilities/lib/hooks/useEventCallback.js"],"sourcesContent":["import * as React from 'react';\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\n/**\n * @internal\n * https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback\n *\n * Modified `useCallback` that can be used when dependencies change too frequently. Can occur when\n * e.g. user props are dependencies which could change on every render\n * e.g. volatile values (i.e. useState/useDispatch) are dependencies which could change frequently\n *\n * This should not be used often, but can be a useful re-render optimization since the callback is a ref and\n * will not be invalidated between re-renders\n *\n * @param fn - The callback function that will be used\n */ export const useEventCallback = (fn)=>{\n    const callbackRef = React.useRef(()=>{\n        throw new Error('Cannot call an event handler while rendering');\n    });\n    useIsomorphicLayoutEffect(()=>{\n        callbackRef.current = fn;\n    }, [\n        fn\n    ]);\n    return React.useCallback((...args)=>{\n        const callback = callbackRef.current;\n        return callback(...args);\n    }, [\n        callbackRef\n    ]);\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,yBAAyB,QAAQ,6BAA6B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,MAAMC,gBAAgB,GAAIC,EAAE,IAAG;EACtC,MAAMC,WAAW,GAAGJ,KAAK,CAACK,MAAM,CAAC,MAAI;IACjC,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACnE,CAAC,CAAC;EACFL,yBAAyB,CAAC,MAAI;IAC1BG,WAAW,CAACG,OAAO,GAAGJ,EAAE;EAC5B,CAAC,EAAE,CACCA,EAAE,CACL,CAAC;EACF,OAAOH,KAAK,CAACQ,WAAW,CAAC,YAAW;IAChC,MAAMC,QAAQ,GAAGL,WAAW,CAACG,OAAO;IACpC,OAAOE,QAAQ,CAAC,GAAAC,SAAO,CAAC;EAC5B,CAAC,EAAE,CACCN,WAAW,CACd,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}