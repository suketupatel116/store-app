{"ast":null,"code":"import * as React from 'react';\nimport { useFieldControlProps_unstable } from '@fluentui/react-field';\nimport { ChevronDownRegular as ChevronDownIcon } from '@fluentui/react-icons';\nimport { getPartitionedNativeProps, mergeCallbacks, resolveShorthand, useTimeout } from '@fluentui/react-utilities';\nimport { getDropdownActionFromKey } from '../../utils/dropdownKeyActions';\nimport { useComboboxBaseState } from '../../utils/useComboboxBaseState';\nimport { useComboboxPopup } from '../../utils/useComboboxPopup';\nimport { useTriggerListboxSlots } from '../../utils/useTriggerListboxSlots';\nimport { Listbox } from '../Listbox/Listbox';\nimport { useMergedRefs } from '@fluentui/react-utilities';\n/**\n * Create the state required to render Dropdown.\n *\n * The returned state can be modified with hooks such as useDropdownStyles_unstable,\n * before being passed to renderDropdown_unstable.\n *\n * @param props - props from this instance of Dropdown\n * @param ref - reference to root HTMLElement of Dropdown\n */\nexport const useDropdown_unstable = (props, ref) => {\n  // Merge props from surrounding <Field>, if any\n  props = useFieldControlProps_unstable(props, {\n    supportsLabelFor: true,\n    supportsSize: true\n  });\n  const baseState = useComboboxBaseState(props);\n  const {\n    activeOption,\n    getIndexOfId,\n    getOptionsMatchingText,\n    open,\n    setActiveOption,\n    setFocusVisible,\n    setOpen\n  } = baseState;\n  const {\n    primary: triggerNativeProps,\n    root: rootNativeProps\n  } = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'button',\n    excludedPropNames: ['children']\n  });\n  // set listbox popup width based off the root/trigger width\n  const rootRef = React.useRef(null);\n  const [popupWidth, setPopupWidth] = React.useState();\n  React.useEffect(() => {\n    var _rootRef_current;\n    const width = open ? `${(_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.clientWidth}px` : undefined;\n    setPopupWidth(width);\n  }, [open]);\n  // jump to matching option based on typing\n  const searchString = React.useRef('');\n  const [setKeyTimeout, clearKeyTimeout] = useTimeout();\n  const getNextMatchingOption = () => {\n    // first check for matches for the full searchString\n    let matcher = optionText => optionText.toLowerCase().indexOf(searchString.current) === 0;\n    let matches = getOptionsMatchingText(matcher);\n    let startIndex = activeOption ? getIndexOfId(activeOption.id) : 0;\n    // if the dropdown is already open and the searchstring is a single character,\n    // then look after the current activeOption for letters\n    // this is so slowly typing the same letter will cycle through matches\n    if (open && searchString.current.length === 1) {\n      startIndex++;\n    }\n    // if there are no direct matches, check if the search is all the same letter, e.g. \"aaa\"\n    if (!matches.length) {\n      const letters = searchString.current.split('');\n      const allSameLetter = letters.length && letters.every(letter => letter === letters[0]);\n      // if the search is all the same letter, cycle through options starting with that letter\n      if (allSameLetter) {\n        startIndex++;\n        matcher = optionText => optionText.toLowerCase().indexOf(letters[0]) === 0;\n        matches = getOptionsMatchingText(matcher);\n      }\n    }\n    // if there is an active option and multiple matches,\n    // return first matching option after the current active option, looping back to the top\n    if (matches.length > 1 && activeOption) {\n      const nextMatch = matches.find(option => getIndexOfId(option.id) >= startIndex);\n      return nextMatch !== null && nextMatch !== void 0 ? nextMatch : matches[0];\n    }\n    var _matches_;\n    return (_matches_ = matches[0]) !== null && _matches_ !== void 0 ? _matches_ : undefined;\n  };\n  const onTriggerKeyDown = ev => {\n    // clear timeout, if it exists\n    clearKeyTimeout();\n    // if the key was a char key, update search string\n    if (getDropdownActionFromKey(ev) === 'Type') {\n      // update search string\n      searchString.current += ev.key.toLowerCase();\n      setKeyTimeout(() => {\n        searchString.current = '';\n      }, 500);\n      // update state\n      !open && setOpen(ev, true);\n      const nextOption = getNextMatchingOption();\n      setActiveOption(nextOption);\n      setFocusVisible(true);\n    }\n  };\n  // resolve button and listbox slot props\n  let triggerSlot;\n  let listboxSlot;\n  triggerSlot = resolveShorthand(props.button, {\n    required: true,\n    defaultProps: {\n      type: 'button',\n      children: baseState.value || props.placeholder,\n      ...triggerNativeProps\n    }\n  });\n  triggerSlot.onKeyDown = mergeCallbacks(onTriggerKeyDown, triggerSlot.onKeyDown);\n  listboxSlot = baseState.open || baseState.hasFocus ? resolveShorthand(props.listbox, {\n    required: true,\n    defaultProps: {\n      children: props.children,\n      style: {\n        width: popupWidth\n      }\n    }\n  }) : undefined;\n  [triggerSlot, listboxSlot] = useComboboxPopup(props, triggerSlot, listboxSlot);\n  [triggerSlot, listboxSlot] = useTriggerListboxSlots(props, baseState, ref, triggerSlot, listboxSlot);\n  const state = {\n    components: {\n      root: 'div',\n      button: 'button',\n      expandIcon: 'span',\n      listbox: Listbox\n    },\n    root: resolveShorthand(props.root, {\n      required: true,\n      defaultProps: {\n        'aria-owns': !props.inlinePopup ? listboxSlot === null || listboxSlot === void 0 ? void 0 : listboxSlot.id : undefined,\n        children: props.children,\n        ...rootNativeProps\n      }\n    }),\n    button: triggerSlot,\n    listbox: listboxSlot,\n    expandIcon: resolveShorthand(props.expandIcon, {\n      required: true,\n      defaultProps: {\n        children: /*#__PURE__*/React.createElement(ChevronDownIcon, null)\n      }\n    }),\n    placeholderVisible: !baseState.value && !!props.placeholder,\n    ...baseState\n  };\n  state.root.ref = useMergedRefs(state.root.ref, rootRef);\n  return state;\n};","map":{"version":3,"names":["React","useFieldControlProps_unstable","ChevronDownRegular","ChevronDownIcon","getPartitionedNativeProps","mergeCallbacks","resolveShorthand","useTimeout","getDropdownActionFromKey","useComboboxBaseState","useComboboxPopup","useTriggerListboxSlots","Listbox","useMergedRefs","useDropdown_unstable","props","ref","supportsLabelFor","supportsSize","baseState","activeOption","getIndexOfId","getOptionsMatchingText","open","setActiveOption","setFocusVisible","setOpen","primary","triggerNativeProps","root","rootNativeProps","primarySlotTagName","excludedPropNames","rootRef","useRef","popupWidth","setPopupWidth","useState","useEffect","_rootRef_current","width","current","clientWidth","undefined","searchString","setKeyTimeout","clearKeyTimeout","getNextMatchingOption","matcher","optionText","toLowerCase","indexOf","matches","startIndex","id","length","letters","split","allSameLetter","every","letter","nextMatch","find","option","_matches_","onTriggerKeyDown","ev","key","nextOption","triggerSlot","listboxSlot","button","required","defaultProps","type","children","value","placeholder","onKeyDown","hasFocus","listbox","style","state","components","expandIcon","inlinePopup","createElement","placeholderVisible"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-combobox/lib/components/Dropdown/useDropdown.js"],"sourcesContent":["import * as React from 'react';\nimport { useFieldControlProps_unstable } from '@fluentui/react-field';\nimport { ChevronDownRegular as ChevronDownIcon } from '@fluentui/react-icons';\nimport { getPartitionedNativeProps, mergeCallbacks, resolveShorthand, useTimeout } from '@fluentui/react-utilities';\nimport { getDropdownActionFromKey } from '../../utils/dropdownKeyActions';\nimport { useComboboxBaseState } from '../../utils/useComboboxBaseState';\nimport { useComboboxPopup } from '../../utils/useComboboxPopup';\nimport { useTriggerListboxSlots } from '../../utils/useTriggerListboxSlots';\nimport { Listbox } from '../Listbox/Listbox';\nimport { useMergedRefs } from '@fluentui/react-utilities';\n/**\n * Create the state required to render Dropdown.\n *\n * The returned state can be modified with hooks such as useDropdownStyles_unstable,\n * before being passed to renderDropdown_unstable.\n *\n * @param props - props from this instance of Dropdown\n * @param ref - reference to root HTMLElement of Dropdown\n */ export const useDropdown_unstable = (props, ref)=>{\n    // Merge props from surrounding <Field>, if any\n    props = useFieldControlProps_unstable(props, {\n        supportsLabelFor: true,\n        supportsSize: true\n    });\n    const baseState = useComboboxBaseState(props);\n    const { activeOption , getIndexOfId , getOptionsMatchingText , open , setActiveOption , setFocusVisible , setOpen  } = baseState;\n    const { primary: triggerNativeProps , root: rootNativeProps  } = getPartitionedNativeProps({\n        props,\n        primarySlotTagName: 'button',\n        excludedPropNames: [\n            'children'\n        ]\n    });\n    // set listbox popup width based off the root/trigger width\n    const rootRef = React.useRef(null);\n    const [popupWidth, setPopupWidth] = React.useState();\n    React.useEffect(()=>{\n        var _rootRef_current;\n        const width = open ? `${(_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.clientWidth}px` : undefined;\n        setPopupWidth(width);\n    }, [\n        open\n    ]);\n    // jump to matching option based on typing\n    const searchString = React.useRef('');\n    const [setKeyTimeout, clearKeyTimeout] = useTimeout();\n    const getNextMatchingOption = ()=>{\n        // first check for matches for the full searchString\n        let matcher = (optionText)=>optionText.toLowerCase().indexOf(searchString.current) === 0;\n        let matches = getOptionsMatchingText(matcher);\n        let startIndex = activeOption ? getIndexOfId(activeOption.id) : 0;\n        // if the dropdown is already open and the searchstring is a single character,\n        // then look after the current activeOption for letters\n        // this is so slowly typing the same letter will cycle through matches\n        if (open && searchString.current.length === 1) {\n            startIndex++;\n        }\n        // if there are no direct matches, check if the search is all the same letter, e.g. \"aaa\"\n        if (!matches.length) {\n            const letters = searchString.current.split('');\n            const allSameLetter = letters.length && letters.every((letter)=>letter === letters[0]);\n            // if the search is all the same letter, cycle through options starting with that letter\n            if (allSameLetter) {\n                startIndex++;\n                matcher = (optionText)=>optionText.toLowerCase().indexOf(letters[0]) === 0;\n                matches = getOptionsMatchingText(matcher);\n            }\n        }\n        // if there is an active option and multiple matches,\n        // return first matching option after the current active option, looping back to the top\n        if (matches.length > 1 && activeOption) {\n            const nextMatch = matches.find((option)=>getIndexOfId(option.id) >= startIndex);\n            return nextMatch !== null && nextMatch !== void 0 ? nextMatch : matches[0];\n        }\n        var _matches_;\n        return (_matches_ = matches[0]) !== null && _matches_ !== void 0 ? _matches_ : undefined;\n    };\n    const onTriggerKeyDown = (ev)=>{\n        // clear timeout, if it exists\n        clearKeyTimeout();\n        // if the key was a char key, update search string\n        if (getDropdownActionFromKey(ev) === 'Type') {\n            // update search string\n            searchString.current += ev.key.toLowerCase();\n            setKeyTimeout(()=>{\n                searchString.current = '';\n            }, 500);\n            // update state\n            !open && setOpen(ev, true);\n            const nextOption = getNextMatchingOption();\n            setActiveOption(nextOption);\n            setFocusVisible(true);\n        }\n    };\n    // resolve button and listbox slot props\n    let triggerSlot;\n    let listboxSlot;\n    triggerSlot = resolveShorthand(props.button, {\n        required: true,\n        defaultProps: {\n            type: 'button',\n            children: baseState.value || props.placeholder,\n            ...triggerNativeProps\n        }\n    });\n    triggerSlot.onKeyDown = mergeCallbacks(onTriggerKeyDown, triggerSlot.onKeyDown);\n    listboxSlot = baseState.open || baseState.hasFocus ? resolveShorthand(props.listbox, {\n        required: true,\n        defaultProps: {\n            children: props.children,\n            style: {\n                width: popupWidth\n            }\n        }\n    }) : undefined;\n    [triggerSlot, listboxSlot] = useComboboxPopup(props, triggerSlot, listboxSlot);\n    [triggerSlot, listboxSlot] = useTriggerListboxSlots(props, baseState, ref, triggerSlot, listboxSlot);\n    const state = {\n        components: {\n            root: 'div',\n            button: 'button',\n            expandIcon: 'span',\n            listbox: Listbox\n        },\n        root: resolveShorthand(props.root, {\n            required: true,\n            defaultProps: {\n                'aria-owns': !props.inlinePopup ? listboxSlot === null || listboxSlot === void 0 ? void 0 : listboxSlot.id : undefined,\n                children: props.children,\n                ...rootNativeProps\n            }\n        }),\n        button: triggerSlot,\n        listbox: listboxSlot,\n        expandIcon: resolveShorthand(props.expandIcon, {\n            required: true,\n            defaultProps: {\n                children: /*#__PURE__*/ React.createElement(ChevronDownIcon, null)\n            }\n        }),\n        placeholderVisible: !baseState.value && !!props.placeholder,\n        ...baseState\n    };\n    state.root.ref = useMergedRefs(state.root.ref, rootRef);\n    return state;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}