{"ast":null,"code":"const isUnit = value => typeof value === 'string' && /(\\d+(\\w+|%))/.test(value);\nconst isUnitless = value => typeof value === 'number' && !Number.isNaN(value);\nconst isInitial = value => value === 'initial';\nconst isAuto = value => value === 'auto';\nconst isNone = value => value === 'none';\nconst widthReservedKeys = ['content', 'fit-content', 'max-content', 'min-content'];\nconst isWidth = value => widthReservedKeys.some(key => value === key) || isUnit(value);\n/**\r\n * A function that implements CSS spec conformant expansion for \"flex\".\r\n *\r\n * @example\r\n *   flex('auto')\r\n *   flex(1, '2.5rem')\r\n *   flex(0, 0, 'auto')\r\n *\r\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex\r\n */\nfunction flex() {\n  for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n    values[_key] = arguments[_key];\n  }\n  const isOneValueSyntax = values.length === 1;\n  const isTwoValueSyntax = values.length === 2;\n  const isThreeValueSyntax = values.length === 3;\n  if (isOneValueSyntax) {\n    const [firstValue] = values;\n    if (isInitial(firstValue)) {\n      return {\n        flexGrow: 0,\n        flexShrink: 1,\n        flexBasis: 'auto'\n      };\n    }\n    if (isAuto(firstValue)) {\n      return {\n        flexGrow: 1,\n        flexShrink: 1,\n        flexBasis: 'auto'\n      };\n    }\n    if (isNone(firstValue)) {\n      return {\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto'\n      };\n    }\n    if (isUnitless(firstValue)) {\n      return {\n        flexGrow: firstValue,\n        flexShrink: 1,\n        flexBasis: 0\n      };\n    }\n    if (isWidth(firstValue)) {\n      return {\n        flexGrow: 1,\n        flexShrink: 1,\n        flexBasis: firstValue\n      };\n    }\n  }\n  if (isTwoValueSyntax) {\n    const [firstValue, secondValue] = values;\n    if (isUnitless(secondValue)) {\n      return {\n        flexGrow: firstValue,\n        flexShrink: secondValue,\n        flexBasis: 0\n      };\n    }\n    if (isWidth(secondValue)) {\n      return {\n        flexGrow: firstValue,\n        flexShrink: 1,\n        flexBasis: secondValue\n      };\n    }\n  }\n  if (isThreeValueSyntax) {\n    const [firstValue, secondValue, thirdValue] = values;\n    if (isUnitless(firstValue) && isUnitless(secondValue) && (isAuto(thirdValue) || isWidth(thirdValue))) {\n      return {\n        flexGrow: firstValue,\n        flexShrink: secondValue,\n        flexBasis: thirdValue\n      };\n    }\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.error(`The value passed to shorthands.flex did not match any flex property specs. The CSS styles were not generated. Please, check the flex documentation.`);\n  }\n  return {};\n}\nexport { flex };","map":{"version":3,"names":["isUnit","value","test","isUnitless","Number","isNaN","isInitial","isAuto","isNone","widthReservedKeys","isWidth","some","key","flex","_len","arguments","length","values","Array","_key","isOneValueSyntax","isTwoValueSyntax","isThreeValueSyntax","firstValue","flexGrow","flexShrink","flexBasis","secondValue","thirdValue","process","env","NODE_ENV","console","error"],"sources":["/Users/suketupatel/Desktop/application/frontend/packages/core/src/shorthands/flex.ts"],"sourcesContent":["import * as CSS from 'csstype';\n\nimport type { GriffelStyle } from '@griffel/style-types';\nimport type { FlexInput } from './types';\n\ntype FlexStyle = Pick<GriffelStyle, 'flexGrow' | 'flexShrink' | 'flexBasis'>;\n\nconst isUnit = (value: CSS.Property.Flex | undefined) => typeof value === 'string' && /(\\d+(\\w+|%))/.test(value);\n\nconst isUnitless = (value: CSS.Property.Flex | undefined) => typeof value === 'number' && !Number.isNaN(value);\n\nconst isInitial = (value: CSS.Property.Flex | undefined) => value === 'initial';\n\nconst isAuto = (value: CSS.Property.Flex | undefined) => value === 'auto';\n\nconst isNone = (value: CSS.Property.Flex | undefined) => value === 'none';\n\nconst widthReservedKeys = ['content', 'fit-content', 'max-content', 'min-content'] as const;\ntype ReservedKeys = (typeof widthReservedKeys)[number];\ntype Width = ReservedKeys | string;\nconst isWidth = (value: CSS.Property.Flex | undefined) => widthReservedKeys.some(key => value === key) || isUnit(value);\n\n/**\n * A function that implements CSS spec conformant expansion for \"flex\".\n *\n * @example\n *   flex('auto')\n *   flex(1, '2.5rem')\n *   flex(0, 0, 'auto')\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex\n */\nexport function flex(...values: FlexInput): FlexStyle {\n  const isOneValueSyntax = values.length === 1;\n  const isTwoValueSyntax = values.length === 2;\n  const isThreeValueSyntax = values.length === 3;\n\n  if (isOneValueSyntax) {\n    const [firstValue] = values;\n\n    if (isInitial(firstValue)) {\n      return {\n        flexGrow: 0,\n        flexShrink: 1,\n        flexBasis: 'auto',\n      };\n    }\n\n    if (isAuto(firstValue)) {\n      return {\n        flexGrow: 1,\n        flexShrink: 1,\n        flexBasis: 'auto',\n      };\n    }\n\n    if (isNone(firstValue)) {\n      return {\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto',\n      };\n    }\n\n    if (isUnitless(firstValue)) {\n      return {\n        flexGrow: firstValue as number,\n        flexShrink: 1,\n        flexBasis: 0,\n      };\n    }\n\n    if (isWidth(firstValue)) {\n      return {\n        flexGrow: 1,\n        flexShrink: 1,\n        flexBasis: firstValue as Width,\n      };\n    }\n  }\n\n  if (isTwoValueSyntax) {\n    const [firstValue, secondValue] = values;\n\n    if (isUnitless(secondValue)) {\n      return {\n        flexGrow: firstValue,\n        flexShrink: secondValue,\n        flexBasis: 0,\n      };\n    }\n\n    if (isWidth(secondValue)) {\n      return {\n        flexGrow: firstValue,\n        flexShrink: 1,\n        flexBasis: secondValue as Width,\n      };\n    }\n  }\n\n  if (isThreeValueSyntax) {\n    const [firstValue, secondValue, thirdValue] = values;\n\n    if (isUnitless(firstValue) && isUnitless(secondValue) && (isAuto(thirdValue) || isWidth(thirdValue))) {\n      return {\n        flexGrow: firstValue,\n        flexShrink: secondValue,\n        flexBasis: thirdValue as Width,\n      };\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.error(\n      `The value passed to shorthands.flex did not match any flex property specs. The CSS styles were not generated. Please, check the flex documentation.`,\n    );\n  }\n  return {} as FlexStyle;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}