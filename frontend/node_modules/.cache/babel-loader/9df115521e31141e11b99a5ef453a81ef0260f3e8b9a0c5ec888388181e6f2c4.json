{"ast":null,"code":"import * as React from 'react';\nimport { mergeCallbacks, resolveShorthand } from '@fluentui/react-utilities';\nimport { Enter } from '@fluentui/keyboard-keys';\nimport { useFocusFinders } from '@fluentui/react-tabster';\n/**\n * @internal\n *\n * Create the state related to selectable cards.\n *\n * This internal hook controls all the logic for selectable cards and is\n * intended to be used alongside with useCard_unstable.\n *\n * @param props - props from this instance of Card\n * @param a11yProps - accessibility props shared between elements of the card\n * @param ref - reference to the root element of Card\n */\nexport const useCardSelectable = (props, _ref, cardRef) => {\n  let {\n    referenceLabel,\n    referenceId\n  } = _ref;\n  const {\n    checkbox = {},\n    selected,\n    defaultSelected,\n    onSelectionChange,\n    floatingAction,\n    onClick,\n    onKeyDown\n  } = props;\n  const {\n    findAllFocusable\n  } = useFocusFinders();\n  const checkboxRef = React.useRef(null);\n  const isSelectable = [selected, defaultSelected, onSelectionChange].some(prop => typeof prop !== 'undefined');\n  const [isCardSelected, setIsCardSelected] = React.useState(false);\n  const [isSelectFocused, setIsSelectFocused] = React.useState(false);\n  const shouldRestrictTriggerAction = React.useCallback(event => {\n    if (!cardRef.current) {\n      return false;\n    }\n    const focusableElements = findAllFocusable(cardRef.current);\n    const target = event.target;\n    const isElementInFocusableGroup = focusableElements.some(element => element.contains(target));\n    const isCheckboxSlot = (checkboxRef === null || checkboxRef === void 0 ? void 0 : checkboxRef.current) === target;\n    return isElementInFocusableGroup && !isCheckboxSlot;\n  }, [cardRef, findAllFocusable]);\n  const onChangeHandler = React.useCallback(event => {\n    if (shouldRestrictTriggerAction(event)) {\n      return;\n    }\n    const newCheckedValue = !isCardSelected;\n    setIsCardSelected(newCheckedValue);\n    if (onSelectionChange) {\n      onSelectionChange(event, {\n        selected: newCheckedValue\n      });\n    }\n  }, [onSelectionChange, isCardSelected, shouldRestrictTriggerAction]);\n  const onKeyDownHandler = React.useCallback(event => {\n    if ([Enter].includes(event.key)) {\n      event.preventDefault();\n      onChangeHandler(event);\n    }\n  }, [onChangeHandler]);\n  const checkboxSlot = React.useMemo(() => {\n    if (!isSelectable || floatingAction) {\n      return;\n    }\n    const selectableCheckboxProps = {};\n    if (referenceId) {\n      selectableCheckboxProps['aria-labelledby'] = referenceId;\n    } else if (referenceLabel) {\n      selectableCheckboxProps['aria-label'] = referenceLabel;\n    }\n    return resolveShorthand(checkbox, {\n      defaultProps: {\n        ref: checkboxRef,\n        type: 'checkbox',\n        checked: isCardSelected,\n        onChange: event => onChangeHandler(event),\n        onFocus: () => setIsSelectFocused(true),\n        onBlur: () => setIsSelectFocused(false),\n        ...selectableCheckboxProps\n      }\n    });\n  }, [checkbox, floatingAction, isCardSelected, isSelectable, onChangeHandler, referenceId, referenceLabel]);\n  const floatingActionSlot = React.useMemo(() => {\n    if (!floatingAction) {\n      return;\n    }\n    return resolveShorthand(floatingAction, {\n      defaultProps: {\n        ref: checkboxRef\n      }\n    });\n  }, [floatingAction]);\n  const selectableCardProps = React.useMemo(() => {\n    if (!isSelectable) {\n      return null;\n    }\n    return {\n      onClick: mergeCallbacks(onClick, onChangeHandler),\n      onKeyDown: mergeCallbacks(onKeyDown, onKeyDownHandler)\n    };\n  }, [isSelectable, onChangeHandler, onClick, onKeyDown, onKeyDownHandler]);\n  React.useEffect(() => setIsCardSelected(Boolean(defaultSelected !== null && defaultSelected !== void 0 ? defaultSelected : selected)), [defaultSelected, selected, setIsCardSelected]);\n  return {\n    selected: isCardSelected,\n    selectable: isSelectable,\n    selectFocused: isSelectFocused,\n    selectableCardProps,\n    checkboxSlot,\n    floatingActionSlot\n  };\n};","map":{"version":3,"names":["React","mergeCallbacks","resolveShorthand","Enter","useFocusFinders","useCardSelectable","props","_ref","cardRef","referenceLabel","referenceId","checkbox","selected","defaultSelected","onSelectionChange","floatingAction","onClick","onKeyDown","findAllFocusable","checkboxRef","useRef","isSelectable","some","prop","isCardSelected","setIsCardSelected","useState","isSelectFocused","setIsSelectFocused","shouldRestrictTriggerAction","useCallback","event","current","focusableElements","target","isElementInFocusableGroup","element","contains","isCheckboxSlot","onChangeHandler","newCheckedValue","onKeyDownHandler","includes","key","preventDefault","checkboxSlot","useMemo","selectableCheckboxProps","defaultProps","ref","type","checked","onChange","onFocus","onBlur","floatingActionSlot","selectableCardProps","useEffect","Boolean","selectable","selectFocused"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-card/lib/components/Card/useCardSelectable.js"],"sourcesContent":["import * as React from 'react';\nimport { mergeCallbacks, resolveShorthand } from '@fluentui/react-utilities';\nimport { Enter } from '@fluentui/keyboard-keys';\nimport { useFocusFinders } from '@fluentui/react-tabster';\n/**\n * @internal\n *\n * Create the state related to selectable cards.\n *\n * This internal hook controls all the logic for selectable cards and is\n * intended to be used alongside with useCard_unstable.\n *\n * @param props - props from this instance of Card\n * @param a11yProps - accessibility props shared between elements of the card\n * @param ref - reference to the root element of Card\n */ export const useCardSelectable = (props, { referenceLabel , referenceId  }, cardRef)=>{\n    const { checkbox ={} , selected , defaultSelected , onSelectionChange , floatingAction , onClick , onKeyDown  } = props;\n    const { findAllFocusable  } = useFocusFinders();\n    const checkboxRef = React.useRef(null);\n    const isSelectable = [\n        selected,\n        defaultSelected,\n        onSelectionChange\n    ].some((prop)=>typeof prop !== 'undefined');\n    const [isCardSelected, setIsCardSelected] = React.useState(false);\n    const [isSelectFocused, setIsSelectFocused] = React.useState(false);\n    const shouldRestrictTriggerAction = React.useCallback((event)=>{\n        if (!cardRef.current) {\n            return false;\n        }\n        const focusableElements = findAllFocusable(cardRef.current);\n        const target = event.target;\n        const isElementInFocusableGroup = focusableElements.some((element)=>element.contains(target));\n        const isCheckboxSlot = (checkboxRef === null || checkboxRef === void 0 ? void 0 : checkboxRef.current) === target;\n        return isElementInFocusableGroup && !isCheckboxSlot;\n    }, [\n        cardRef,\n        findAllFocusable\n    ]);\n    const onChangeHandler = React.useCallback((event)=>{\n        if (shouldRestrictTriggerAction(event)) {\n            return;\n        }\n        const newCheckedValue = !isCardSelected;\n        setIsCardSelected(newCheckedValue);\n        if (onSelectionChange) {\n            onSelectionChange(event, {\n                selected: newCheckedValue\n            });\n        }\n    }, [\n        onSelectionChange,\n        isCardSelected,\n        shouldRestrictTriggerAction\n    ]);\n    const onKeyDownHandler = React.useCallback((event)=>{\n        if ([\n            Enter\n        ].includes(event.key)) {\n            event.preventDefault();\n            onChangeHandler(event);\n        }\n    }, [\n        onChangeHandler\n    ]);\n    const checkboxSlot = React.useMemo(()=>{\n        if (!isSelectable || floatingAction) {\n            return;\n        }\n        const selectableCheckboxProps = {};\n        if (referenceId) {\n            selectableCheckboxProps['aria-labelledby'] = referenceId;\n        } else if (referenceLabel) {\n            selectableCheckboxProps['aria-label'] = referenceLabel;\n        }\n        return resolveShorthand(checkbox, {\n            defaultProps: {\n                ref: checkboxRef,\n                type: 'checkbox',\n                checked: isCardSelected,\n                onChange: (event)=>onChangeHandler(event),\n                onFocus: ()=>setIsSelectFocused(true),\n                onBlur: ()=>setIsSelectFocused(false),\n                ...selectableCheckboxProps\n            }\n        });\n    }, [\n        checkbox,\n        floatingAction,\n        isCardSelected,\n        isSelectable,\n        onChangeHandler,\n        referenceId,\n        referenceLabel\n    ]);\n    const floatingActionSlot = React.useMemo(()=>{\n        if (!floatingAction) {\n            return;\n        }\n        return resolveShorthand(floatingAction, {\n            defaultProps: {\n                ref: checkboxRef\n            }\n        });\n    }, [\n        floatingAction\n    ]);\n    const selectableCardProps = React.useMemo(()=>{\n        if (!isSelectable) {\n            return null;\n        }\n        return {\n            onClick: mergeCallbacks(onClick, onChangeHandler),\n            onKeyDown: mergeCallbacks(onKeyDown, onKeyDownHandler)\n        };\n    }, [\n        isSelectable,\n        onChangeHandler,\n        onClick,\n        onKeyDown,\n        onKeyDownHandler\n    ]);\n    React.useEffect(()=>setIsCardSelected(Boolean(defaultSelected !== null && defaultSelected !== void 0 ? defaultSelected : selected)), [\n        defaultSelected,\n        selected,\n        setIsCardSelected\n    ]);\n    return {\n        selected: isCardSelected,\n        selectable: isSelectable,\n        selectFocused: isSelectFocused,\n        selectableCardProps,\n        checkboxSlot,\n        floatingActionSlot\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}