{"ast":null,"code":"/**\n * Calculates a number's precision based on the number of trailing\n * zeros if the number does not have a decimal indicated by a negative\n * precision. Otherwise, it calculates the number of digits after\n * the decimal point indicated by a positive precision.\n * @param value - the value to determine the precision of\n */export function calculatePrecision(value) {\n  /**\n  * Group 1:\n  * [1-9]([0]+$) matches trailing zeros\n  * Group 2:\n  * \\.([0-9]*) matches all digits after a decimal point.\n  */\n  const groups = /[1-9]([0]+$)|\\.([0-9]*)/.exec(String(value));\n  if (!groups) {\n    return 0;\n  }\n  if (groups[1]) {\n    return -groups[1].length;\n  }\n  if (groups[2]) {\n    return groups[2].length;\n  }\n  return 0;\n}\n/**\n * Rounds a number to a certain level of precision. Accepts negative precision.\n * @param value - The value that is being rounded.\n * @param precision - The number of decimal places to round the number to\n */\nexport function precisionRound(value, precision) {\n  let base = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n  const exp = Math.pow(base, precision);\n  return Math.round(value * exp) / exp;\n}","map":{"version":3,"names":["calculatePrecision","value","groups","exec","String","length","precisionRound","precision","base","arguments","undefined","exp","Math","pow","round"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-spinbutton/lib/utils/precision.js"],"sourcesContent":["/**\n * Calculates a number's precision based on the number of trailing\n * zeros if the number does not have a decimal indicated by a negative\n * precision. Otherwise, it calculates the number of digits after\n * the decimal point indicated by a positive precision.\n * @param value - the value to determine the precision of\n */ export function calculatePrecision(value) {\n    /**\n   * Group 1:\n   * [1-9]([0]+$) matches trailing zeros\n   * Group 2:\n   * \\.([0-9]*) matches all digits after a decimal point.\n   */ const groups = /[1-9]([0]+$)|\\.([0-9]*)/.exec(String(value));\n    if (!groups) {\n        return 0;\n    }\n    if (groups[1]) {\n        return -groups[1].length;\n    }\n    if (groups[2]) {\n        return groups[2].length;\n    }\n    return 0;\n}\n/**\n * Rounds a number to a certain level of precision. Accepts negative precision.\n * @param value - The value that is being rounded.\n * @param precision - The number of decimal places to round the number to\n */ export function precisionRound(value, precision, base = 10) {\n    const exp = Math.pow(base, precision);\n    return Math.round(value * exp) / exp;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,GAAI,OAAO,SAASA,kBAAkBA,CAACC,KAAK,EAAE;EAC1C;AACJ;AACA;AACA;AACA;AACA;EAAM,MAAMC,MAAM,GAAG,yBAAyB,CAACC,IAAI,CAACC,MAAM,CAACH,KAAK,CAAC,CAAC;EAC9D,IAAI,CAACC,MAAM,EAAE;IACT,OAAO,CAAC;EACZ;EACA,IAAIA,MAAM,CAAC,CAAC,CAAC,EAAE;IACX,OAAO,CAACA,MAAM,CAAC,CAAC,CAAC,CAACG,MAAM;EAC5B;EACA,IAAIH,MAAM,CAAC,CAAC,CAAC,EAAE;IACX,OAAOA,MAAM,CAAC,CAAC,CAAC,CAACG,MAAM;EAC3B;EACA,OAAO,CAAC;AACZ;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,SAASC,cAAcA,CAACL,KAAK,EAAEM,SAAS,EAAa;EAAA,IAAXC,IAAI,GAAAC,SAAA,CAAAJ,MAAA,QAAAI,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;EAC1D,MAAME,GAAG,GAAGC,IAAI,CAACC,GAAG,CAACL,IAAI,EAAED,SAAS,CAAC;EACrC,OAAOK,IAAI,CAACE,KAAK,CAACb,KAAK,GAAGU,GAAG,CAAC,GAAGA,GAAG;AACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}