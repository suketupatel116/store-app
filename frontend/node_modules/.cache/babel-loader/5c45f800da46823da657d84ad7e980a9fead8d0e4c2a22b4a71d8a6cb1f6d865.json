{"ast":null,"code":"import * as React from 'react';\nimport { getNativeElementProps, resolveShorthand, useMergedRefs } from '@fluentui/react-utilities';\nimport { useCardContext_unstable } from '../Card/CardContext';\nimport { cardPreviewClassNames } from './useCardPreviewStyles.styles';\n/**\n * Create the state required to render CardPreview.\n *\n * The returned state can be modified with hooks such as useCardPreviewStyles_unstable,\n * before being passed to renderCardPreview_unstable.\n *\n * @param props - props from this instance of CardPreview\n * @param ref - reference to root HTMLElement of CardPreview\n */\nexport const useCardPreview_unstable = (props, ref) => {\n  const {\n    logo\n  } = props;\n  const {\n    selectableA11yProps: {\n      referenceLabel,\n      referenceId,\n      setReferenceLabel,\n      setReferenceId\n    }\n  } = useCardContext_unstable();\n  const previewRef = useMergedRefs(ref, React.useRef(null));\n  React.useEffect(() => {\n    if (referenceLabel && referenceId) {\n      return;\n    }\n    if (previewRef.current && previewRef.current.parentNode) {\n      const img = previewRef.current.parentNode.querySelector(`.${cardPreviewClassNames.root} > img`);\n      if (img) {\n        const ariaLabel = img.getAttribute('aria-label');\n        const ariaDescribedby = img.getAttribute('aria-describedby');\n        if (ariaDescribedby) {\n          setReferenceId(ariaDescribedby);\n        } else if (img.alt) {\n          setReferenceLabel(img.alt);\n        } else if (ariaLabel) {\n          setReferenceLabel(ariaLabel);\n        }\n      }\n    }\n  }, [setReferenceLabel, referenceLabel, previewRef, referenceId, setReferenceId]);\n  return {\n    components: {\n      root: 'div',\n      logo: 'div'\n    },\n    root: getNativeElementProps('div', {\n      ref: previewRef,\n      ...props\n    }),\n    logo: resolveShorthand(logo)\n  };\n};","map":{"version":3,"names":["React","getNativeElementProps","resolveShorthand","useMergedRefs","useCardContext_unstable","cardPreviewClassNames","useCardPreview_unstable","props","ref","logo","selectableA11yProps","referenceLabel","referenceId","setReferenceLabel","setReferenceId","previewRef","useRef","useEffect","current","parentNode","img","querySelector","root","ariaLabel","getAttribute","ariaDescribedby","alt","components"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-card/lib/components/CardPreview/useCardPreview.js"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, resolveShorthand, useMergedRefs } from '@fluentui/react-utilities';\nimport { useCardContext_unstable } from '../Card/CardContext';\nimport { cardPreviewClassNames } from './useCardPreviewStyles.styles';\n/**\n * Create the state required to render CardPreview.\n *\n * The returned state can be modified with hooks such as useCardPreviewStyles_unstable,\n * before being passed to renderCardPreview_unstable.\n *\n * @param props - props from this instance of CardPreview\n * @param ref - reference to root HTMLElement of CardPreview\n */ export const useCardPreview_unstable = (props, ref)=>{\n    const { logo  } = props;\n    const { selectableA11yProps: { referenceLabel , referenceId , setReferenceLabel , setReferenceId  }  } = useCardContext_unstable();\n    const previewRef = useMergedRefs(ref, React.useRef(null));\n    React.useEffect(()=>{\n        if (referenceLabel && referenceId) {\n            return;\n        }\n        if (previewRef.current && previewRef.current.parentNode) {\n            const img = previewRef.current.parentNode.querySelector(`.${cardPreviewClassNames.root} > img`);\n            if (img) {\n                const ariaLabel = img.getAttribute('aria-label');\n                const ariaDescribedby = img.getAttribute('aria-describedby');\n                if (ariaDescribedby) {\n                    setReferenceId(ariaDescribedby);\n                } else if (img.alt) {\n                    setReferenceLabel(img.alt);\n                } else if (ariaLabel) {\n                    setReferenceLabel(ariaLabel);\n                }\n            }\n        }\n    }, [\n        setReferenceLabel,\n        referenceLabel,\n        previewRef,\n        referenceId,\n        setReferenceId\n    ]);\n    return {\n        components: {\n            root: 'div',\n            logo: 'div'\n        },\n        root: getNativeElementProps('div', {\n            ref: previewRef,\n            ...props\n        }),\n        logo: resolveShorthand(logo)\n    };\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,qBAAqB,EAAEC,gBAAgB,EAAEC,aAAa,QAAQ,2BAA2B;AAClG,SAASC,uBAAuB,QAAQ,qBAAqB;AAC7D,SAASC,qBAAqB,QAAQ,+BAA+B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,MAAMC,uBAAuB,GAAGA,CAACC,KAAK,EAAEC,GAAG,KAAG;EACrD,MAAM;IAAEC;EAAM,CAAC,GAAGF,KAAK;EACvB,MAAM;IAAEG,mBAAmB,EAAE;MAAEC,cAAc;MAAGC,WAAW;MAAGC,iBAAiB;MAAGC;IAAgB;EAAG,CAAC,GAAGV,uBAAuB,CAAC,CAAC;EAClI,MAAMW,UAAU,GAAGZ,aAAa,CAACK,GAAG,EAAER,KAAK,CAACgB,MAAM,CAAC,IAAI,CAAC,CAAC;EACzDhB,KAAK,CAACiB,SAAS,CAAC,MAAI;IAChB,IAAIN,cAAc,IAAIC,WAAW,EAAE;MAC/B;IACJ;IACA,IAAIG,UAAU,CAACG,OAAO,IAAIH,UAAU,CAACG,OAAO,CAACC,UAAU,EAAE;MACrD,MAAMC,GAAG,GAAGL,UAAU,CAACG,OAAO,CAACC,UAAU,CAACE,aAAa,CAAE,IAAGhB,qBAAqB,CAACiB,IAAK,QAAO,CAAC;MAC/F,IAAIF,GAAG,EAAE;QACL,MAAMG,SAAS,GAAGH,GAAG,CAACI,YAAY,CAAC,YAAY,CAAC;QAChD,MAAMC,eAAe,GAAGL,GAAG,CAACI,YAAY,CAAC,kBAAkB,CAAC;QAC5D,IAAIC,eAAe,EAAE;UACjBX,cAAc,CAACW,eAAe,CAAC;QACnC,CAAC,MAAM,IAAIL,GAAG,CAACM,GAAG,EAAE;UAChBb,iBAAiB,CAACO,GAAG,CAACM,GAAG,CAAC;QAC9B,CAAC,MAAM,IAAIH,SAAS,EAAE;UAClBV,iBAAiB,CAACU,SAAS,CAAC;QAChC;MACJ;IACJ;EACJ,CAAC,EAAE,CACCV,iBAAiB,EACjBF,cAAc,EACdI,UAAU,EACVH,WAAW,EACXE,cAAc,CACjB,CAAC;EACF,OAAO;IACHa,UAAU,EAAE;MACRL,IAAI,EAAE,KAAK;MACXb,IAAI,EAAE;IACV,CAAC;IACDa,IAAI,EAAErB,qBAAqB,CAAC,KAAK,EAAE;MAC/BO,GAAG,EAAEO,UAAU;MACf,GAAGR;IACP,CAAC,CAAC;IACFE,IAAI,EAAEP,gBAAgB,CAACO,IAAI;EAC/B,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}