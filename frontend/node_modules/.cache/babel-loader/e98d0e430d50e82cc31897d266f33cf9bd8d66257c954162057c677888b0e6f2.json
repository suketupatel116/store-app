{"ast":null,"code":"import { getRestorer, getTabsterAttribute, Types as TabsterTypes } from 'tabster';\nimport { useTabster } from './useTabster';\n/**\n * Focus will be restored to the most recent target element when it is lost from a source\n * @returns Attribute to apply to the target element where focus is restored\n */\nexport function useRestoreFocusTarget() {\n  const tabster = useTabster();\n  // Initializes the restorer API\n  if (tabster) {\n    getRestorer(tabster);\n  }\n  return getTabsterAttribute({\n    restorer: {\n      type: TabsterTypes.RestorerTypes.Target\n    }\n  });\n}\n/**\n * Focus will be restored to the most recent target element when it is lost from a source\n * @returns Attribute to apply to the element that might lose focus\n */\nexport function useRestoreFocusSource() {\n  const tabster = useTabster();\n  // Initializes the restorer API\n  if (tabster) {\n    getRestorer(tabster);\n  }\n  return getTabsterAttribute({\n    restorer: {\n      type: TabsterTypes.RestorerTypes.Source\n    }\n  });\n}","map":{"version":3,"names":["getRestorer","getTabsterAttribute","Types","TabsterTypes","useTabster","useRestoreFocusTarget","tabster","restorer","type","RestorerTypes","Target","useRestoreFocusSource","Source"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-tabster/lib/hooks/useRestoreFocus.js"],"sourcesContent":["import { getRestorer, getTabsterAttribute, Types as TabsterTypes } from 'tabster';\nimport { useTabster } from './useTabster';\n/**\n * Focus will be restored to the most recent target element when it is lost from a source\n * @returns Attribute to apply to the target element where focus is restored\n */ export function useRestoreFocusTarget() {\n    const tabster = useTabster();\n    // Initializes the restorer API\n    if (tabster) {\n        getRestorer(tabster);\n    }\n    return getTabsterAttribute({\n        restorer: {\n            type: TabsterTypes.RestorerTypes.Target\n        }\n    });\n}\n/**\n * Focus will be restored to the most recent target element when it is lost from a source\n * @returns Attribute to apply to the element that might lose focus\n */ export function useRestoreFocusSource() {\n    const tabster = useTabster();\n    // Initializes the restorer API\n    if (tabster) {\n        getRestorer(tabster);\n    }\n    return getTabsterAttribute({\n        restorer: {\n            type: TabsterTypes.RestorerTypes.Source\n        }\n    });\n}\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,mBAAmB,EAAEC,KAAK,IAAIC,YAAY,QAAQ,SAAS;AACjF,SAASC,UAAU,QAAQ,cAAc;AACzC;AACA;AACA;AACA;AAAI,OAAO,SAASC,qBAAqBA,CAAA,EAAG;EACxC,MAAMC,OAAO,GAAGF,UAAU,CAAC,CAAC;EAC5B;EACA,IAAIE,OAAO,EAAE;IACTN,WAAW,CAACM,OAAO,CAAC;EACxB;EACA,OAAOL,mBAAmB,CAAC;IACvBM,QAAQ,EAAE;MACNC,IAAI,EAAEL,YAAY,CAACM,aAAa,CAACC;IACrC;EACJ,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AAAI,OAAO,SAASC,qBAAqBA,CAAA,EAAG;EACxC,MAAML,OAAO,GAAGF,UAAU,CAAC,CAAC;EAC5B;EACA,IAAIE,OAAO,EAAE;IACTN,WAAW,CAACM,OAAO,CAAC;EACxB;EACA,OAAOL,mBAAmB,CAAC;IACvBM,QAAQ,EAAE;MACNC,IAAI,EAAEL,YAAY,CAACM,aAAa,CAACG;IACrC;EACJ,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}