{"ast":null,"code":"import './constants.esm.js';\nimport { debugData } from './devtools/store.esm.js';\nimport { isDevToolsEnabled } from './devtools/isDevToolsEnabled.esm.js';\nimport { getSourceURLfromError } from './devtools/getSourceURLfromError.esm.js';\nimport { insertionFactory } from './insertionFactory.esm.js';\nimport { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots.esm.js';\n\n/**\r\n * A version of makeStyles() that accepts build output as an input and skips all runtime transforms.\r\n *\r\n * @internal\r\n */\nfunction __styles(classesMapBySlot, cssRules) {\n  let factory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : insertionFactory;\n  const insertStyles = factory();\n  let ltrClassNamesForSlots = null;\n  let rtlClassNamesForSlots = null;\n  let sourceURL;\n  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n    sourceURL = getSourceURLfromError();\n  }\n  function computeClasses(options) {\n    const {\n      dir,\n      renderer\n    } = options;\n    const isLTR = dir === 'ltr';\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n    insertStyles(renderer, cssRules);\n    const classNamesForSlots = isLTR ? ltrClassNamesForSlots : rtlClassNamesForSlots;\n    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n      debugData.addSequenceDetails(classNamesForSlots, sourceURL);\n    }\n    return classNamesForSlots;\n  }\n  return computeClasses;\n}\nexport { __styles };","map":{"version":3,"names":["__styles","classesMapBySlot","cssRules","factory","arguments","length","undefined","insertionFactory","insertStyles","ltrClassNamesForSlots","rtlClassNamesForSlots","sourceURL","process","env","NODE_ENV","isDevToolsEnabled","getSourceURLfromError","computeClasses","options","dir","renderer","isLTR","reduceToClassNameForSlots","classNamesForSlots","debugData","addSequenceDetails"],"sources":["/Users/suketupatel/Desktop/application/frontend/packages/core/src/__styles.ts"],"sourcesContent":["import { debugData, isDevToolsEnabled, getSourceURLfromError } from './devtools';\nimport { insertionFactory } from './insertionFactory';\nimport { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots';\nimport type { CSSClassesMapBySlot, CSSRulesByBucket, GriffelInsertionFactory } from './types';\nimport type { MakeStylesOptions } from './makeStyles';\n\n/**\n * A version of makeStyles() that accepts build output as an input and skips all runtime transforms.\n *\n * @internal\n */\nexport function __styles<Slots extends string>(\n  classesMapBySlot: CSSClassesMapBySlot<Slots>,\n  cssRules: CSSRulesByBucket,\n  factory: GriffelInsertionFactory = insertionFactory,\n) {\n  const insertStyles = factory();\n\n  let ltrClassNamesForSlots: Record<Slots, string> | null = null;\n  let rtlClassNamesForSlots: Record<Slots, string> | null = null;\n\n  let sourceURL: string | undefined;\n  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n    sourceURL = getSourceURLfromError();\n  }\n\n  function computeClasses(options: Pick<MakeStylesOptions, 'dir' | 'renderer'>): Record<Slots, string> {\n    const { dir, renderer } = options;\n    const isLTR = dir === 'ltr';\n\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n\n    insertStyles(renderer, cssRules);\n\n    const classNamesForSlots = isLTR\n      ? (ltrClassNamesForSlots as Record<Slots, string>)\n      : (rtlClassNamesForSlots as Record<Slots, string>);\n\n    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n      debugData.addSequenceDetails(classNamesForSlots!, sourceURL);\n    }\n\n    return classNamesForSlots;\n  }\n\n  return computeClasses;\n}\n"],"mappings":";;;;;;;AAMA;;;;;SAKgBA,QAAQA,CACtBC,gBAA4C,EAC5CC,QAA0B,EACyB;EAAA,IAAnDC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmCG,gBAAgB;EAEnD,MAAMC,YAAY,GAAGL,OAAO,EAAE;EAE9B,IAAIM,qBAAqB,GAAiC,IAAI;EAC9D,IAAIC,qBAAqB,GAAiC,IAAI;EAE9D,IAAIC,SAA6B;EACjC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIC,iBAAiB,EAAE;IAC9DJ,SAAS,GAAGK,qBAAqB,EAAE;;EAGrC,SAASC,cAAcA,CAACC,OAAoD;IAC1E,MAAM;MAAEC,GAAG;MAAEC;KAAU,GAAGF,OAAO;IACjC,MAAMG,KAAK,GAAGF,GAAG,KAAK,KAAK;IAE3B,IAAIE,KAAK,EAAE;MACT,IAAIZ,qBAAqB,KAAK,IAAI,EAAE;QAClCA,qBAAqB,GAAGa,yBAAyB,CAACrB,gBAAgB,EAAEkB,GAAG,CAAC;;KAE3E,MAAM;MACL,IAAIT,qBAAqB,KAAK,IAAI,EAAE;QAClCA,qBAAqB,GAAGY,yBAAyB,CAACrB,gBAAgB,EAAEkB,GAAG,CAAC;;;IAI5EX,YAAY,CAACY,QAAQ,EAAElB,QAAQ,CAAC;IAEhC,MAAMqB,kBAAkB,GAAGF,KAAK,GAC3BZ,qBAA+C,GAC/CC,qBAA+C;IAEpD,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIC,iBAAiB,EAAE;MAC9DS,SAAS,CAACC,kBAAkB,CAACF,kBAAmB,EAAEZ,SAAS,CAAC;;IAG9D,OAAOY,kBAAkB;;EAG3B,OAAON,cAAc;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}