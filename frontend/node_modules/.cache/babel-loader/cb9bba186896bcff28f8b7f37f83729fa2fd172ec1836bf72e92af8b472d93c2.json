{"ast":null,"code":"import * as React from 'react';\n/**\n * Returns true if event is a touch event. Useful when sharing logic between touch and mouse interactions.\n */\nexport function isTouchEvent(event) {\n  return event.type.startsWith('touch');\n}\n/**\n * Returns true if event is a mouse event. Useful when sharing logic between touch and mouse interactions.\n */\nexport function isMouseEvent(event) {\n  return event.type.startsWith('mouse') || ['click', 'contextmenu', 'dblclick'].indexOf(event.type) > -1;\n}\n/**\n * Returns an object with clientX, clientY for TouchOrMouseEvent.\n * Returns zeros in case the event is not a mouse or a touch event.\n */\nexport function getEventClientCoords(event) {\n  if (isMouseEvent(event)) {\n    return {\n      clientX: event.clientX,\n      clientY: event.clientY\n    };\n  } else if (isTouchEvent(event)) {\n    return {\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    };\n  } else {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error('@fluentui/react-utilities]: Unable to get clientX. Unknown event type.');\n    }\n    return {\n      clientX: 0,\n      clientY: 0\n    };\n  }\n}","map":{"version":3,"names":["React","isTouchEvent","event","type","startsWith","isMouseEvent","indexOf","getEventClientCoords","clientX","clientY","touches","process","env","NODE_ENV","Error"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-utilities/lib/events/mouseTouchHelpers.js"],"sourcesContent":["import * as React from 'react';\n/**\n * Returns true if event is a touch event. Useful when sharing logic between touch and mouse interactions.\n */ export function isTouchEvent(event) {\n    return event.type.startsWith('touch');\n}\n/**\n * Returns true if event is a mouse event. Useful when sharing logic between touch and mouse interactions.\n */ export function isMouseEvent(event) {\n    return event.type.startsWith('mouse') || [\n        'click',\n        'contextmenu',\n        'dblclick'\n    ].indexOf(event.type) > -1;\n}\n/**\n * Returns an object with clientX, clientY for TouchOrMouseEvent.\n * Returns zeros in case the event is not a mouse or a touch event.\n */ export function getEventClientCoords(event) {\n    if (isMouseEvent(event)) {\n        return {\n            clientX: event.clientX,\n            clientY: event.clientY\n        };\n    } else if (isTouchEvent(event)) {\n        return {\n            clientX: event.touches[0].clientX,\n            clientY: event.touches[0].clientY\n        };\n    } else {\n        if (process.env.NODE_ENV !== 'production') {\n            throw new Error('@fluentui/react-utilities]: Unable to get clientX. Unknown event type.');\n        }\n        return {\n            clientX: 0,\n            clientY: 0\n        };\n    }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B;AACA;AACA;AAAI,OAAO,SAASC,YAAYA,CAACC,KAAK,EAAE;EACpC,OAAOA,KAAK,CAACC,IAAI,CAACC,UAAU,CAAC,OAAO,CAAC;AACzC;AACA;AACA;AACA;AAAI,OAAO,SAASC,YAAYA,CAACH,KAAK,EAAE;EACpC,OAAOA,KAAK,CAACC,IAAI,CAACC,UAAU,CAAC,OAAO,CAAC,IAAI,CACrC,OAAO,EACP,aAAa,EACb,UAAU,CACb,CAACE,OAAO,CAACJ,KAAK,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC9B;AACA;AACA;AACA;AACA;AAAI,OAAO,SAASI,oBAAoBA,CAACL,KAAK,EAAE;EAC5C,IAAIG,YAAY,CAACH,KAAK,CAAC,EAAE;IACrB,OAAO;MACHM,OAAO,EAAEN,KAAK,CAACM,OAAO;MACtBC,OAAO,EAAEP,KAAK,CAACO;IACnB,CAAC;EACL,CAAC,MAAM,IAAIR,YAAY,CAACC,KAAK,CAAC,EAAE;IAC5B,OAAO;MACHM,OAAO,EAAEN,KAAK,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACF,OAAO;MACjCC,OAAO,EAAEP,KAAK,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACD;IAC9B,CAAC;EACL,CAAC,MAAM;IACH,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvC,MAAM,IAAIC,KAAK,CAAC,wEAAwE,CAAC;IAC7F;IACA,OAAO;MACHN,OAAO,EAAE,CAAC;MACVC,OAAO,EAAE;IACb,CAAC;EACL;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}