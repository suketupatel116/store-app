{"ast":null,"code":"import * as React from 'react';\nimport { useControllableState } from '@fluentui/react-utilities';\nconst noop = () => undefined;\nexport const defaultTableSortState = {\n  getSortDirection: () => 'ascending',\n  setColumnSort: noop,\n  sort: rows => [...rows],\n  sortColumn: undefined,\n  sortDirection: 'ascending',\n  toggleColumnSort: noop\n};\nexport function useTableSort(options) {\n  // False positive, these plugin hooks are intended to be run on every render\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return tableState => useTableSortState(tableState, options);\n}\nexport function useTableSortState(tableState, options) {\n  const {\n    columns\n  } = tableState;\n  const {\n    sortState,\n    defaultSortState,\n    onSortChange\n  } = options;\n  const [sorted, setSorted] = useControllableState({\n    initialState: {\n      sortDirection: 'ascending',\n      sortColumn: undefined\n    },\n    defaultState: defaultSortState,\n    state: sortState\n  });\n  const {\n    sortColumn,\n    sortDirection\n  } = sorted;\n  const toggleColumnSort = (e, columnId) => {\n    setSorted(s => {\n      const newState = {\n        ...s,\n        sortColumn: columnId\n      };\n      if (s.sortColumn === columnId) {\n        newState.sortDirection = s.sortDirection === 'ascending' ? 'descending' : 'ascending';\n      } else {\n        newState.sortDirection = 'ascending';\n      }\n      onSortChange === null || onSortChange === void 0 ? void 0 : onSortChange(e, newState);\n      return newState;\n    });\n  };\n  const setColumnSort = (e, nextSortColumn, nextSortDirection) => {\n    const newState = {\n      sortColumn: nextSortColumn,\n      sortDirection: nextSortDirection\n    };\n    onSortChange === null || onSortChange === void 0 ? void 0 : onSortChange(e, newState);\n    setSorted(newState);\n  };\n  const sort = rows => {\n    return rows.slice().sort((a, b) => {\n      const sortColumnDef = columns.find(column => column.columnId === sortColumn);\n      if (!(sortColumnDef === null || sortColumnDef === void 0 ? void 0 : sortColumnDef.compare)) {\n        return 0;\n      }\n      const mod = sortDirection === 'ascending' ? 1 : -1;\n      return sortColumnDef.compare(a.item, b.item) * mod;\n    });\n  };\n  const getSortDirection = columnId => {\n    return sortColumn === columnId ? sortDirection : undefined;\n  };\n  return {\n    ...tableState,\n    sort: {\n      sort,\n      sortColumn,\n      sortDirection,\n      setColumnSort,\n      toggleColumnSort,\n      getSortDirection\n    }\n  };\n}","map":{"version":3,"names":["React","useControllableState","noop","undefined","defaultTableSortState","getSortDirection","setColumnSort","sort","rows","sortColumn","sortDirection","toggleColumnSort","useTableSort","options","tableState","useTableSortState","columns","sortState","defaultSortState","onSortChange","sorted","setSorted","initialState","defaultState","state","e","columnId","s","newState","nextSortColumn","nextSortDirection","slice","a","b","sortColumnDef","find","column","compare","mod","item"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-table/lib/hooks/useTableSort.js"],"sourcesContent":["import * as React from 'react';\nimport { useControllableState } from '@fluentui/react-utilities';\nconst noop = ()=>undefined;\nexport const defaultTableSortState = {\n    getSortDirection: ()=>'ascending',\n    setColumnSort: noop,\n    sort: (rows)=>[\n            ...rows\n        ],\n    sortColumn: undefined,\n    sortDirection: 'ascending',\n    toggleColumnSort: noop\n};\nexport function useTableSort(options) {\n    // False positive, these plugin hooks are intended to be run on every render\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return (tableState)=>useTableSortState(tableState, options);\n}\nexport function useTableSortState(tableState, options) {\n    const { columns  } = tableState;\n    const { sortState , defaultSortState , onSortChange  } = options;\n    const [sorted, setSorted] = useControllableState({\n        initialState: {\n            sortDirection: 'ascending',\n            sortColumn: undefined\n        },\n        defaultState: defaultSortState,\n        state: sortState\n    });\n    const { sortColumn , sortDirection  } = sorted;\n    const toggleColumnSort = (e, columnId)=>{\n        setSorted((s)=>{\n            const newState = {\n                ...s,\n                sortColumn: columnId\n            };\n            if (s.sortColumn === columnId) {\n                newState.sortDirection = s.sortDirection === 'ascending' ? 'descending' : 'ascending';\n            } else {\n                newState.sortDirection = 'ascending';\n            }\n            onSortChange === null || onSortChange === void 0 ? void 0 : onSortChange(e, newState);\n            return newState;\n        });\n    };\n    const setColumnSort = (e, nextSortColumn, nextSortDirection)=>{\n        const newState = {\n            sortColumn: nextSortColumn,\n            sortDirection: nextSortDirection\n        };\n        onSortChange === null || onSortChange === void 0 ? void 0 : onSortChange(e, newState);\n        setSorted(newState);\n    };\n    const sort = (rows)=>{\n        return rows.slice().sort((a, b)=>{\n            const sortColumnDef = columns.find((column)=>column.columnId === sortColumn);\n            if (!(sortColumnDef === null || sortColumnDef === void 0 ? void 0 : sortColumnDef.compare)) {\n                return 0;\n            }\n            const mod = sortDirection === 'ascending' ? 1 : -1;\n            return sortColumnDef.compare(a.item, b.item) * mod;\n        });\n    };\n    const getSortDirection = (columnId)=>{\n        return sortColumn === columnId ? sortDirection : undefined;\n    };\n    return {\n        ...tableState,\n        sort: {\n            sort,\n            sortColumn,\n            sortDirection,\n            setColumnSort,\n            toggleColumnSort,\n            getSortDirection\n        }\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}