{"ast":null,"code":"import hashString from '@emotion/hash';\nfunction hashPropertyKey(selectors, container, media, support, property) {\n  // uniq key based on property & selector, used for merging later\n  const computedKey = selectors.join('') + container + media + support + property;\n  // \"key\" can be really long as it includes selectors, we use hashes to reduce sizes of keys\n  // \".foo :hover\" => \"abcd\"\n  const hashedKey = hashString(computedKey);\n  // As these hashes are used as object keys in build output we should avoid having numbers as a first character to\n  // avoid having quotes:\n  // {\n  //   \"1abc\": {}, // we don't want this\n  //   Aabc: {}, // no quotes\n  // }\n  const firstCharCode = hashedKey.charCodeAt(0);\n  const startsWithNumber = firstCharCode >= 48 && firstCharCode <= 57;\n  if (startsWithNumber) {\n    return String.fromCharCode(firstCharCode + 17) + hashedKey.substr(1);\n  }\n  return hashedKey;\n}\nexport { hashPropertyKey };","map":{"version":3,"names":["hashPropertyKey","selectors","container","media","support","property","computedKey","join","hashedKey","hashString","firstCharCode","charCodeAt","startsWithNumber","String","fromCharCode","substr"],"sources":["/Users/suketupatel/Desktop/application/frontend/packages/core/src/runtime/utils/hashPropertyKey.ts"],"sourcesContent":["import hash from '@emotion/hash';\nimport { PropertyHash } from '../../types';\n\nexport function hashPropertyKey(\n  selectors: string[],\n  container: string,\n  media: string,\n  support: string,\n  property: string,\n): PropertyHash {\n  // uniq key based on property & selector, used for merging later\n  const computedKey = selectors.join('') + container + media + support + property;\n\n  // \"key\" can be really long as it includes selectors, we use hashes to reduce sizes of keys\n  // \".foo :hover\" => \"abcd\"\n  const hashedKey = hash(computedKey);\n\n  // As these hashes are used as object keys in build output we should avoid having numbers as a first character to\n  // avoid having quotes:\n  // {\n  //   \"1abc\": {}, // we don't want this\n  //   Aabc: {}, // no quotes\n  // }\n  const firstCharCode = hashedKey.charCodeAt(0);\n  const startsWithNumber = firstCharCode >= 48 && firstCharCode <= 57;\n\n  if (startsWithNumber) {\n    return String.fromCharCode(firstCharCode + 17) + hashedKey.substr(1);\n  }\n\n  return hashedKey;\n}\n"],"mappings":";SAGgBA,eAAeA,CAC7BC,SAAmB,EACnBC,SAAiB,EACjBC,KAAa,EACbC,OAAe,EACfC,QAAgB;;EAGhB,MAAMC,WAAW,GAAGL,SAAS,CAACM,IAAI,CAAC,EAAE,CAAC,GAAGL,SAAS,GAAGC,KAAK,GAAGC,OAAO,GAAGC,QAAQ;;;EAI/E,MAAMG,SAAS,GAAGC,UAAI,CAACH,WAAW,CAAC;;;;;;;EAQnC,MAAMI,aAAa,GAAGF,SAAS,CAACG,UAAU,CAAC,CAAC,CAAC;EAC7C,MAAMC,gBAAgB,GAAGF,aAAa,IAAI,EAAE,IAAIA,aAAa,IAAI,EAAE;EAEnE,IAAIE,gBAAgB,EAAE;IACpB,OAAOC,MAAM,CAACC,YAAY,CAACJ,aAAa,GAAG,EAAE,CAAC,GAAGF,SAAS,CAACO,MAAM,CAAC,CAAC,CAAC;;EAGtE,OAAOP,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}