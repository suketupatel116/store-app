{"ast":null,"code":"import * as React from 'react';\nimport { ArrowLeft, ArrowRight, Enter, Escape, Shift, Space } from '@fluentui/keyboard-keys';\nimport { useEventCallback } from '@fluentui/react-utilities';\nimport { useFocusFinders, useTabsterAttributes } from '@fluentui/react-tabster';\nconst STEP = 20;\nconst PRECISION_MODIFIER = Shift;\nconst PRECISION_FACTOR = 1 / 4;\nexport function useKeyboardResizing(columnResizeState) {\n  const [columnId, setColumnId] = React.useState();\n  const onChangeRef = React.useRef();\n  const {\n    findPrevFocusable\n  } = useFocusFinders();\n  const columnResizeStateRef = React.useRef(columnResizeState);\n  React.useEffect(() => {\n    columnResizeStateRef.current = columnResizeState;\n  }, [columnResizeState]);\n  const [resizeHandleRefs] = React.useState(() => new Map());\n  const keyboardHandler = useEventCallback(event => {\n    if (!columnId) {\n      return;\n    }\n    const width = columnResizeStateRef.current.getColumnWidth(columnId);\n    const precisionModifier = event.getModifierState(PRECISION_MODIFIER);\n    const stopEvent = () => {\n      event.preventDefault();\n      event.stopPropagation();\n    };\n    switch (event.key) {\n      case ArrowLeft:\n        stopEvent();\n        columnResizeStateRef.current.setColumnWidth(event.nativeEvent, {\n          columnId,\n          width: width - (precisionModifier ? STEP * PRECISION_FACTOR : STEP)\n        });\n        return;\n      case ArrowRight:\n        stopEvent();\n        columnResizeStateRef.current.setColumnWidth(event.nativeEvent, {\n          columnId,\n          width: width + (precisionModifier ? STEP * PRECISION_FACTOR : STEP)\n        });\n        return;\n      case Space:\n      case Enter:\n      case Escape:\n        var\n          // Just blur here, the onBlur handler will take care of the rest (disableInteractiveMode).\n          _resizeHandleRefs_get, _resizeHandleRefs_get_current;\n        stopEvent();\n        (_resizeHandleRefs_get = resizeHandleRefs.get(columnId)) === null || _resizeHandleRefs_get === void 0 ? void 0 : (_resizeHandleRefs_get_current = _resizeHandleRefs_get.current) === null || _resizeHandleRefs_get_current === void 0 ? void 0 : _resizeHandleRefs_get_current.blur();\n        break;\n    }\n  });\n  const enableInteractiveMode = React.useCallback(colId => {\n    var _onChangeRef_current, _resizeHandleRefs_get;\n    setColumnId(colId);\n    (_onChangeRef_current = onChangeRef.current) === null || _onChangeRef_current === void 0 ? void 0 : _onChangeRef_current.call(onChangeRef, colId, true);\n    const handle = (_resizeHandleRefs_get = resizeHandleRefs.get(colId)) === null || _resizeHandleRefs_get === void 0 ? void 0 : _resizeHandleRefs_get.current;\n    if (handle) {\n      handle.setAttribute('tabindex', '-1');\n      handle.tabIndex = -1;\n      handle.focus();\n    }\n  }, [resizeHandleRefs]);\n  const disableInteractiveMode = React.useCallback(() => {\n    var\n      // Notify the onChange listener that we are disabling interactive mode.\n      _onChangeRef_current, _resizeHandleRefs_get;\n    if (!columnId) {\n      return;\n    }\n    (_onChangeRef_current = onChangeRef.current) === null || _onChangeRef_current === void 0 ? void 0 : _onChangeRef_current.call(onChangeRef, columnId, false);\n    // Find the previous focusable element (table header button) and focus it.\n    const el = (_resizeHandleRefs_get = resizeHandleRefs.get(columnId)) === null || _resizeHandleRefs_get === void 0 ? void 0 : _resizeHandleRefs_get.current;\n    if (el) {\n      var _findPrevFocusable;\n      (_findPrevFocusable = findPrevFocusable(el)) === null || _findPrevFocusable === void 0 ? void 0 : _findPrevFocusable.focus(); // Focus the previous focusable element (header button).\n      el.removeAttribute('tabindex');\n    }\n    setColumnId(undefined);\n  }, [columnId, findPrevFocusable, resizeHandleRefs]);\n  const toggleInteractiveMode = (colId, onChange) => {\n    onChangeRef.current = onChange;\n    if (!columnId) {\n      enableInteractiveMode(colId);\n    } else if (colId && columnId !== colId) {\n      enableInteractiveMode(colId);\n      setColumnId(colId);\n    } else {\n      disableInteractiveMode();\n    }\n  };\n  const getKeyboardResizingRef = React.useCallback(colId => {\n    const ref = resizeHandleRefs.get(colId) || React.createRef();\n    resizeHandleRefs.set(colId, ref);\n    return ref;\n  }, [resizeHandleRefs]);\n  // This makes sure the left and right arrow keys are ignored in tabster,\n  // so that they can be used for resizing.\n  const tabsterAttrs = useTabsterAttributes({\n    focusable: {\n      ignoreKeydown: {\n        ArrowLeft: true,\n        ArrowRight: true\n      }\n    }\n  });\n  return {\n    toggleInteractiveMode,\n    columnId,\n    getKeyboardResizingProps: (colId, currentWidth) => ({\n      onKeyDown: keyboardHandler,\n      onBlur: disableInteractiveMode,\n      ref: getKeyboardResizingRef(colId),\n      role: 'separator',\n      'aria-label': 'Resize column',\n      'aria-valuetext': `${currentWidth} pixels`,\n      'aria-hidden': colId === columnId ? false : true,\n      tabIndex: colId === columnId ? 0 : undefined,\n      ...tabsterAttrs\n    })\n  };\n}","map":{"version":3,"names":["React","ArrowLeft","ArrowRight","Enter","Escape","Shift","Space","useEventCallback","useFocusFinders","useTabsterAttributes","STEP","PRECISION_MODIFIER","PRECISION_FACTOR","useKeyboardResizing","columnResizeState","columnId","setColumnId","useState","onChangeRef","useRef","findPrevFocusable","columnResizeStateRef","useEffect","current","resizeHandleRefs","Map","keyboardHandler","event","width","getColumnWidth","precisionModifier","getModifierState","stopEvent","preventDefault","stopPropagation","key","setColumnWidth","nativeEvent","_resizeHandleRefs_get","_resizeHandleRefs_get_current","get","blur","enableInteractiveMode","useCallback","colId","_onChangeRef_current","call","handle","setAttribute","tabIndex","focus","disableInteractiveMode","el","_findPrevFocusable","removeAttribute","undefined","toggleInteractiveMode","onChange","getKeyboardResizingRef","ref","createRef","set","tabsterAttrs","focusable","ignoreKeydown","getKeyboardResizingProps","currentWidth","onKeyDown","onBlur","role"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-table/lib/hooks/useKeyboardResizing.js"],"sourcesContent":["import * as React from 'react';\nimport { ArrowLeft, ArrowRight, Enter, Escape, Shift, Space } from '@fluentui/keyboard-keys';\nimport { useEventCallback } from '@fluentui/react-utilities';\nimport { useFocusFinders, useTabsterAttributes } from '@fluentui/react-tabster';\nconst STEP = 20;\nconst PRECISION_MODIFIER = Shift;\nconst PRECISION_FACTOR = 1 / 4;\nexport function useKeyboardResizing(columnResizeState) {\n    const [columnId, setColumnId] = React.useState();\n    const onChangeRef = React.useRef();\n    const { findPrevFocusable  } = useFocusFinders();\n    const columnResizeStateRef = React.useRef(columnResizeState);\n    React.useEffect(()=>{\n        columnResizeStateRef.current = columnResizeState;\n    }, [\n        columnResizeState\n    ]);\n    const [resizeHandleRefs] = React.useState(()=>new Map());\n    const keyboardHandler = useEventCallback((event)=>{\n        if (!columnId) {\n            return;\n        }\n        const width = columnResizeStateRef.current.getColumnWidth(columnId);\n        const precisionModifier = event.getModifierState(PRECISION_MODIFIER);\n        const stopEvent = ()=>{\n            event.preventDefault();\n            event.stopPropagation();\n        };\n        switch(event.key){\n            case ArrowLeft:\n                stopEvent();\n                columnResizeStateRef.current.setColumnWidth(event.nativeEvent, {\n                    columnId,\n                    width: width - (precisionModifier ? STEP * PRECISION_FACTOR : STEP)\n                });\n                return;\n            case ArrowRight:\n                stopEvent();\n                columnResizeStateRef.current.setColumnWidth(event.nativeEvent, {\n                    columnId,\n                    width: width + (precisionModifier ? STEP * PRECISION_FACTOR : STEP)\n                });\n                return;\n            case Space:\n            case Enter:\n            case Escape:\n                var // Just blur here, the onBlur handler will take care of the rest (disableInteractiveMode).\n                _resizeHandleRefs_get, _resizeHandleRefs_get_current;\n                stopEvent();\n                (_resizeHandleRefs_get = resizeHandleRefs.get(columnId)) === null || _resizeHandleRefs_get === void 0 ? void 0 : (_resizeHandleRefs_get_current = _resizeHandleRefs_get.current) === null || _resizeHandleRefs_get_current === void 0 ? void 0 : _resizeHandleRefs_get_current.blur();\n                break;\n        }\n    });\n    const enableInteractiveMode = React.useCallback((colId)=>{\n        var _onChangeRef_current, _resizeHandleRefs_get;\n        setColumnId(colId);\n        (_onChangeRef_current = onChangeRef.current) === null || _onChangeRef_current === void 0 ? void 0 : _onChangeRef_current.call(onChangeRef, colId, true);\n        const handle = (_resizeHandleRefs_get = resizeHandleRefs.get(colId)) === null || _resizeHandleRefs_get === void 0 ? void 0 : _resizeHandleRefs_get.current;\n        if (handle) {\n            handle.setAttribute('tabindex', '-1');\n            handle.tabIndex = -1;\n            handle.focus();\n        }\n    }, [\n        resizeHandleRefs\n    ]);\n    const disableInteractiveMode = React.useCallback(()=>{\n        var // Notify the onChange listener that we are disabling interactive mode.\n        _onChangeRef_current, _resizeHandleRefs_get;\n        if (!columnId) {\n            return;\n        }\n        (_onChangeRef_current = onChangeRef.current) === null || _onChangeRef_current === void 0 ? void 0 : _onChangeRef_current.call(onChangeRef, columnId, false);\n        // Find the previous focusable element (table header button) and focus it.\n        const el = (_resizeHandleRefs_get = resizeHandleRefs.get(columnId)) === null || _resizeHandleRefs_get === void 0 ? void 0 : _resizeHandleRefs_get.current;\n        if (el) {\n            var _findPrevFocusable;\n            (_findPrevFocusable = findPrevFocusable(el)) === null || _findPrevFocusable === void 0 ? void 0 : _findPrevFocusable.focus(); // Focus the previous focusable element (header button).\n            el.removeAttribute('tabindex');\n        }\n        setColumnId(undefined);\n    }, [\n        columnId,\n        findPrevFocusable,\n        resizeHandleRefs\n    ]);\n    const toggleInteractiveMode = (colId, onChange)=>{\n        onChangeRef.current = onChange;\n        if (!columnId) {\n            enableInteractiveMode(colId);\n        } else if (colId && columnId !== colId) {\n            enableInteractiveMode(colId);\n            setColumnId(colId);\n        } else {\n            disableInteractiveMode();\n        }\n    };\n    const getKeyboardResizingRef = React.useCallback((colId)=>{\n        const ref = resizeHandleRefs.get(colId) || React.createRef();\n        resizeHandleRefs.set(colId, ref);\n        return ref;\n    }, [\n        resizeHandleRefs\n    ]);\n    // This makes sure the left and right arrow keys are ignored in tabster,\n    // so that they can be used for resizing.\n    const tabsterAttrs = useTabsterAttributes({\n        focusable: {\n            ignoreKeydown: {\n                ArrowLeft: true,\n                ArrowRight: true\n            }\n        }\n    });\n    return {\n        toggleInteractiveMode,\n        columnId,\n        getKeyboardResizingProps: (colId, currentWidth)=>({\n                onKeyDown: keyboardHandler,\n                onBlur: disableInteractiveMode,\n                ref: getKeyboardResizingRef(colId),\n                role: 'separator',\n                'aria-label': 'Resize column',\n                'aria-valuetext': `${currentWidth} pixels`,\n                'aria-hidden': colId === columnId ? false : true,\n                tabIndex: colId === columnId ? 0 : undefined,\n                ...tabsterAttrs\n            })\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}