{"ast":null,"code":"import * as React from 'react';\nimport { omit } from '../utils/omit';\nimport { SLOT_RENDER_FUNCTION_SYMBOL } from './constants';\n/**\n * Given the state and an array of slot names, will break out `slots` and `slotProps`\n * collections.\n *\n * The root is derived from a mix of `components` props and `as` prop.\n *\n * Slots will render as null if they are rendered as primitives with undefined children.\n *\n * The slotProps will always omit the `as` prop within them, and for slots that are string\n * primitives, the props will be filtered according to the slot type by the type system.\n * For example, if the slot is rendered `as: 'a'`, the props will be filtered for acceptable\n * anchor props. Note that this is only enforced at build time by Typescript -- there is no\n * runtime code filtering props in this function.\n *\n * @param state - State including slot definitions\n * @returns An object containing the `slots` map and `slotProps` map.\n */\nexport function getSlots(state) {\n  const slots = {};\n  const slotProps = {};\n  const slotNames = Object.keys(state.components);\n  for (const slotName of slotNames) {\n    const [slot, props] = getSlot(state, slotName);\n    slots[slotName] = slot;\n    slotProps[slotName] = props;\n  }\n  return {\n    slots,\n    slotProps: slotProps\n  };\n}\nfunction getSlot(state, slotName) {\n  var _state_components, _state_components1;\n  const props = state[slotName];\n  if (props === undefined) {\n    return [null, undefined];\n  }\n  const {\n    children,\n    as: asProp,\n    [SLOT_RENDER_FUNCTION_SYMBOL]: renderFunction,\n    ...rest\n  } = props;\n  const slot = ((_state_components = state.components) === null || _state_components === void 0 ? void 0 : _state_components[slotName]) === undefined || typeof state.components[slotName] === 'string' ? asProp || ((_state_components1 = state.components) === null || _state_components1 === void 0 ? void 0 : _state_components1[slotName]) || 'div' : state.components[slotName];\n  if (renderFunction || typeof children === 'function') {\n    const render = renderFunction || children;\n    return [React.Fragment, {\n      children: render(slot, rest)\n    }];\n  }\n  const shouldOmitAsProp = typeof slot === 'string' && asProp;\n  const slotProps = shouldOmitAsProp ? omit(props, ['as']) : props;\n  return [slot, slotProps];\n}","map":{"version":3,"names":["React","omit","SLOT_RENDER_FUNCTION_SYMBOL","getSlots","state","slots","slotProps","slotNames","Object","keys","components","slotName","slot","props","getSlot","_state_components","_state_components1","undefined","children","as","asProp","renderFunction","rest","render","Fragment","shouldOmitAsProp"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-utilities/lib/compose/getSlots.js"],"sourcesContent":["import * as React from 'react';\nimport { omit } from '../utils/omit';\nimport { SLOT_RENDER_FUNCTION_SYMBOL } from './constants';\n/**\n * Given the state and an array of slot names, will break out `slots` and `slotProps`\n * collections.\n *\n * The root is derived from a mix of `components` props and `as` prop.\n *\n * Slots will render as null if they are rendered as primitives with undefined children.\n *\n * The slotProps will always omit the `as` prop within them, and for slots that are string\n * primitives, the props will be filtered according to the slot type by the type system.\n * For example, if the slot is rendered `as: 'a'`, the props will be filtered for acceptable\n * anchor props. Note that this is only enforced at build time by Typescript -- there is no\n * runtime code filtering props in this function.\n *\n * @param state - State including slot definitions\n * @returns An object containing the `slots` map and `slotProps` map.\n */ export function getSlots(state) {\n    const slots = {};\n    const slotProps = {};\n    const slotNames = Object.keys(state.components);\n    for (const slotName of slotNames){\n        const [slot, props] = getSlot(state, slotName);\n        slots[slotName] = slot;\n        slotProps[slotName] = props;\n    }\n    return {\n        slots,\n        slotProps: slotProps\n    };\n}\nfunction getSlot(state, slotName) {\n    var _state_components, _state_components1;\n    const props = state[slotName];\n    if (props === undefined) {\n        return [\n            null,\n            undefined\n        ];\n    }\n    const { children , as: asProp , [SLOT_RENDER_FUNCTION_SYMBOL]: renderFunction , ...rest } = props;\n    const slot = ((_state_components = state.components) === null || _state_components === void 0 ? void 0 : _state_components[slotName]) === undefined || typeof state.components[slotName] === 'string' ? asProp || ((_state_components1 = state.components) === null || _state_components1 === void 0 ? void 0 : _state_components1[slotName]) || 'div' : state.components[slotName];\n    if (renderFunction || typeof children === 'function') {\n        const render = renderFunction || children;\n        return [\n            React.Fragment,\n            {\n                children: render(slot, rest)\n            }\n        ];\n    }\n    const shouldOmitAsProp = typeof slot === 'string' && asProp;\n    const slotProps = shouldOmitAsProp ? omit(props, [\n        'as'\n    ]) : props;\n    return [\n        slot,\n        slotProps\n    ];\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,IAAI,QAAQ,eAAe;AACpC,SAASC,2BAA2B,QAAQ,aAAa;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,SAASC,QAAQA,CAACC,KAAK,EAAE;EAChC,MAAMC,KAAK,GAAG,CAAC,CAAC;EAChB,MAAMC,SAAS,GAAG,CAAC,CAAC;EACpB,MAAMC,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACL,KAAK,CAACM,UAAU,CAAC;EAC/C,KAAK,MAAMC,QAAQ,IAAIJ,SAAS,EAAC;IAC7B,MAAM,CAACK,IAAI,EAAEC,KAAK,CAAC,GAAGC,OAAO,CAACV,KAAK,EAAEO,QAAQ,CAAC;IAC9CN,KAAK,CAACM,QAAQ,CAAC,GAAGC,IAAI;IACtBN,SAAS,CAACK,QAAQ,CAAC,GAAGE,KAAK;EAC/B;EACA,OAAO;IACHR,KAAK;IACLC,SAAS,EAAEA;EACf,CAAC;AACL;AACA,SAASQ,OAAOA,CAACV,KAAK,EAAEO,QAAQ,EAAE;EAC9B,IAAII,iBAAiB,EAAEC,kBAAkB;EACzC,MAAMH,KAAK,GAAGT,KAAK,CAACO,QAAQ,CAAC;EAC7B,IAAIE,KAAK,KAAKI,SAAS,EAAE;IACrB,OAAO,CACH,IAAI,EACJA,SAAS,CACZ;EACL;EACA,MAAM;IAAEC,QAAQ;IAAGC,EAAE,EAAEC,MAAM;IAAG,CAAClB,2BAA2B,GAAGmB,cAAc;IAAG,GAAGC;EAAK,CAAC,GAAGT,KAAK;EACjG,MAAMD,IAAI,GAAG,CAAC,CAACG,iBAAiB,GAAGX,KAAK,CAACM,UAAU,MAAM,IAAI,IAAIK,iBAAiB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACJ,QAAQ,CAAC,MAAMM,SAAS,IAAI,OAAOb,KAAK,CAACM,UAAU,CAACC,QAAQ,CAAC,KAAK,QAAQ,GAAGS,MAAM,KAAK,CAACJ,kBAAkB,GAAGZ,KAAK,CAACM,UAAU,MAAM,IAAI,IAAIM,kBAAkB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,kBAAkB,CAACL,QAAQ,CAAC,CAAC,IAAI,KAAK,GAAGP,KAAK,CAACM,UAAU,CAACC,QAAQ,CAAC;EACnX,IAAIU,cAAc,IAAI,OAAOH,QAAQ,KAAK,UAAU,EAAE;IAClD,MAAMK,MAAM,GAAGF,cAAc,IAAIH,QAAQ;IACzC,OAAO,CACHlB,KAAK,CAACwB,QAAQ,EACd;MACIN,QAAQ,EAAEK,MAAM,CAACX,IAAI,EAAEU,IAAI;IAC/B,CAAC,CACJ;EACL;EACA,MAAMG,gBAAgB,GAAG,OAAOb,IAAI,KAAK,QAAQ,IAAIQ,MAAM;EAC3D,MAAMd,SAAS,GAAGmB,gBAAgB,GAAGxB,IAAI,CAACY,KAAK,EAAE,CAC7C,IAAI,CACP,CAAC,GAAGA,KAAK;EACV,OAAO,CACHD,IAAI,EACJN,SAAS,CACZ;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}