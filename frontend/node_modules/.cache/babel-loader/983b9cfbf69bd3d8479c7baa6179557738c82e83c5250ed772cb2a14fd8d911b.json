{"ast":null,"code":"import * as React from 'react';\nimport { useEventCallback, useSelection } from '@fluentui/react-utilities';\nconst noop = () => undefined;\nexport const defaultTableSelectionState = {\n  allRowsSelected: false,\n  clearRows: noop,\n  deselectRow: noop,\n  isRowSelected: () => false,\n  selectRow: noop,\n  selectedRows: new Set(),\n  someRowsSelected: false,\n  toggleAllRows: noop,\n  toggleRow: noop,\n  selectionMode: 'multiselect'\n};\nexport function useTableSelection(options) {\n  // False positive, these plugin hooks are intended to be run on every render\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return tableState => useTableSelectionState(tableState, options);\n}\nexport function useTableSelectionState(tableState, options) {\n  const {\n    items,\n    getRowId\n  } = tableState;\n  const {\n    selectionMode: selectionMode,\n    defaultSelectedItems,\n    selectedItems,\n    onSelectionChange\n  } = options;\n  const [selected, selectionMethods] = useSelection({\n    selectionMode,\n    defaultSelectedItems,\n    selectedItems,\n    onSelectionChange\n  });\n  // Selection state can contain obselete items (i.e. rows that are removed)\n  const selectableRowIds = React.useMemo(() => {\n    const rowIds = new Set();\n    for (let i = 0; i < items.length; i++) {\n      var _getRowId;\n      rowIds.add((_getRowId = getRowId === null || getRowId === void 0 ? void 0 : getRowId(items[i])) !== null && _getRowId !== void 0 ? _getRowId : i);\n    }\n    return rowIds;\n  }, [items, getRowId]);\n  const allRowsSelected = React.useMemo(() => {\n    if (selectionMode === 'single') {\n      const selectedRow = Array.from(selected)[0];\n      return selectableRowIds.has(selectedRow);\n    }\n    // multiselect case\n    if (selected.size < selectableRowIds.size) {\n      return false;\n    }\n    let res = true;\n    selectableRowIds.forEach(selectableRowId => {\n      if (!selected.has(selectableRowId)) {\n        res = false;\n      }\n    });\n    return res;\n  }, [selectableRowIds, selected, selectionMode]);\n  const someRowsSelected = React.useMemo(() => {\n    if (selected.size <= 0) {\n      return false;\n    }\n    let res = false;\n    selectableRowIds.forEach(selectableRowId => {\n      if (selected.has(selectableRowId)) {\n        res = true;\n      }\n    });\n    return res;\n  }, [selectableRowIds, selected]);\n  const toggleAllRows = useEventCallback(e => {\n    var _getRowId;\n    selectionMethods.toggleAllItems(e, items.map((item, i) => {\n      return (_getRowId = getRowId === null || getRowId === void 0 ? void 0 : getRowId(item)) !== null && _getRowId !== void 0 ? _getRowId : i;\n    }));\n  });\n  const toggleRow = useEventCallback((e, rowId) => selectionMethods.toggleItem(e, rowId));\n  const deselectRow = useEventCallback((e, rowId) => selectionMethods.deselectItem(e, rowId));\n  const selectRow = useEventCallback((e, rowId) => selectionMethods.selectItem(e, rowId));\n  const isRowSelected = rowId => selectionMethods.isSelected(rowId);\n  const clearRows = useEventCallback(e => selectionMethods.clearItems(e));\n  return {\n    ...tableState,\n    selection: {\n      selectionMode,\n      someRowsSelected,\n      allRowsSelected,\n      selectedRows: selected,\n      toggleRow,\n      toggleAllRows,\n      clearRows,\n      deselectRow,\n      selectRow,\n      isRowSelected\n    }\n  };\n}","map":{"version":3,"names":["React","useEventCallback","useSelection","noop","undefined","defaultTableSelectionState","allRowsSelected","clearRows","deselectRow","isRowSelected","selectRow","selectedRows","Set","someRowsSelected","toggleAllRows","toggleRow","selectionMode","useTableSelection","options","tableState","useTableSelectionState","items","getRowId","defaultSelectedItems","selectedItems","onSelectionChange","selected","selectionMethods","selectableRowIds","useMemo","rowIds","i","length","_getRowId","add","selectedRow","Array","from","has","size","res","forEach","selectableRowId","e","toggleAllItems","map","item","rowId","toggleItem","deselectItem","selectItem","isSelected","clearItems","selection"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-table/lib/hooks/useTableSelection.js"],"sourcesContent":["import * as React from 'react';\nimport { useEventCallback, useSelection } from '@fluentui/react-utilities';\nconst noop = ()=>undefined;\nexport const defaultTableSelectionState = {\n    allRowsSelected: false,\n    clearRows: noop,\n    deselectRow: noop,\n    isRowSelected: ()=>false,\n    selectRow: noop,\n    selectedRows: new Set(),\n    someRowsSelected: false,\n    toggleAllRows: noop,\n    toggleRow: noop,\n    selectionMode: 'multiselect'\n};\nexport function useTableSelection(options) {\n    // False positive, these plugin hooks are intended to be run on every render\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return (tableState)=>useTableSelectionState(tableState, options);\n}\nexport function useTableSelectionState(tableState, options) {\n    const { items , getRowId  } = tableState;\n    const { selectionMode: selectionMode , defaultSelectedItems , selectedItems , onSelectionChange  } = options;\n    const [selected, selectionMethods] = useSelection({\n        selectionMode,\n        defaultSelectedItems,\n        selectedItems,\n        onSelectionChange\n    });\n    // Selection state can contain obselete items (i.e. rows that are removed)\n    const selectableRowIds = React.useMemo(()=>{\n        const rowIds = new Set();\n        for(let i = 0; i < items.length; i++){\n            var _getRowId;\n            rowIds.add((_getRowId = getRowId === null || getRowId === void 0 ? void 0 : getRowId(items[i])) !== null && _getRowId !== void 0 ? _getRowId : i);\n        }\n        return rowIds;\n    }, [\n        items,\n        getRowId\n    ]);\n    const allRowsSelected = React.useMemo(()=>{\n        if (selectionMode === 'single') {\n            const selectedRow = Array.from(selected)[0];\n            return selectableRowIds.has(selectedRow);\n        }\n        // multiselect case\n        if (selected.size < selectableRowIds.size) {\n            return false;\n        }\n        let res = true;\n        selectableRowIds.forEach((selectableRowId)=>{\n            if (!selected.has(selectableRowId)) {\n                res = false;\n            }\n        });\n        return res;\n    }, [\n        selectableRowIds,\n        selected,\n        selectionMode\n    ]);\n    const someRowsSelected = React.useMemo(()=>{\n        if (selected.size <= 0) {\n            return false;\n        }\n        let res = false;\n        selectableRowIds.forEach((selectableRowId)=>{\n            if (selected.has(selectableRowId)) {\n                res = true;\n            }\n        });\n        return res;\n    }, [\n        selectableRowIds,\n        selected\n    ]);\n    const toggleAllRows = useEventCallback((e)=>{\n        var _getRowId;\n        selectionMethods.toggleAllItems(e, items.map((item, i)=>{\n            return (_getRowId = getRowId === null || getRowId === void 0 ? void 0 : getRowId(item)) !== null && _getRowId !== void 0 ? _getRowId : i;\n        }));\n    });\n    const toggleRow = useEventCallback((e, rowId)=>selectionMethods.toggleItem(e, rowId));\n    const deselectRow = useEventCallback((e, rowId)=>selectionMethods.deselectItem(e, rowId));\n    const selectRow = useEventCallback((e, rowId)=>selectionMethods.selectItem(e, rowId));\n    const isRowSelected = (rowId)=>selectionMethods.isSelected(rowId);\n    const clearRows = useEventCallback((e)=>selectionMethods.clearItems(e));\n    return {\n        ...tableState,\n        selection: {\n            selectionMode,\n            someRowsSelected,\n            allRowsSelected,\n            selectedRows: selected,\n            toggleRow,\n            toggleAllRows,\n            clearRows,\n            deselectRow,\n            selectRow,\n            isRowSelected\n        }\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}