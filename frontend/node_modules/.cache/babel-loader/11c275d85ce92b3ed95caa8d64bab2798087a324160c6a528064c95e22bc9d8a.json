{"ast":null,"code":"import * as React from 'react';\nimport { canUseDOM } from './canUseDOM';\n/**\n * Default context value to use in case there is no SSRProvider. This is fine for client-only apps.\n *\n * @internal\n */\nexport const defaultSSRContextValue = {\n  current: 0\n};\nexport const SSRContext = /*#__PURE__*/React.createContext(undefined);\n/**\n * @internal\n */\nexport function useSSRContext() {\n  var _React_useContext;\n  return (_React_useContext = React.useContext(SSRContext)) !== null && _React_useContext !== void 0 ? _React_useContext : defaultSSRContextValue;\n}\n/**\n * When using SSR with Fluent UI, applications must be wrapped in an SSRProvider. This ensures that auto generated ids\n * are consistent between the client and server.\n *\n * @public\n */\nexport const SSRProvider = props => {\n  const [value] = React.useState(() => ({\n    current: 0\n  }));\n  return /*#__PURE__*/React.createElement(SSRContext.Provider, {\n    value: value\n  }, props.children);\n};\n/**\n * Returns whether the component is currently being server side rendered or hydrated on the client. Can be used to delay\n * browser-specific rendering until after hydration. May cause re-renders on a client when is used within SSRProvider.\n */\nexport function useIsSSR() {\n  const isInSSRContext = useSSRContext() !== defaultSSRContextValue;\n  const [isSSR, setIsSSR] = React.useState(isInSSRContext);\n  // If we are rendering in a non-DOM environment, and there's no SSRProvider, provide a warning to hint to the\n  // developer to add one.\n  if (process.env.NODE_ENV !== 'production') {\n    if (!isInSSRContext && !canUseDOM()) {\n      // eslint-disable-next-line no-console\n      console.error(['@fluentui/react-components: ', 'When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are ' + 'generated between the client and server.', '\\n', '\\n', 'Check documentation at https://aka.ms/fluentui-ssr'].join(''));\n    }\n  }\n  // If on the client, and the component was initially server rendered, then schedule a layout effect to update the\n  // component after hydration.\n  if (canUseDOM() && isInSSRContext) {\n    // This if statement technically breaks the rules of hooks, but is safe because the condition never changes after\n    // mounting.\n    // eslint-disable-next-line\n    React.useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  }\n  return isSSR;\n}","map":{"version":3,"names":["React","canUseDOM","defaultSSRContextValue","current","SSRContext","createContext","undefined","useSSRContext","_React_useContext","useContext","SSRProvider","props","value","useState","createElement","Provider","children","useIsSSR","isInSSRContext","isSSR","setIsSSR","process","env","NODE_ENV","console","error","join","useLayoutEffect"],"sources":["/Users/suketupatel/Desktop/application/frontend/node_modules/@fluentui/react-utilities/lib/ssr/SSRContext.js"],"sourcesContent":["import * as React from 'react';\nimport { canUseDOM } from './canUseDOM';\n/**\n * Default context value to use in case there is no SSRProvider. This is fine for client-only apps.\n *\n * @internal\n */ export const defaultSSRContextValue = {\n    current: 0\n};\nexport const SSRContext = /*#__PURE__*/ React.createContext(undefined);\n/**\n * @internal\n */ export function useSSRContext() {\n    var _React_useContext;\n    return (_React_useContext = React.useContext(SSRContext)) !== null && _React_useContext !== void 0 ? _React_useContext : defaultSSRContextValue;\n}\n/**\n * When using SSR with Fluent UI, applications must be wrapped in an SSRProvider. This ensures that auto generated ids\n * are consistent between the client and server.\n *\n * @public\n */ export const SSRProvider = (props)=>{\n    const [value] = React.useState(()=>({\n            current: 0\n        }));\n    return /*#__PURE__*/ React.createElement(SSRContext.Provider, {\n        value: value\n    }, props.children);\n};\n/**\n * Returns whether the component is currently being server side rendered or hydrated on the client. Can be used to delay\n * browser-specific rendering until after hydration. May cause re-renders on a client when is used within SSRProvider.\n */ export function useIsSSR() {\n    const isInSSRContext = useSSRContext() !== defaultSSRContextValue;\n    const [isSSR, setIsSSR] = React.useState(isInSSRContext);\n    // If we are rendering in a non-DOM environment, and there's no SSRProvider, provide a warning to hint to the\n    // developer to add one.\n    if (process.env.NODE_ENV !== 'production') {\n        if (!isInSSRContext && !canUseDOM()) {\n            // eslint-disable-next-line no-console\n            console.error([\n                '@fluentui/react-components: ',\n                'When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are ' + 'generated between the client and server.',\n                '\\n',\n                '\\n',\n                'Check documentation at https://aka.ms/fluentui-ssr'\n            ].join(''));\n        }\n    }\n    // If on the client, and the component was initially server rendered, then schedule a layout effect to update the\n    // component after hydration.\n    if (canUseDOM() && isInSSRContext) {\n        // This if statement technically breaks the rules of hooks, but is safe because the condition never changes after\n        // mounting.\n        // eslint-disable-next-line\n        React.useLayoutEffect(()=>{\n            setIsSSR(false);\n        }, []);\n    }\n    return isSSR;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,QAAQ,aAAa;AACvC;AACA;AACA;AACA;AACA;AAAI,OAAO,MAAMC,sBAAsB,GAAG;EACtCC,OAAO,EAAE;AACb,CAAC;AACD,OAAO,MAAMC,UAAU,GAAG,aAAcJ,KAAK,CAACK,aAAa,CAACC,SAAS,CAAC;AACtE;AACA;AACA;AAAI,OAAO,SAASC,aAAaA,CAAA,EAAG;EAChC,IAAIC,iBAAiB;EACrB,OAAO,CAACA,iBAAiB,GAAGR,KAAK,CAACS,UAAU,CAACL,UAAU,CAAC,MAAM,IAAI,IAAII,iBAAiB,KAAK,KAAK,CAAC,GAAGA,iBAAiB,GAAGN,sBAAsB;AACnJ;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,OAAO,MAAMQ,WAAW,GAAIC,KAAK,IAAG;EACpC,MAAM,CAACC,KAAK,CAAC,GAAGZ,KAAK,CAACa,QAAQ,CAAC,OAAK;IAC5BV,OAAO,EAAE;EACb,CAAC,CAAC,CAAC;EACP,OAAO,aAAcH,KAAK,CAACc,aAAa,CAACV,UAAU,CAACW,QAAQ,EAAE;IAC1DH,KAAK,EAAEA;EACX,CAAC,EAAED,KAAK,CAACK,QAAQ,CAAC;AACtB,CAAC;AACD;AACA;AACA;AACA;AAAI,OAAO,SAASC,QAAQA,CAAA,EAAG;EAC3B,MAAMC,cAAc,GAAGX,aAAa,CAAC,CAAC,KAAKL,sBAAsB;EACjE,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,KAAK,CAACa,QAAQ,CAACK,cAAc,CAAC;EACxD;EACA;EACA,IAAIG,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACvC,IAAI,CAACL,cAAc,IAAI,CAACjB,SAAS,CAAC,CAAC,EAAE;MACjC;MACAuB,OAAO,CAACC,KAAK,CAAC,CACV,8BAA8B,EAC9B,yGAAyG,GAAG,0CAA0C,EACtJ,IAAI,EACJ,IAAI,EACJ,oDAAoD,CACvD,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;IACf;EACJ;EACA;EACA;EACA,IAAIzB,SAAS,CAAC,CAAC,IAAIiB,cAAc,EAAE;IAC/B;IACA;IACA;IACAlB,KAAK,CAAC2B,eAAe,CAAC,MAAI;MACtBP,QAAQ,CAAC,KAAK,CAAC;IACnB,CAAC,EAAE,EAAE,CAAC;EACV;EACA,OAAOD,KAAK;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}