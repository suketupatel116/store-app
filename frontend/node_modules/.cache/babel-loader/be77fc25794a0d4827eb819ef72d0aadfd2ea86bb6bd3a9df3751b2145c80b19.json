{"ast":null,"code":"import './constants.esm.js';\nimport { debugData } from './devtools/store.esm.js';\nimport { isDevToolsEnabled } from './devtools/isDevToolsEnabled.esm.js';\nimport { getSourceURLfromError } from './devtools/getSourceURLfromError.esm.js';\nimport { insertionFactory } from './insertionFactory.esm.js';\nimport { resolveStyleRulesForSlots } from './resolveStyleRulesForSlots.esm.js';\nimport { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots.esm.js';\nfunction makeStyles(stylesBySlots) {\n  let factory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : insertionFactory;\n  const insertStyles = factory();\n  let classesMapBySlot = null;\n  let cssRules = null;\n  let ltrClassNamesForSlots = null;\n  let rtlClassNamesForSlots = null;\n  let sourceURL;\n  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n    sourceURL = getSourceURLfromError();\n  }\n  function computeClasses(options) {\n    const {\n      dir,\n      renderer\n    } = options;\n    if (classesMapBySlot === null) {\n      [classesMapBySlot, cssRules] = resolveStyleRulesForSlots(stylesBySlots);\n    }\n    const isLTR = dir === 'ltr';\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n    insertStyles(renderer, cssRules);\n    const classNamesForSlots = isLTR ? ltrClassNamesForSlots : rtlClassNamesForSlots;\n    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n      debugData.addSequenceDetails(classNamesForSlots, sourceURL);\n    }\n    return classNamesForSlots;\n  }\n  return computeClasses;\n}\nexport { makeStyles };","map":{"version":3,"names":["makeStyles","stylesBySlots","factory","arguments","length","undefined","insertionFactory","insertStyles","classesMapBySlot","cssRules","ltrClassNamesForSlots","rtlClassNamesForSlots","sourceURL","process","env","NODE_ENV","isDevToolsEnabled","getSourceURLfromError","computeClasses","options","dir","renderer","resolveStyleRulesForSlots","isLTR","reduceToClassNameForSlots","classNamesForSlots","debugData","addSequenceDetails"],"sources":["/Users/suketupatel/Desktop/application/frontend/packages/core/src/makeStyles.ts"],"sourcesContent":["import { debugData, isDevToolsEnabled, getSourceURLfromError } from './devtools';\nimport { insertionFactory } from './insertionFactory';\nimport { resolveStyleRulesForSlots } from './resolveStyleRulesForSlots';\nimport { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots';\nimport type { CSSClassesMapBySlot, CSSRulesByBucket, GriffelRenderer, StylesBySlots } from './types';\nimport type { GriffelInsertionFactory } from './types';\n\nexport interface MakeStylesOptions {\n  dir: 'ltr' | 'rtl';\n  renderer: GriffelRenderer;\n}\n\nexport function makeStyles<Slots extends string | number>(\n  stylesBySlots: StylesBySlots<Slots>,\n  factory: GriffelInsertionFactory = insertionFactory,\n) {\n  const insertStyles = factory();\n\n  let classesMapBySlot: CSSClassesMapBySlot<Slots> | null = null;\n  let cssRules: CSSRulesByBucket | null = null;\n\n  let ltrClassNamesForSlots: Record<Slots, string> | null = null;\n  let rtlClassNamesForSlots: Record<Slots, string> | null = null;\n\n  let sourceURL: string | undefined;\n  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n    sourceURL = getSourceURLfromError();\n  }\n\n  function computeClasses(options: MakeStylesOptions): Record<Slots, string> {\n    const { dir, renderer } = options;\n\n    if (classesMapBySlot === null) {\n      [classesMapBySlot, cssRules] = resolveStyleRulesForSlots(stylesBySlots);\n    }\n\n    const isLTR = dir === 'ltr';\n\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n\n    insertStyles(renderer, cssRules!);\n\n    const classNamesForSlots = isLTR\n      ? (ltrClassNamesForSlots as Record<Slots, string>)\n      : (rtlClassNamesForSlots as Record<Slots, string>);\n\n    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n      debugData.addSequenceDetails(classNamesForSlots!, sourceURL);\n    }\n\n    return classNamesForSlots;\n  }\n\n  return computeClasses;\n}\n"],"mappings":";;;;;;;SAYgBA,UAAUA,CACxBC,aAAmC,EACgB;EAAA,IAAnDC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmCG,gBAAgB;EAEnD,MAAMC,YAAY,GAAGL,OAAO,EAAE;EAE9B,IAAIM,gBAAgB,GAAsC,IAAI;EAC9D,IAAIC,QAAQ,GAA4B,IAAI;EAE5C,IAAIC,qBAAqB,GAAiC,IAAI;EAC9D,IAAIC,qBAAqB,GAAiC,IAAI;EAE9D,IAAIC,SAA6B;EACjC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIC,iBAAiB,EAAE;IAC9DJ,SAAS,GAAGK,qBAAqB,EAAE;;EAGrC,SAASC,cAAcA,CAACC,OAA0B;IAChD,MAAM;MAAEC,GAAG;MAAEC;KAAU,GAAGF,OAAO;IAEjC,IAAIX,gBAAgB,KAAK,IAAI,EAAE;MAC7B,CAACA,gBAAgB,EAAEC,QAAQ,CAAC,GAAGa,yBAAyB,CAACrB,aAAa,CAAC;;IAGzE,MAAMsB,KAAK,GAAGH,GAAG,KAAK,KAAK;IAE3B,IAAIG,KAAK,EAAE;MACT,IAAIb,qBAAqB,KAAK,IAAI,EAAE;QAClCA,qBAAqB,GAAGc,yBAAyB,CAAChB,gBAAgB,EAAEY,GAAG,CAAC;;KAE3E,MAAM;MACL,IAAIT,qBAAqB,KAAK,IAAI,EAAE;QAClCA,qBAAqB,GAAGa,yBAAyB,CAAChB,gBAAgB,EAAEY,GAAG,CAAC;;;IAI5Eb,YAAY,CAACc,QAAQ,EAAEZ,QAAS,CAAC;IAEjC,MAAMgB,kBAAkB,GAAGF,KAAK,GAC3Bb,qBAA+C,GAC/CC,qBAA+C;IAEpD,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIC,iBAAiB,EAAE;MAC9DU,SAAS,CAACC,kBAAkB,CAACF,kBAAmB,EAAEb,SAAS,CAAC;;IAG9D,OAAOa,kBAAkB;;EAG3B,OAAOP,cAAc;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}