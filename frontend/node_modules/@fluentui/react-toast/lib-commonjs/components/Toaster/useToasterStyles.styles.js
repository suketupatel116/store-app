"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    toasterClassNames: ()=>toasterClassNames,
    useToasterStyles_unstable: ()=>useToasterStyles_unstable
});
const _react = require("@griffel/react");
const _index = require("../../state/index");
var _state_bottomStart, _state_bottomEnd, _state_topStart, _state_topEnd;
const toasterClassNames = {
    root: 'fui-Toaster'
};
/**
 * Styles for the root slot
 */ const useRootBaseClassName = /*#__PURE__*/ (0, _react["__resetStyles"])("r3hfdjz", null, [
    ".r3hfdjz{position:fixed;width:292px;pointer-events:none;}"
]);
const useToasterStyles_unstable = (state)=>{
    const rootBaseClassName = useRootBaseClassName();
    const className = (0, _react.mergeClasses)(toasterClassNames.root, rootBaseClassName, state.root.className);
    if (state.bottomStart) {
        state.bottomStart.className = className;
        var _style;
        (_style = (_state_bottomStart = state.bottomStart).style) !== null && _style !== void 0 ? _style : _state_bottomStart.style = {};
        Object.assign(state.bottomStart.style, (0, _index.getPositionStyles)(_index.TOAST_POSITIONS.bottomStart, state.dir, state.offset));
    }
    if (state.bottomEnd) {
        state.bottomEnd.className = className;
        var _style1;
        (_style1 = (_state_bottomEnd = state.bottomEnd).style) !== null && _style1 !== void 0 ? _style1 : _state_bottomEnd.style = {};
        Object.assign(state.bottomEnd.style, (0, _index.getPositionStyles)(_index.TOAST_POSITIONS.bottomEnd, state.dir, state.offset));
    }
    if (state.topStart) {
        state.topStart.className = className;
        var _style2;
        (_style2 = (_state_topStart = state.topStart).style) !== null && _style2 !== void 0 ? _style2 : _state_topStart.style = {};
        Object.assign(state.topStart.style, (0, _index.getPositionStyles)(_index.TOAST_POSITIONS.topStart, state.dir, state.offset));
    }
    if (state.topEnd) {
        state.topEnd.className = className;
        var _style3;
        (_style3 = (_state_topEnd = state.topEnd).style) !== null && _style3 !== void 0 ? _style3 : _state_topEnd.style = {};
        Object.assign(state.topEnd.style, (0, _index.getPositionStyles)(_index.TOAST_POSITIONS.topEnd, state.dir, state.offset));
    }
    return state;
}; //# sourceMappingURL=useToasterStyles.styles.js.map
