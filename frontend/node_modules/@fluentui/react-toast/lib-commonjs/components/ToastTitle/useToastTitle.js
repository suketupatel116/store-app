"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useToastTitle_unstable", {
    enumerable: true,
    get: ()=>useToastTitle_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactIcons = require("@fluentui/react-icons");
const _reactUtilities = require("@fluentui/react-utilities");
const _reactSharedContexts = require("@fluentui/react-shared-contexts");
const _toastContainerContext = require("../../contexts/toastContainerContext");
const useToastTitle_unstable = (props, ref)=>{
    const { intent , titleId  } = (0, _toastContainerContext.useToastContainerContext)();
    const backgroundAppearance = (0, _reactSharedContexts.useBackgroundAppearance)();
    /** Determine the role and media to render based on the intent */ let defaultIcon;
    switch(intent){
        case 'success':
            defaultIcon = /*#__PURE__*/ _react.createElement(_reactIcons.CheckmarkCircleFilled, null);
            break;
        case 'error':
            defaultIcon = /*#__PURE__*/ _react.createElement(_reactIcons.DismissCircleFilled, null);
            break;
        case 'warning':
            defaultIcon = /*#__PURE__*/ _react.createElement(_reactIcons.WarningFilled, null);
            break;
        case 'info':
            defaultIcon = /*#__PURE__*/ _react.createElement(_reactIcons.InfoFilled, null);
            break;
    }
    return {
        action: (0, _reactUtilities.resolveShorthand)(props.action),
        components: {
            root: 'div',
            media: 'div',
            action: 'div'
        },
        media: (0, _reactUtilities.resolveShorthand)(props.media, {
            required: !!intent,
            defaultProps: {
                children: defaultIcon
            }
        }),
        root: (0, _reactUtilities.getNativeElementProps)('div', {
            ref,
            children: props.children,
            id: titleId,
            ...props
        }),
        intent,
        backgroundAppearance
    };
};
