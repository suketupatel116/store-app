{"version":3,"sources":["useToastController.ts"],"sourcesContent":["import * as React from 'react';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport {\n  dispatchToast as dispatchToastVanilla,\n  dismissToast as dismissToastVanilla,\n  dismissAllToasts as dismissAllToastsVanilla,\n  updateToast as updateToastVanilla,\n  playToast as playToastVanilla,\n  pauseToast as pauseToastVanilla,\n} from './vanilla';\nimport { DispatchToastOptions, ToastId, ToasterId, UpdateToastOptions } from './types';\n\nconst noop = () => undefined;\n\n/**\n * @param toasterId - If an id is provided all imperative methods control that specific toaster\n * @returns Imperative methods to control toasts\n */\nexport function useToastController(toasterId?: ToasterId) {\n  const { targetDocument } = useFluent();\n\n  return React.useMemo(() => {\n    if (!targetDocument) {\n      return {\n        dispatchToast: noop,\n        dismissToast: noop,\n        dismissAllToasts: noop,\n        updateToast: noop,\n        pauseToast: noop,\n        playToast: noop,\n      };\n    }\n\n    return {\n      dispatchToast: (content: React.ReactNode, options?: DispatchToastOptions) => {\n        dispatchToastVanilla(content, { ...options, toasterId, data: { root: options?.root } }, targetDocument);\n      },\n      dismissToast: (toastId: ToastId) => {\n        dismissToastVanilla(toastId, toasterId, targetDocument);\n      },\n      dismissAllToasts: () => {\n        dismissAllToastsVanilla(toasterId, targetDocument);\n      },\n      updateToast: (options: UpdateToastOptions) => {\n        updateToastVanilla({ ...options, data: { root: options.root }, toasterId }, targetDocument);\n      },\n      pauseToast: (toastId: ToastId) => {\n        pauseToastVanilla(toastId, toasterId, targetDocument);\n      },\n      playToast: (toastId: ToastId) => {\n        playToastVanilla(toastId, toasterId, targetDocument);\n      },\n    };\n  }, [targetDocument, toasterId]);\n}\n"],"names":["React","useFluent_unstable","useFluent","dispatchToast","dispatchToastVanilla","dismissToast","dismissToastVanilla","dismissAllToasts","dismissAllToastsVanilla","updateToast","updateToastVanilla","playToast","playToastVanilla","pauseToast","pauseToastVanilla","noop","undefined","useToastController","toasterId","targetDocument","useMemo","content","options","data","root","toastId"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAC/B,SAASC,sBAAsBC,SAAS,QAAQ,kCAAkC;AAClF,SACEC,iBAAiBC,oBAAoB,EACrCC,gBAAgBC,mBAAmB,EACnCC,oBAAoBC,uBAAuB,EAC3CC,eAAeC,kBAAkB,EACjCC,aAAaC,gBAAgB,EAC7BC,cAAcC,iBAAiB,QAC1B,YAAY;AAGnB,MAAMC,OAAO,IAAMC;AAEnB;;;CAGC,GACD,OAAO,SAASC,mBAAmBC,SAAqB,EAAE;IACxD,MAAM,EAAEC,eAAc,EAAE,GAAGjB;IAE3B,OAAOF,MAAMoB,OAAO,CAAC,IAAM;QACzB,IAAI,CAACD,gBAAgB;YACnB,OAAO;gBACLhB,eAAeY;gBACfV,cAAcU;gBACdR,kBAAkBQ;gBAClBN,aAAaM;gBACbF,YAAYE;gBACZJ,WAAWI;YACb;QACF,CAAC;QAED,OAAO;YACLZ,eAAe,CAACkB,SAA0BC,UAAmC;gBAC3ElB,qBAAqBiB,SAAS;oBAAE,GAAGC,OAAO;oBAAEJ;oBAAWK,MAAM;wBAAEC,MAAMF,oBAAAA,qBAAAA,KAAAA,IAAAA,QAASE,IAAI;oBAAC;gBAAE,GAAGL;YAC1F;YACAd,cAAc,CAACoB,UAAqB;gBAClCnB,oBAAoBmB,SAASP,WAAWC;YAC1C;YACAZ,kBAAkB,IAAM;gBACtBC,wBAAwBU,WAAWC;YACrC;YACAV,aAAa,CAACa,UAAgC;gBAC5CZ,mBAAmB;oBAAE,GAAGY,OAAO;oBAAEC,MAAM;wBAAEC,MAAMF,QAAQE,IAAI;oBAAC;oBAAGN;gBAAU,GAAGC;YAC9E;YACAN,YAAY,CAACY,UAAqB;gBAChCX,kBAAkBW,SAASP,WAAWC;YACxC;YACAR,WAAW,CAACc,UAAqB;gBAC/Bb,iBAAiBa,SAASP,WAAWC;YACvC;QACF;IACF,GAAG;QAACA;QAAgBD;KAAU;AAChC,CAAC"}