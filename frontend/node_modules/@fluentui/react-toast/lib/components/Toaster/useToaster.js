import * as React from 'react';
import { getNativeElementProps, isHTMLElement, resolveShorthand } from '@fluentui/react-utilities';
import { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';
import { TOAST_POSITIONS, useToaster } from '../../state';
import { ToastContainer } from '../ToastContainer';
/**
 * Create the state required to render Toaster.
 *
 * @param props - props from this instance of Toaster
 */ export const useToaster_unstable = (props)=>{
    const { offset , announce: announceProp , ...rest } = props;
    const announceRef = React.useRef(()=>null);
    const { toastsToRender , isToastVisible , pauseAllToasts , playAllToasts , tryRestoreFocus  } = useToaster(rest);
    const announce = React.useCallback((message, options)=>announceRef.current(message, options), []);
    const { dir  } = useFluent();
    const rootProps = getNativeElementProps('div', rest);
    // Adds native HTML focusin/focusout listeners
    // https://github.com/facebook/react/issues/25194
    const focusListenerRef = React.useCallback((el)=>{
        if (el) {
            el.addEventListener('focusin', (e)=>{
                if (isHTMLElement(e.currentTarget) && !e.currentTarget.contains(isHTMLElement(e.relatedTarget) ? e.relatedTarget : null)) {
                    pauseAllToasts();
                }
            });
            el.addEventListener('focusout', (e)=>{
                if (isHTMLElement(e.currentTarget) && !e.currentTarget.contains(isHTMLElement(e.relatedTarget) ? e.relatedTarget : null)) {
                    playAllToasts();
                    tryRestoreFocus();
                }
            });
        }
    }, [
        playAllToasts,
        pauseAllToasts,
        tryRestoreFocus
    ]);
    const createPositionSlot = (toastPosition)=>{
        var _toastsToRender_get;
        return resolveShorthand(toastsToRender.has(toastPosition) ? rootProps : null, {
            defaultProps: {
                ref: focusListenerRef,
                children: (_toastsToRender_get = toastsToRender.get(toastPosition)) === null || _toastsToRender_get === void 0 ? void 0 : _toastsToRender_get.map((toast)=>/*#__PURE__*/ React.createElement(ToastContainer, {
                        ...toast,
                        tryRestoreFocus: tryRestoreFocus,
                        intent: toast.intent,
                        announce: announce,
                        key: toast.toastId,
                        visible: isToastVisible(toast.toastId)
                    }, toast.content)),
                'data-toaster-position': toastPosition
            }
        });
    };
    return {
        dir,
        components: {
            root: 'div',
            bottomStart: 'div',
            bottomEnd: 'div',
            topStart: 'div',
            topEnd: 'div'
        },
        root: resolveShorthand(rootProps, {
            required: true
        }),
        bottomStart: createPositionSlot(TOAST_POSITIONS.bottomStart),
        bottomEnd: createPositionSlot(TOAST_POSITIONS.bottomEnd),
        topStart: createPositionSlot(TOAST_POSITIONS.topStart),
        topEnd: createPositionSlot(TOAST_POSITIONS.topEnd),
        announceRef,
        offset,
        announce: announceProp !== null && announceProp !== void 0 ? announceProp : announce,
        renderAriaLive: !announceProp
    };
};
