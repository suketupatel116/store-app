import * as React from 'react';
import { resolveShorthand, useMergedRefs } from '@fluentui/react-utilities';
import { useVirtualizer_unstable } from '../Virtualizer/useVirtualizer';
import { useDynamicVirtualizerMeasure } from '../../Hooks';
import { useVirtualizerContextState_unstable, scrollToItemDynamic } from '../../Utilities';
import { useImperativeHandle } from 'react';
export function useVirtualizerScrollViewDynamic_unstable(props) {
    const contextState = useVirtualizerContextState_unstable(props.virtualizerContext);
    const { imperativeRef , axis ='vertical' , reversed , imperativeVirtualizerRef  } = props;
    var _props_axis, _contextState_contextIndex;
    const { virtualizerLength , bufferItems , bufferSize , scrollRef  } = useDynamicVirtualizerMeasure({
        defaultItemSize: props.itemSize,
        direction: (_props_axis = props.axis) !== null && _props_axis !== void 0 ? _props_axis : 'vertical',
        getItemSize: props.getItemSize,
        currentIndex: (_contextState_contextIndex = contextState === null || contextState === void 0 ? void 0 : contextState.contextIndex) !== null && _contextState_contextIndex !== void 0 ? _contextState_contextIndex : 0,
        numItems: props.numItems
    });
    // Store the virtualizer length as a ref for imperative ref access
    const virtualizerLengthRef = React.useRef(virtualizerLength);
    if (virtualizerLengthRef.current !== virtualizerLength) {
        virtualizerLengthRef.current = virtualizerLength;
    }
    const scrollViewRef = useMergedRefs(React.useRef(null), scrollRef);
    const scrollCallbackRef = React.useRef(null);
    const _imperativeVirtualizerRef = useMergedRefs(React.useRef(null), imperativeVirtualizerRef);
    useImperativeHandle(imperativeRef, ()=>{
        var _imperativeVirtualizerRef_current;
        return {
            scrollTo (index, behavior = 'auto', callback) {
                scrollCallbackRef.current = callback !== null && callback !== void 0 ? callback : null;
                if (_imperativeVirtualizerRef.current) {
                    var _imperativeVirtualizerRef_current;
                    const progressiveSizes = _imperativeVirtualizerRef.current.progressiveSizes.current;
                    const totalSize = progressiveSizes && (progressiveSizes === null || progressiveSizes === void 0 ? void 0 : progressiveSizes.length) > 0 ? progressiveSizes[Math.max(progressiveSizes.length - 1, 0)] : 0;
                    _imperativeVirtualizerRef.current.setFlaggedIndex(index);
                    scrollToItemDynamic({
                        index,
                        itemSizes: (_imperativeVirtualizerRef_current = _imperativeVirtualizerRef.current) === null || _imperativeVirtualizerRef_current === void 0 ? void 0 : _imperativeVirtualizerRef_current.nodeSizes,
                        totalSize,
                        scrollViewRef,
                        axis,
                        reversed,
                        behavior
                    });
                }
            },
            currentIndex: (_imperativeVirtualizerRef_current = _imperativeVirtualizerRef.current) === null || _imperativeVirtualizerRef_current === void 0 ? void 0 : _imperativeVirtualizerRef_current.currentIndex,
            virtualizerLength: virtualizerLengthRef
        };
    }, [
        axis,
        scrollViewRef,
        reversed,
        _imperativeVirtualizerRef
    ]);
    const handleRenderedIndex = (index)=>{
        if (scrollCallbackRef.current) {
            scrollCallbackRef.current(index);
        }
    };
    const virtualizerState = useVirtualizer_unstable({
        ...props,
        virtualizerLength,
        bufferItems,
        bufferSize,
        scrollViewRef,
        virtualizerContext: contextState,
        imperativeVirtualizerRef: _imperativeVirtualizerRef,
        onRenderedFlaggedIndex: handleRenderedIndex
    });
    return {
        ...virtualizerState,
        components: {
            ...virtualizerState.components,
            container: 'div'
        },
        container: resolveShorthand(props.container, {
            required: true,
            defaultProps: {
                ref: scrollViewRef
            }
        })
    };
}
