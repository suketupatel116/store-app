{"version":3,"sources":["useVirtualizer.ts"],"sourcesContent":["import type { ReactNode } from 'react';\nimport type { VirtualizerProps, VirtualizerState } from './Virtualizer.types';\n\nimport { useEffect, useRef, useCallback, useReducer, useImperativeHandle, useState } from 'react';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport { resolveShorthand } from '@fluentui/react-utilities';\nimport { flushSync } from 'react-dom';\nimport { useVirtualizerContextState_unstable } from '../../Utilities';\nimport { renderVirtualizerChildPlaceholder } from './renderVirtualizer';\n\nexport function useVirtualizer_unstable(props: VirtualizerProps): VirtualizerState {\n  const {\n    itemSize,\n    numItems,\n    virtualizerLength,\n    children: renderChild,\n    getItemSize,\n    bufferItems = Math.round(virtualizerLength / 4.0),\n    bufferSize = Math.floor(bufferItems / 2.0) * itemSize,\n    scrollViewRef,\n    axis = 'vertical',\n    reversed = false,\n    virtualizerContext,\n    onRenderedFlaggedIndex,\n    imperativeVirtualizerRef,\n  } = props;\n\n  /* The context is optional, it's useful for injecting additional index logic, or performing uniform state updates*/\n  const _virtualizerContext = useVirtualizerContextState_unstable(virtualizerContext);\n\n  // We use this ref as a constant source to access the virtualizer's state imperatively\n  const actualIndexRef = useRef<number>(_virtualizerContext.contextIndex);\n  if (actualIndexRef.current !== _virtualizerContext.contextIndex) {\n    actualIndexRef.current = _virtualizerContext.contextIndex;\n  }\n  const flaggedIndex = useRef<number | null>(null);\n\n  const actualIndex = _virtualizerContext.contextIndex;\n  const setActualIndex = _virtualizerContext.setContextIndex;\n\n  // Store ref to before padding element\n  const beforeElementRef = useRef<Element | null>(null);\n\n  // Store ref to before padding element\n  const afterElementRef = useRef<Element | null>(null);\n\n  // We need to store an array to track dynamic sizes, we can use this to incrementally update changes\n  const childSizes = useRef<number[]>(new Array<number>(getItemSize ? numItems : 0));\n\n  /* We keep track of the progressive sizing/placement down the list,\n  this helps us skip re-calculations unless children/size changes */\n  const childProgressiveSizes = useRef<number[]>(new Array<number>(getItemSize ? numItems : 0));\n\n  // The internal tracking REF for child array (updates often).\n  const childArray = useRef<ReactNode[]>(new Array(virtualizerLength));\n\n  // We want to be methodical about updating the render with child reference array\n  const forceUpdate = useReducer(() => ({}), {})[1];\n\n  const horizontal = axis === 'horizontal';\n\n  const populateSizeArrays = () => {\n    if (!getItemSize) {\n      // Static sizes, never mind!\n      return;\n    }\n\n    if (numItems !== childSizes.current.length) {\n      childSizes.current = new Array<number>(numItems);\n    }\n\n    if (numItems !== childProgressiveSizes.current.length) {\n      childProgressiveSizes.current = new Array<number>(numItems);\n    }\n\n    for (let index = 0; index < numItems; index++) {\n      childSizes.current[index] = getItemSize(index);\n      if (index === 0) {\n        childProgressiveSizes.current[index] = childSizes.current[index];\n      } else {\n        childProgressiveSizes.current[index] = childProgressiveSizes.current[index - 1] + childSizes.current[index];\n      }\n    }\n  };\n\n  const [isScrolling, setIsScrolling] = useState<boolean>(false);\n  const scrollTimer = useRef<ReturnType<typeof setTimeout> | null>();\n  const scrollCounter = useRef<number>(0);\n\n  const initializeScrollingTimer = () => {\n    /*\n     * This can be considered the 'velocity' required to start 'isScrolling'\n     * INIT_SCROLL_FLAG_REQ: Number of renders required to activate isScrolling\n     * INIT_SCROLL_FLAG_DELAY: Amount of time (ms) before current number of renders is reset\n     *  - Maybe we should let users customize these in the future.\n     */\n    const INIT_SCROLL_FLAG_REQ = 10;\n    const INIT_SCROLL_FLAG_DELAY = 100;\n\n    scrollCounter.current++;\n    if (scrollCounter.current >= INIT_SCROLL_FLAG_REQ) {\n      setIsScrolling(true);\n    }\n    if (scrollTimer.current) {\n      clearTimeout(scrollTimer.current);\n    }\n    scrollTimer.current = setTimeout(() => {\n      setIsScrolling(false);\n      scrollCounter.current = 0;\n    }, INIT_SCROLL_FLAG_DELAY);\n  };\n\n  useEffect(() => {\n    initializeScrollingTimer();\n  }, [actualIndex]);\n\n  const batchUpdateNewIndex = (index: number) => {\n    // Local updates\n    updateChildRows(index);\n    updateCurrentItemSizes(index);\n\n    // Set before 'setActualIndex' call\n    // If it changes before render, or injected via context, re-render will update ref.\n    actualIndexRef.current = index;\n\n    // State setters\n    setActualIndex(index);\n  };\n\n  // Observe intersections of virtualized components\n  const { setObserverList } = useIntersectionObserver(\n    (entries: IntersectionObserverEntry[], observer: IntersectionObserver) => {\n      /* Sanity check - do we even need virtualization? */\n      if (virtualizerLength > numItems) {\n        if (actualIndex !== 0) {\n          batchUpdateNewIndex(0);\n        }\n        // No-op\n        return;\n      }\n\n      /* IO initiates this function when needed (bookend entering view) */\n      let measurementPos = 0;\n      let bufferCount = bufferItems;\n\n      // Grab latest entry that is intersecting\n      const latestEntry =\n        entries.length === 1\n          ? entries[0]\n          : entries\n              .sort((entry1, entry2) => entry2.time - entry1.time)\n              .find(entry => {\n                return entry.intersectionRatio > 0;\n              });\n\n      if (!latestEntry) {\n        // If we don't find an intersecting area, ignore for now.\n        return;\n      }\n\n      if (latestEntry.target === afterElementRef.current) {\n        // We need to inverse the buffer count\n        bufferCount = virtualizerLength - bufferItems;\n        measurementPos = reversed ? calculateAfter() : calculateTotalSize() - calculateAfter();\n        if (!horizontal) {\n          if (reversed) {\n            // Scrolling 'up' and hit the after element below\n            measurementPos -= Math.abs(latestEntry.boundingClientRect.bottom);\n          } else if (latestEntry.boundingClientRect.top < 0) {\n            // Scrolling 'down' and hit the after element above top: 0\n            measurementPos -= latestEntry.boundingClientRect.top;\n          }\n        } else {\n          if (reversed) {\n            // Scrolling 'left' and hit the after element\n            measurementPos -= Math.abs(latestEntry.boundingClientRect.right);\n          } else if (latestEntry.boundingClientRect.left < 0) {\n            // Scrolling 'right' and hit the after element\n            measurementPos -= latestEntry.boundingClientRect.left;\n          }\n        }\n      } else if (latestEntry.target === beforeElementRef.current) {\n        measurementPos = reversed ? calculateTotalSize() - calculateBefore() : calculateBefore();\n        if (!horizontal) {\n          if (!reversed) {\n            measurementPos -= Math.abs(latestEntry.boundingClientRect.bottom);\n          } else if (latestEntry.boundingClientRect.top < 0) {\n            // Scrolling 'down' in reverse order and hit the before element above top: 0\n            measurementPos -= latestEntry.boundingClientRect.top;\n          }\n        } else {\n          if (!reversed) {\n            measurementPos -= Math.abs(latestEntry.boundingClientRect.right);\n          } else if (latestEntry.boundingClientRect.left < 0) {\n            // Scrolling 'left' and hit before element\n            measurementPos -= latestEntry.boundingClientRect.left;\n          }\n        }\n      }\n\n      if (reversed) {\n        // We're reversed, up is down, left is right, invert the scroll measure.\n        measurementPos = Math.max(calculateTotalSize() - Math.abs(measurementPos), 0);\n      }\n\n      // For now lets use hardcoded size to assess current element to paginate on\n      const startIndex = getIndexFromScrollPosition(measurementPos);\n      const bufferedIndex = Math.max(startIndex - bufferCount, 0);\n\n      // Safety limits\n      const maxIndex = Math.max(numItems - virtualizerLength, 0);\n      const newStartIndex = Math.min(Math.max(bufferedIndex, 0), maxIndex);\n\n      if (actualIndex !== newStartIndex) {\n        // We flush sync this and perform an immediate state update\n        flushSync(() => {\n          batchUpdateNewIndex(newStartIndex);\n        });\n      }\n    },\n    {\n      root: scrollViewRef ? scrollViewRef?.current : null,\n      rootMargin: '0px',\n      threshold: 0,\n    },\n  );\n\n  const findIndexRecursive = (scrollPos: number, lowIndex: number, highIndex: number): number => {\n    if (lowIndex > highIndex) {\n      // We shouldn't get here - but no-op the index if we do.\n      return actualIndex;\n    }\n    const midpoint = Math.floor((lowIndex + highIndex) / 2);\n    const iBefore = Math.max(midpoint - 1, 0);\n    const iAfter = Math.min(midpoint + 1, childProgressiveSizes.current.length - 1);\n    const indexValue = childProgressiveSizes.current[midpoint];\n    const afterIndexValue = childProgressiveSizes.current[iAfter];\n    const beforeIndexValue = childProgressiveSizes.current[iBefore];\n    if (scrollPos <= afterIndexValue && scrollPos >= beforeIndexValue) {\n      /* We've found our index - if we are exactly matching before/after index that's ok,\n      better to reduce checks if it's right on the boundary. */\n      return midpoint;\n    }\n\n    if (indexValue > scrollPos) {\n      return findIndexRecursive(scrollPos, lowIndex, midpoint - 1);\n    } else {\n      return findIndexRecursive(scrollPos, midpoint + 1, highIndex);\n    }\n  };\n\n  const getIndexFromSizeArray = (scrollPos: number): number => {\n    /* Quick searches our progressive height array */\n    if (\n      scrollPos === 0 ||\n      childProgressiveSizes.current.length === 0 ||\n      scrollPos <= childProgressiveSizes.current[0]\n    ) {\n      // Check start\n      return 0;\n    }\n\n    if (scrollPos >= childProgressiveSizes.current[childProgressiveSizes.current.length - 1]) {\n      // Check end\n      return childProgressiveSizes.current.length - 1;\n    }\n\n    return findIndexRecursive(scrollPos, 0, childProgressiveSizes.current.length - 1);\n  };\n\n  const getIndexFromScrollPosition = (scrollPos: number) => {\n    if (!getItemSize) {\n      return Math.round(scrollPos / itemSize);\n    }\n\n    return getIndexFromSizeArray(scrollPos);\n  };\n\n  const calculateTotalSize = useCallback(() => {\n    if (!getItemSize) {\n      return itemSize * numItems;\n    }\n\n    // Time for custom size calcs\n    return childProgressiveSizes.current[numItems - 1];\n  }, [getItemSize, itemSize, numItems]);\n\n  const calculateBefore = useCallback(() => {\n    const currentIndex = Math.min(actualIndex, numItems - 1);\n\n    if (!getItemSize) {\n      // The missing items from before virtualization starts height\n      return currentIndex * itemSize;\n    }\n\n    if (currentIndex <= 0) {\n      return 0;\n    }\n\n    // Time for custom size calcs\n    return childProgressiveSizes.current[currentIndex - 1];\n  }, [actualIndex, getItemSize, itemSize, numItems]);\n\n  const calculateAfter = useCallback(() => {\n    if (numItems === 0 || actualIndex + virtualizerLength >= numItems) {\n      return 0;\n    }\n\n    const lastItemIndex = Math.min(actualIndex + virtualizerLength, numItems);\n    if (!getItemSize) {\n      // The missing items from after virtualization ends height\n      const remainingItems = numItems - lastItemIndex;\n      return remainingItems * itemSize;\n    }\n\n    // Time for custom size calcs\n    return childProgressiveSizes.current[numItems - 1] - childProgressiveSizes.current[lastItemIndex - 1];\n  }, [actualIndex, getItemSize, itemSize, numItems, virtualizerLength]);\n\n  const updateChildRows = useCallback(\n    (newIndex: number) => {\n      if (numItems === 0) {\n        /* Nothing to virtualize */\n        return;\n      }\n\n      /*\n        We reset the array every time to ensure children are re-rendered\n        This function should only be called when update is nessecary\n       */\n      childArray.current = new Array(virtualizerLength);\n      const _actualIndex = Math.max(newIndex, 0);\n      const end = Math.min(_actualIndex + virtualizerLength, numItems);\n      for (let i = _actualIndex; i < end; i++) {\n        childArray.current[i - _actualIndex] = renderVirtualizerChildPlaceholder(renderChild(i, isScrolling), i);\n      }\n    },\n    [isScrolling, numItems, renderChild, virtualizerLength],\n  );\n\n  const setBeforeRef = useCallback(\n    (element: HTMLDivElement) => {\n      if (!element || beforeElementRef.current === element) {\n        return;\n      }\n      beforeElementRef.current = element;\n      const newList = [];\n\n      newList.push(beforeElementRef.current);\n\n      if (afterElementRef.current) {\n        newList.push(afterElementRef.current);\n      }\n\n      // Ensure we update array if before element changed\n      setObserverList(newList);\n    },\n    [setObserverList],\n  );\n\n  const setAfterRef = useCallback(\n    (element: HTMLDivElement) => {\n      if (!element || afterElementRef.current === element) {\n        return;\n      }\n      afterElementRef.current = element;\n      const newList = [];\n\n      if (beforeElementRef.current) {\n        newList.push(beforeElementRef.current);\n      }\n\n      newList.push(afterElementRef.current);\n\n      // Ensure we update array if after element changed\n      setObserverList(newList);\n    },\n    [setObserverList],\n  );\n\n  const updateCurrentItemSizes = (newIndex: number) => {\n    if (!getItemSize) {\n      // Static sizes, not required.\n      return;\n    }\n    // We should always call our size function on index change (only for the items that will be rendered)\n    // This ensures we request the latest data for incoming items in case sizing has changed.\n    const endIndex = Math.min(newIndex + virtualizerLength, numItems);\n    const startIndex = Math.max(newIndex, 0);\n\n    let didUpdate = false;\n    for (let i = startIndex; i < endIndex; i++) {\n      const newSize = getItemSize(i);\n      if (newSize !== childSizes.current[i]) {\n        childSizes.current[i] = newSize;\n        didUpdate = true;\n      }\n    }\n\n    if (didUpdate) {\n      // Update our progressive size array\n      for (let i = startIndex; i < numItems; i++) {\n        const prevSize = i > 0 ? childProgressiveSizes.current[i - 1] : 0;\n        childProgressiveSizes.current[i] = prevSize + childSizes.current[i];\n      }\n    }\n  };\n\n  // Initialize the size array before first render.\n  const hasInitialized = useRef<boolean>(false);\n  const initializeSizeArray = () => {\n    if (hasInitialized.current === false) {\n      hasInitialized.current = true;\n      populateSizeArrays();\n    }\n  };\n\n  useImperativeHandle(\n    imperativeVirtualizerRef,\n    () => {\n      return {\n        progressiveSizes: childProgressiveSizes,\n        nodeSizes: childSizes,\n        setFlaggedIndex: (index: number | null) => (flaggedIndex.current = index),\n        currentIndex: actualIndexRef,\n      };\n    },\n    [childProgressiveSizes, childSizes],\n  );\n\n  // Initialization on mount - update array index to 0 (ready state).\n  // Only fire on mount (no deps).\n  useEffect(() => {\n    if (actualIndex < 0) {\n      batchUpdateNewIndex(0);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // If the user passes in an updated renderChild function - update current children\n  useEffect(() => {\n    if (actualIndex >= 0) {\n      updateChildRows(actualIndex);\n      forceUpdate();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [renderChild, updateChildRows]);\n\n  useEffect(() => {\n    // Ensure we repopulate if getItemSize callback changes\n    populateSizeArrays();\n\n    // We only run this effect on getItemSize change (recalc dynamic sizes)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [getItemSize]);\n\n  // Effect to check flag index on updates\n  useEffect(() => {\n    if (!onRenderedFlaggedIndex || flaggedIndex.current === null) {\n      return;\n    }\n    if (actualIndex <= flaggedIndex.current && actualIndex + virtualizerLength >= flaggedIndex.current) {\n      onRenderedFlaggedIndex(flaggedIndex.current);\n      flaggedIndex.current = null;\n    }\n  }, [actualIndex, onRenderedFlaggedIndex, virtualizerLength]);\n\n  // Ensure we have run through and updated the whole size list array at least once.\n  initializeSizeArray();\n\n  if (getItemSize && (numItems !== childSizes.current.length || numItems !== childProgressiveSizes.current.length)) {\n    // Child length mismatch, repopulate size arrays.\n    populateSizeArrays();\n  }\n\n  // Ensure we recalc if virtualizer length changes\n  const maxCompare = Math.min(virtualizerLength, numItems);\n  if (childArray.current.length !== maxCompare && actualIndex + childArray.current.length < numItems) {\n    updateChildRows(actualIndex);\n  }\n\n  const isFullyInitialized = hasInitialized.current && actualIndex >= 0;\n  return {\n    components: {\n      before: 'div',\n      after: 'div',\n      beforeContainer: 'div',\n      afterContainer: 'div',\n    },\n    virtualizedChildren: childArray.current,\n    before: resolveShorthand(props.before, {\n      required: true,\n      defaultProps: {\n        ref: setBeforeRef,\n        role: 'none',\n      },\n    }),\n    after: resolveShorthand(props.after, {\n      required: true,\n      defaultProps: {\n        ref: setAfterRef,\n        role: 'none',\n      },\n    }),\n    beforeContainer: resolveShorthand(props.beforeContainer, {\n      required: true,\n      defaultProps: {\n        role: 'none',\n      },\n    }),\n    afterContainer: resolveShorthand(props.afterContainer, {\n      required: true,\n      defaultProps: {\n        role: 'none',\n      },\n    }),\n    beforeBufferHeight: isFullyInitialized ? calculateBefore() : 0,\n    afterBufferHeight: isFullyInitialized ? calculateAfter() : 0,\n    totalVirtualizerHeight: isFullyInitialized ? calculateTotalSize() : virtualizerLength * itemSize,\n    virtualizerStartIndex: actualIndex,\n    axis,\n    bufferSize,\n    reversed,\n  };\n}\n"],"names":["useEffect","useRef","useCallback","useReducer","useImperativeHandle","useState","useIntersectionObserver","resolveShorthand","flushSync","useVirtualizerContextState_unstable","renderVirtualizerChildPlaceholder","useVirtualizer_unstable","props","itemSize","numItems","virtualizerLength","children","renderChild","getItemSize","bufferItems","Math","round","bufferSize","floor","scrollViewRef","axis","reversed","virtualizerContext","onRenderedFlaggedIndex","imperativeVirtualizerRef","_virtualizerContext","actualIndexRef","contextIndex","current","flaggedIndex","actualIndex","setActualIndex","setContextIndex","beforeElementRef","afterElementRef","childSizes","Array","childProgressiveSizes","childArray","forceUpdate","horizontal","populateSizeArrays","length","index","isScrolling","setIsScrolling","scrollTimer","scrollCounter","initializeScrollingTimer","INIT_SCROLL_FLAG_REQ","INIT_SCROLL_FLAG_DELAY","clearTimeout","setTimeout","batchUpdateNewIndex","updateChildRows","updateCurrentItemSizes","setObserverList","entries","observer","measurementPos","bufferCount","latestEntry","sort","entry1","entry2","time","find","entry","intersectionRatio","target","calculateAfter","calculateTotalSize","abs","boundingClientRect","bottom","top","right","left","calculateBefore","max","startIndex","getIndexFromScrollPosition","bufferedIndex","maxIndex","newStartIndex","min","root","rootMargin","threshold","findIndexRecursive","scrollPos","lowIndex","highIndex","midpoint","iBefore","iAfter","indexValue","afterIndexValue","beforeIndexValue","getIndexFromSizeArray","currentIndex","lastItemIndex","remainingItems","newIndex","_actualIndex","end","i","setBeforeRef","element","newList","push","setAfterRef","endIndex","didUpdate","newSize","prevSize","hasInitialized","initializeSizeArray","progressiveSizes","nodeSizes","setFlaggedIndex","maxCompare","isFullyInitialized","components","before","after","beforeContainer","afterContainer","virtualizedChildren","required","defaultProps","ref","role","beforeBufferHeight","afterBufferHeight","totalVirtualizerHeight","virtualizerStartIndex"],"mappings":"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"}