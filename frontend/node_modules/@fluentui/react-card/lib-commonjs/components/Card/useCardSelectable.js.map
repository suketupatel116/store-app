{"version":3,"sources":["useCardSelectable.js"],"sourcesContent":["import * as React from 'react';\nimport { mergeCallbacks, resolveShorthand } from '@fluentui/react-utilities';\nimport { Enter } from '@fluentui/keyboard-keys';\nimport { useFocusFinders } from '@fluentui/react-tabster';\n/**\n * @internal\n *\n * Create the state related to selectable cards.\n *\n * This internal hook controls all the logic for selectable cards and is\n * intended to be used alongside with useCard_unstable.\n *\n * @param props - props from this instance of Card\n * @param a11yProps - accessibility props shared between elements of the card\n * @param ref - reference to the root element of Card\n */ export const useCardSelectable = (props, { referenceLabel , referenceId  }, cardRef)=>{\n    const { checkbox ={} , selected , defaultSelected , onSelectionChange , floatingAction , onClick , onKeyDown  } = props;\n    const { findAllFocusable  } = useFocusFinders();\n    const checkboxRef = React.useRef(null);\n    const isSelectable = [\n        selected,\n        defaultSelected,\n        onSelectionChange\n    ].some((prop)=>typeof prop !== 'undefined');\n    const [isCardSelected, setIsCardSelected] = React.useState(false);\n    const [isSelectFocused, setIsSelectFocused] = React.useState(false);\n    const shouldRestrictTriggerAction = React.useCallback((event)=>{\n        if (!cardRef.current) {\n            return false;\n        }\n        const focusableElements = findAllFocusable(cardRef.current);\n        const target = event.target;\n        const isElementInFocusableGroup = focusableElements.some((element)=>element.contains(target));\n        const isCheckboxSlot = (checkboxRef === null || checkboxRef === void 0 ? void 0 : checkboxRef.current) === target;\n        return isElementInFocusableGroup && !isCheckboxSlot;\n    }, [\n        cardRef,\n        findAllFocusable\n    ]);\n    const onChangeHandler = React.useCallback((event)=>{\n        if (shouldRestrictTriggerAction(event)) {\n            return;\n        }\n        const newCheckedValue = !isCardSelected;\n        setIsCardSelected(newCheckedValue);\n        if (onSelectionChange) {\n            onSelectionChange(event, {\n                selected: newCheckedValue\n            });\n        }\n    }, [\n        onSelectionChange,\n        isCardSelected,\n        shouldRestrictTriggerAction\n    ]);\n    const onKeyDownHandler = React.useCallback((event)=>{\n        if ([\n            Enter\n        ].includes(event.key)) {\n            event.preventDefault();\n            onChangeHandler(event);\n        }\n    }, [\n        onChangeHandler\n    ]);\n    const checkboxSlot = React.useMemo(()=>{\n        if (!isSelectable || floatingAction) {\n            return;\n        }\n        const selectableCheckboxProps = {};\n        if (referenceId) {\n            selectableCheckboxProps['aria-labelledby'] = referenceId;\n        } else if (referenceLabel) {\n            selectableCheckboxProps['aria-label'] = referenceLabel;\n        }\n        return resolveShorthand(checkbox, {\n            defaultProps: {\n                ref: checkboxRef,\n                type: 'checkbox',\n                checked: isCardSelected,\n                onChange: (event)=>onChangeHandler(event),\n                onFocus: ()=>setIsSelectFocused(true),\n                onBlur: ()=>setIsSelectFocused(false),\n                ...selectableCheckboxProps\n            }\n        });\n    }, [\n        checkbox,\n        floatingAction,\n        isCardSelected,\n        isSelectable,\n        onChangeHandler,\n        referenceId,\n        referenceLabel\n    ]);\n    const floatingActionSlot = React.useMemo(()=>{\n        if (!floatingAction) {\n            return;\n        }\n        return resolveShorthand(floatingAction, {\n            defaultProps: {\n                ref: checkboxRef\n            }\n        });\n    }, [\n        floatingAction\n    ]);\n    const selectableCardProps = React.useMemo(()=>{\n        if (!isSelectable) {\n            return null;\n        }\n        return {\n            onClick: mergeCallbacks(onClick, onChangeHandler),\n            onKeyDown: mergeCallbacks(onKeyDown, onKeyDownHandler)\n        };\n    }, [\n        isSelectable,\n        onChangeHandler,\n        onClick,\n        onKeyDown,\n        onKeyDownHandler\n    ]);\n    React.useEffect(()=>setIsCardSelected(Boolean(defaultSelected !== null && defaultSelected !== void 0 ? defaultSelected : selected)), [\n        defaultSelected,\n        selected,\n        setIsCardSelected\n    ]);\n    return {\n        selected: isCardSelected,\n        selectable: isSelectable,\n        selectFocused: isSelectFocused,\n        selectableCardProps,\n        checkboxSlot,\n        floatingActionSlot\n    };\n};\n"],"names":["useCardSelectable","props","referenceLabel","referenceId","cardRef","checkbox","selected","defaultSelected","onSelectionChange","floatingAction","onClick","onKeyDown","findAllFocusable","useFocusFinders","checkboxRef","React","useRef","isSelectable","some","prop","isCardSelected","setIsCardSelected","useState","isSelectFocused","setIsSelectFocused","shouldRestrictTriggerAction","useCallback","event","current","focusableElements","target","isElementInFocusableGroup","element","contains","isCheckboxSlot","onChangeHandler","newCheckedValue","onKeyDownHandler","Enter","includes","key","preventDefault","checkboxSlot","useMemo","selectableCheckboxProps","resolveShorthand","defaultProps","ref","type","checked","onChange","onFocus","onBlur","floatingActionSlot","selectableCardProps","mergeCallbacks","useEffect","Boolean","selectable","selectFocused"],"mappings":"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"}