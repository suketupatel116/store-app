import * as React from 'react';
import { DefaultInfoButtonIcon12, DefaultInfoButtonIcon16, DefaultInfoButtonIcon20 } from './DefaultInfoButtonIcons';
import { getNativeElementProps, mergeCallbacks, resolveShorthand } from '@fluentui/react-utilities';
import { Popover, PopoverSurface } from '@fluentui/react-popover';
import { useControllableState } from '@fluentui/react-utilities';
const infoButtonIconMap = {
    small: /*#__PURE__*/ React.createElement(DefaultInfoButtonIcon12, null),
    medium: /*#__PURE__*/ React.createElement(DefaultInfoButtonIcon16, null),
    large: /*#__PURE__*/ React.createElement(DefaultInfoButtonIcon20, null)
};
const popoverSizeMap = {
    small: 'small',
    medium: 'small',
    large: 'medium'
};
/**
 * Create the state required to render InfoButton.
 *
 * The returned state can be modified with hooks such as useInfoButtonStyles_unstable,
 * before being passed to renderInfoButton_unstable.
 *
 * @param props - props from this instance of InfoButton
 * @param ref - reference to root HTMLElement of InfoButton
 */ export const useInfoButton_unstable = (props, ref)=>{
    const { size ='medium'  } = props;
    const state = {
        size,
        components: {
            root: 'button',
            popover: Popover,
            info: PopoverSurface
        },
        root: getNativeElementProps('button', {
            children: infoButtonIconMap[size],
            type: 'button',
            'aria-label': 'information',
            ...props,
            ref
        }),
        popover: resolveShorthand(props.popover, {
            required: true,
            defaultProps: {
                positioning: 'above-start',
                size: popoverSizeMap[size],
                withArrow: true
            }
        }),
        info: resolveShorthand(props.info, {
            required: true,
            defaultProps: {
                role: 'note',
                tabIndex: -1
            }
        })
    };
    const [popoverOpen, setPopoverOpen] = useControllableState({
        state: state.popover.open,
        defaultState: state.popover.defaultOpen,
        initialState: false
    });
    state.popover.open = popoverOpen;
    state.popover.onOpenChange = mergeCallbacks(state.popover.onOpenChange, (e, data)=>setPopoverOpen(data.open));
    return state;
};
