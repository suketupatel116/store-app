import { canUseDOM } from '@fluentui/react-utilities';
import * as React from 'react';
import { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';
/**
 * Provides a way of reporting element width.
 * Returns
 * `width` - current element width (0 by default),
 * `measureElementRef` - a ref function to be passed as `ref` to the element you want to measure
 */ export function useMeasureElement() {
    const [width, setWidth] = React.useState(0);
    const container = React.useRef(undefined);
    const { targetDocument  } = useFluent();
    // the handler for resize observer
    const handleResize = React.useCallback(()=>{
        var _container_current;
        const containerWidth = (_container_current = container.current) === null || _container_current === void 0 ? void 0 : _container_current.getBoundingClientRect().width;
        setWidth(containerWidth || 0);
    }, []);
    // Keep the reference of ResizeObserver in the state, as it should live through renders
    const [resizeObserver] = React.useState(canUseDOM() ? new ResizeObserver(handleResize) : undefined);
    const measureElementRef = React.useCallback((el)=>{
        if (!targetDocument || !resizeObserver) {
            return;
        }
        // cleanup previous container
        if (container.current) {
            resizeObserver.unobserve(container.current);
            container.current.remove();
        }
        if (el) {
            container.current = targetDocument.createElement('div');
            el.insertAdjacentElement('beforebegin', container.current);
            resizeObserver.observe(container.current);
            handleResize();
        }
    }, [
        targetDocument,
        resizeObserver,
        handleResize
    ]);
    React.useEffect(()=>{
        return ()=>{
            return resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.disconnect();
        };
    }, [
        resizeObserver
    ]);
    return {
        width,
        measureElementRef
    };
}
