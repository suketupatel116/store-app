import * as React from 'react';
import { TableResizeHandle } from '../TableResizeHandle';
import { useMeasureElement } from './useMeasureElement';
import { useTableColumnResizeMouseHandler } from './useTableColumnResizeMouseHandler';
import { useTableColumnResizeState } from './useTableColumnResizeState';
import { useKeyboardResizing } from './useKeyboardResizing';
export const defaultColumnSizingState = {
    getColumnWidths: ()=>[],
    getOnMouseDown: ()=>()=>null,
    setColumnWidth: ()=>null,
    getTableHeaderCellProps: ()=>({
            style: {},
            columnId: ''
        }),
    getTableCellProps: ()=>({
            style: {},
            columnId: ''
        }),
    enableKeyboardMode: ()=>()=>null
};
export function useTableColumnSizing_unstable(params) {
    // False positive, these plugin hooks are intended to be run on every render
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return (tableState)=>useTableColumnSizingState(tableState, params);
}
function getColumnStyles(column) {
    const width = column.width;
    return {
        // native styles
        width,
        // non-native element styles (flex layout)
        minWidth: width,
        maxWidth: width
    };
}
function useTableColumnSizingState(tableState, params) {
    const { columns  } = tableState;
    // Gets the container width
    const { width , measureElementRef  } = useMeasureElement();
    // Creates the state based on columns and available containerWidth
    const columnResizeState = useTableColumnResizeState(columns, width + ((params === null || params === void 0 ? void 0 : params.containerWidthOffset) || 0), params);
    // Creates the mouse handler and attaches the state to it
    const mouseHandler = useTableColumnResizeMouseHandler(columnResizeState);
    // Creates the keyboard handler for resizing columns
    const { toggleInteractiveMode , getKeyboardResizingProps  } = useKeyboardResizing(columnResizeState);
    const enableKeyboardMode = React.useCallback((columnId, onChange)=>(e)=>{
            e.preventDefault();
            e.nativeEvent.stopPropagation();
            toggleInteractiveMode(columnId, onChange);
        }, [
        toggleInteractiveMode
    ]);
    return {
        ...tableState,
        tableRef: measureElementRef,
        // eslint-disable-next-line @typescript-eslint/naming-convention
        columnSizing_unstable: {
            getOnMouseDown: mouseHandler.getOnMouseDown,
            setColumnWidth: (columnId, w)=>columnResizeState.setColumnWidth(undefined, {
                    columnId,
                    width: w
                }),
            getColumnWidths: columnResizeState.getColumns,
            getTableHeaderCellProps: (columnId)=>{
                const col = columnResizeState.getColumnById(columnId);
                const aside = /*#__PURE__*/ React.createElement(TableResizeHandle, {
                    onMouseDown: mouseHandler.getOnMouseDown(columnId),
                    onTouchStart: mouseHandler.getOnMouseDown(columnId),
                    ...getKeyboardResizingProps(columnId, (col === null || col === void 0 ? void 0 : col.width) || 0)
                });
                return col ? {
                    style: getColumnStyles(col),
                    aside
                } : {};
            },
            getTableCellProps: (columnId)=>{
                const col = columnResizeState.getColumnById(columnId);
                return col ? {
                    style: getColumnStyles(col)
                } : {};
            },
            enableKeyboardMode
        }
    };
}
