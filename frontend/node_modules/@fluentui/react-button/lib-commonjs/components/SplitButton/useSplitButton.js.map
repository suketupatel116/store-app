{"version":3,"sources":["useSplitButton.js"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, resolveShorthand, useId } from '@fluentui/react-utilities';\nimport { Button } from '../Button/Button';\nimport { MenuButton } from '../MenuButton/MenuButton';\n/**\n * Given user props, defines default props for the SplitButton and returns processed state.\n * @param props - User provided props to the SplitButton component.\n * @param ref - User provided ref to be passed to the SplitButton component.\n */ export const useSplitButton_unstable = (props, ref)=>{\n    const { appearance ='secondary' , children , disabled =false , disabledFocusable =false , icon , iconPosition ='before' , menuButton , menuIcon , primaryActionButton , shape ='rounded' , size ='medium'  } = props;\n    const baseId = useId('splitButton-');\n    const menuButtonShorthand = resolveShorthand(menuButton, {\n        defaultProps: {\n            appearance,\n            disabled,\n            disabledFocusable,\n            menuIcon,\n            shape,\n            size\n        },\n        required: true\n    });\n    const primaryActionButtonShorthand = resolveShorthand(primaryActionButton, {\n        defaultProps: {\n            appearance,\n            children,\n            disabled,\n            disabledFocusable,\n            icon,\n            iconPosition,\n            id: baseId + '__primaryActionButton',\n            shape,\n            size\n        },\n        required: true\n    });\n    // Resolve menu button's aria-labelledby to be labelled by the primary action button if not a label was not provided\n    // by the user.\n    if (menuButtonShorthand && primaryActionButtonShorthand && !menuButtonShorthand['aria-label'] && !menuButtonShorthand['aria-labelledby']) {\n        menuButtonShorthand['aria-labelledby'] = primaryActionButtonShorthand.id;\n    }\n    return {\n        // Props passed at the top-level\n        appearance,\n        disabled,\n        disabledFocusable,\n        iconPosition,\n        shape,\n        size,\n        // Slots definition\n        components: {\n            root: 'div',\n            menuButton: MenuButton,\n            primaryActionButton: Button\n        },\n        root: getNativeElementProps('div', {\n            ref,\n            ...props\n        }),\n        menuButton: menuButtonShorthand,\n        primaryActionButton: primaryActionButtonShorthand\n    };\n};\n"],"names":["useSplitButton_unstable","props","ref","appearance","children","disabled","disabledFocusable","icon","iconPosition","menuButton","menuIcon","primaryActionButton","shape","size","baseId","useId","menuButtonShorthand","resolveShorthand","defaultProps","required","primaryActionButtonShorthand","id","components","root","MenuButton","Button","getNativeElementProps"],"mappings":";;;;+BAQiBA;;aAAAA;;;6DARM;gCACwC;wBACxC;4BACI;AAKhB,MAAMA,0BAA0B,CAACC,OAAOC,MAAM;IACrD,MAAM,EAAEC,YAAY,YAAW,EAAGC,SAAQ,EAAGC,UAAU,KAAK,CAAA,EAAGC,mBAAmB,KAAK,CAAA,EAAGC,KAAI,EAAGC,cAAc,SAAQ,EAAGC,WAAU,EAAGC,SAAQ,EAAGC,oBAAmB,EAAGC,OAAO,UAAS,EAAGC,MAAM,SAAQ,EAAG,GAAGZ;IAC/M,MAAMa,SAASC,IAAAA,qBAAK,EAAC;IACrB,MAAMC,sBAAsBC,IAAAA,gCAAgB,EAACR,YAAY;QACrDS,cAAc;YACVf;YACAE;YACAC;YACAI;YACAE;YACAC;QACJ;QACAM,UAAU,IAAI;IAClB;IACA,MAAMC,+BAA+BH,IAAAA,gCAAgB,EAACN,qBAAqB;QACvEO,cAAc;YACVf;YACAC;YACAC;YACAC;YACAC;YACAC;YACAa,IAAIP,SAAS;YACbF;YACAC;QACJ;QACAM,UAAU,IAAI;IAClB;IACA,oHAAoH;IACpH,eAAe;IACf,IAAIH,uBAAuBI,gCAAgC,CAACJ,mBAAmB,CAAC,aAAa,IAAI,CAACA,mBAAmB,CAAC,kBAAkB,EAAE;QACtIA,mBAAmB,CAAC,kBAAkB,GAAGI,6BAA6BC,EAAE;IAC5E,CAAC;IACD,OAAO;QACH,gCAAgC;QAChClB;QACAE;QACAC;QACAE;QACAI;QACAC;QACA,mBAAmB;QACnBS,YAAY;YACRC,MAAM;YACNd,YAAYe,sBAAU;YACtBb,qBAAqBc,cAAM;QAC/B;QACAF,MAAMG,IAAAA,qCAAqB,EAAC,OAAO;YAC/BxB;YACA,GAAGD,KAAK;QACZ;QACAQ,YAAYO;QACZL,qBAAqBS;IACzB;AACJ"}