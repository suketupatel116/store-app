{"version":3,"sources":["useComboboxBaseState.js"],"sourcesContent":["import * as React from 'react';\nimport { useControllableState, useFirstMount } from '@fluentui/react-utilities';\nimport { useOptionCollection } from '../utils/useOptionCollection';\nimport { useSelection } from '../utils/useSelection';\n/**\n * State shared between Combobox and Dropdown components\n */ export const useComboboxBaseState = (props)=>{\n    const { appearance ='outline' , children , editable =false , inlinePopup =false , multiselect , onOpenChange , size ='medium'  } = props;\n    const optionCollection = useOptionCollection();\n    const { getOptionAtIndex , getOptionsMatchingValue  } = optionCollection;\n    const [activeOption, setActiveOption] = React.useState();\n    // track whether keyboard focus outline should be shown\n    // tabster/keyborg doesn't work here, since the actual keyboard focus target doesn't move\n    const [focusVisible, setFocusVisible] = React.useState(false);\n    // track focused state to conditionally render collapsed listbox\n    const [hasFocus, setHasFocus] = React.useState(false);\n    const ignoreNextBlur = React.useRef(false);\n    const selectionState = useSelection(props);\n    const { selectedOptions  } = selectionState;\n    // calculate value based on props, internal value changes, and selected options\n    const isFirstMount = useFirstMount();\n    const [controllableValue, setValue] = useControllableState({\n        state: props.value,\n        initialState: undefined\n    });\n    const value = React.useMemo(()=>{\n        // don't compute the value if it is defined through props or setValue,\n        if (controllableValue !== undefined) {\n            return controllableValue;\n        }\n        // handle defaultValue here, so it is overridden by selection\n        if (isFirstMount && props.defaultValue !== undefined) {\n            return props.defaultValue;\n        }\n        const selectedOptionsText = getOptionsMatchingValue((optionValue)=>{\n            return selectedOptions.includes(optionValue);\n        }).map((option)=>option.text);\n        if (multiselect) {\n            // editable inputs should not display multiple selected options in the input as text\n            return editable ? '' : selectedOptionsText.join(', ');\n        }\n        return selectedOptionsText[0];\n    // do not change value after isFirstMount changes,\n    // we do not want to accidentally override defaultValue on a second render\n    // unless another value is intentionally set\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        controllableValue,\n        editable,\n        getOptionsMatchingValue,\n        multiselect,\n        props.defaultValue,\n        selectedOptions\n    ]);\n    // Handle open state, which is shared with options in context\n    const [open, setOpenState] = useControllableState({\n        state: props.open,\n        defaultState: props.defaultOpen,\n        initialState: false\n    });\n    const setOpen = React.useCallback((event, newState)=>{\n        onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(event, {\n            open: newState\n        });\n        setOpenState(newState);\n    }, [\n        onOpenChange,\n        setOpenState\n    ]);\n    // update active option based on change in open state or children\n    React.useEffect(()=>{\n        if (open && !activeOption) {\n            // if it is single-select and there is a selected option, start at the selected option\n            if (!multiselect && selectedOptions.length > 0) {\n                const selectedOption = getOptionsMatchingValue((v)=>v === selectedOptions[0]).pop();\n                selectedOption && setActiveOption(selectedOption);\n            } else {\n                setActiveOption(getOptionAtIndex(0));\n            }\n        } else if (!open) {\n            // reset the active option when closing\n            setActiveOption(undefined);\n        }\n    // this should only be run in response to changes in the open state or children\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        open,\n        children\n    ]);\n    return {\n        ...optionCollection,\n        ...selectionState,\n        activeOption,\n        appearance,\n        focusVisible,\n        hasFocus,\n        ignoreNextBlur,\n        inlinePopup,\n        open,\n        setActiveOption,\n        setFocusVisible,\n        setHasFocus,\n        setOpen,\n        setValue,\n        size,\n        value\n    };\n};\n"],"names":["useComboboxBaseState","props","appearance","children","editable","inlinePopup","multiselect","onOpenChange","size","optionCollection","useOptionCollection","getOptionAtIndex","getOptionsMatchingValue","activeOption","setActiveOption","React","useState","focusVisible","setFocusVisible","hasFocus","setHasFocus","ignoreNextBlur","useRef","selectionState","useSelection","selectedOptions","isFirstMount","useFirstMount","controllableValue","setValue","useControllableState","state","value","initialState","undefined","useMemo","defaultValue","selectedOptionsText","optionValue","includes","map","option","text","join","open","setOpenState","defaultState","defaultOpen","setOpen","useCallback","event","newState","useEffect","length","selectedOption","v","pop"],"mappings":"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"}