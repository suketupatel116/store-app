{"version":3,"sources":["useDropdown.js"],"sourcesContent":["import * as React from 'react';\nimport { useFieldControlProps_unstable } from '@fluentui/react-field';\nimport { ChevronDownRegular as ChevronDownIcon } from '@fluentui/react-icons';\nimport { getPartitionedNativeProps, mergeCallbacks, resolveShorthand, useTimeout } from '@fluentui/react-utilities';\nimport { getDropdownActionFromKey } from '../../utils/dropdownKeyActions';\nimport { useComboboxBaseState } from '../../utils/useComboboxBaseState';\nimport { useComboboxPopup } from '../../utils/useComboboxPopup';\nimport { useTriggerListboxSlots } from '../../utils/useTriggerListboxSlots';\nimport { Listbox } from '../Listbox/Listbox';\nimport { useMergedRefs } from '@fluentui/react-utilities';\n/**\n * Create the state required to render Dropdown.\n *\n * The returned state can be modified with hooks such as useDropdownStyles_unstable,\n * before being passed to renderDropdown_unstable.\n *\n * @param props - props from this instance of Dropdown\n * @param ref - reference to root HTMLElement of Dropdown\n */ export const useDropdown_unstable = (props, ref)=>{\n    // Merge props from surrounding <Field>, if any\n    props = useFieldControlProps_unstable(props, {\n        supportsLabelFor: true,\n        supportsSize: true\n    });\n    const baseState = useComboboxBaseState(props);\n    const { activeOption , getIndexOfId , getOptionsMatchingText , open , setActiveOption , setFocusVisible , setOpen  } = baseState;\n    const { primary: triggerNativeProps , root: rootNativeProps  } = getPartitionedNativeProps({\n        props,\n        primarySlotTagName: 'button',\n        excludedPropNames: [\n            'children'\n        ]\n    });\n    // set listbox popup width based off the root/trigger width\n    const rootRef = React.useRef(null);\n    const [popupWidth, setPopupWidth] = React.useState();\n    React.useEffect(()=>{\n        var _rootRef_current;\n        const width = open ? `${(_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.clientWidth}px` : undefined;\n        setPopupWidth(width);\n    }, [\n        open\n    ]);\n    // jump to matching option based on typing\n    const searchString = React.useRef('');\n    const [setKeyTimeout, clearKeyTimeout] = useTimeout();\n    const getNextMatchingOption = ()=>{\n        // first check for matches for the full searchString\n        let matcher = (optionText)=>optionText.toLowerCase().indexOf(searchString.current) === 0;\n        let matches = getOptionsMatchingText(matcher);\n        let startIndex = activeOption ? getIndexOfId(activeOption.id) : 0;\n        // if the dropdown is already open and the searchstring is a single character,\n        // then look after the current activeOption for letters\n        // this is so slowly typing the same letter will cycle through matches\n        if (open && searchString.current.length === 1) {\n            startIndex++;\n        }\n        // if there are no direct matches, check if the search is all the same letter, e.g. \"aaa\"\n        if (!matches.length) {\n            const letters = searchString.current.split('');\n            const allSameLetter = letters.length && letters.every((letter)=>letter === letters[0]);\n            // if the search is all the same letter, cycle through options starting with that letter\n            if (allSameLetter) {\n                startIndex++;\n                matcher = (optionText)=>optionText.toLowerCase().indexOf(letters[0]) === 0;\n                matches = getOptionsMatchingText(matcher);\n            }\n        }\n        // if there is an active option and multiple matches,\n        // return first matching option after the current active option, looping back to the top\n        if (matches.length > 1 && activeOption) {\n            const nextMatch = matches.find((option)=>getIndexOfId(option.id) >= startIndex);\n            return nextMatch !== null && nextMatch !== void 0 ? nextMatch : matches[0];\n        }\n        var _matches_;\n        return (_matches_ = matches[0]) !== null && _matches_ !== void 0 ? _matches_ : undefined;\n    };\n    const onTriggerKeyDown = (ev)=>{\n        // clear timeout, if it exists\n        clearKeyTimeout();\n        // if the key was a char key, update search string\n        if (getDropdownActionFromKey(ev) === 'Type') {\n            // update search string\n            searchString.current += ev.key.toLowerCase();\n            setKeyTimeout(()=>{\n                searchString.current = '';\n            }, 500);\n            // update state\n            !open && setOpen(ev, true);\n            const nextOption = getNextMatchingOption();\n            setActiveOption(nextOption);\n            setFocusVisible(true);\n        }\n    };\n    // resolve button and listbox slot props\n    let triggerSlot;\n    let listboxSlot;\n    triggerSlot = resolveShorthand(props.button, {\n        required: true,\n        defaultProps: {\n            type: 'button',\n            children: baseState.value || props.placeholder,\n            ...triggerNativeProps\n        }\n    });\n    triggerSlot.onKeyDown = mergeCallbacks(onTriggerKeyDown, triggerSlot.onKeyDown);\n    listboxSlot = baseState.open || baseState.hasFocus ? resolveShorthand(props.listbox, {\n        required: true,\n        defaultProps: {\n            children: props.children,\n            style: {\n                width: popupWidth\n            }\n        }\n    }) : undefined;\n    [triggerSlot, listboxSlot] = useComboboxPopup(props, triggerSlot, listboxSlot);\n    [triggerSlot, listboxSlot] = useTriggerListboxSlots(props, baseState, ref, triggerSlot, listboxSlot);\n    const state = {\n        components: {\n            root: 'div',\n            button: 'button',\n            expandIcon: 'span',\n            listbox: Listbox\n        },\n        root: resolveShorthand(props.root, {\n            required: true,\n            defaultProps: {\n                'aria-owns': !props.inlinePopup ? listboxSlot === null || listboxSlot === void 0 ? void 0 : listboxSlot.id : undefined,\n                children: props.children,\n                ...rootNativeProps\n            }\n        }),\n        button: triggerSlot,\n        listbox: listboxSlot,\n        expandIcon: resolveShorthand(props.expandIcon, {\n            required: true,\n            defaultProps: {\n                children: /*#__PURE__*/ React.createElement(ChevronDownIcon, null)\n            }\n        }),\n        placeholderVisible: !baseState.value && !!props.placeholder,\n        ...baseState\n    };\n    state.root.ref = useMergedRefs(state.root.ref, rootRef);\n    return state;\n};\n"],"names":["useDropdown_unstable","props","ref","useFieldControlProps_unstable","supportsLabelFor","supportsSize","baseState","useComboboxBaseState","activeOption","getIndexOfId","getOptionsMatchingText","open","setActiveOption","setFocusVisible","setOpen","primary","triggerNativeProps","root","rootNativeProps","getPartitionedNativeProps","primarySlotTagName","excludedPropNames","rootRef","React","useRef","popupWidth","setPopupWidth","useState","useEffect","_rootRef_current","width","current","clientWidth","undefined","searchString","setKeyTimeout","clearKeyTimeout","useTimeout","getNextMatchingOption","matcher","optionText","toLowerCase","indexOf","matches","startIndex","id","length","letters","split","allSameLetter","every","letter","nextMatch","find","option","_matches_","onTriggerKeyDown","ev","getDropdownActionFromKey","key","nextOption","triggerSlot","listboxSlot","resolveShorthand","button","required","defaultProps","type","children","value","placeholder","onKeyDown","mergeCallbacks","hasFocus","listbox","style","useComboboxPopup","useTriggerListboxSlots","state","components","expandIcon","Listbox","inlinePopup","createElement","ChevronDownIcon","placeholderVisible","useMergedRefs"],"mappings":"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"}