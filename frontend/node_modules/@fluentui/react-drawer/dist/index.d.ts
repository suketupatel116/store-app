/// <reference types="react" />

import type { ComponentProps } from '@fluentui/react-utilities';
import type { ComponentState } from '@fluentui/react-utilities';
import { DialogProps } from '@fluentui/react-dialog';
import { DialogSurfaceProps } from '@fluentui/react-dialog';
import { DialogSurfaceSlots } from '@fluentui/react-dialog';
import { DialogTitleSlots } from '@fluentui/react-dialog';
import type { ForwardRefComponent } from '@fluentui/react-utilities';
import * as React_2 from 'react';
import type { Slot } from '@fluentui/react-utilities';
import type { SlotClassNames } from '@fluentui/react-utilities';

/**
 * Drawer contains supplementary content and are used for complex creation, edit, or management experiences.
 */
export declare const Drawer: ForwardRefComponent<DrawerProps>;

declare type DrawerBaseProps = {
    /**
     * Position of the drawer.
     *
     * @default 'left'
     */
    position?: 'left' | 'right';
    /**
     * Size of the drawer.
     *
     * - 'small' - Drawer is 320px wide.
     * - 'medium' - Drawer is 592px wide.
     * - 'large' - Drawer is 940px wide.
     * - 'full' - Drawer is 100vw wide.
     *
     * @default 'small'
     */
    size?: 'small' | 'medium' | 'large' | 'full';
    /**
     * Controls the open state of the Drawer
     *
     * @default false
     */
    open?: boolean;
    /**
     * Default value for the uncontrolled open state of the Drawer.
     *
     * @default false
     */
    defaultOpen?: boolean;
};

/**
 * DrawerBody provides with a container for the main content of a Drawer.
 */
export declare const DrawerBody: ForwardRefComponent<DrawerBodyProps>;

export declare const drawerBodyClassNames: SlotClassNames<DrawerBodySlots>;

/**
 * DrawerBody Props
 */
export declare type DrawerBodyProps = ComponentProps<DrawerBodySlots>;

export declare type DrawerBodySlots = {
    root: Slot<'div'>;
};

/**
 * State used in rendering DrawerBody
 */
export declare type DrawerBodyState = ComponentState<DrawerBodySlots>;

/**
 * DrawerFooter component - TODO: add more docs
 */
export declare const DrawerFooter: ForwardRefComponent<DrawerFooterProps>;

export declare const drawerFooterClassNames: SlotClassNames<DrawerFooterSlots>;

/**
 * DrawerFooter Props
 */
export declare type DrawerFooterProps = ComponentProps<DrawerFooterSlots>;

export declare type DrawerFooterSlots = {
    root: Slot<'footer'>;
};

/**
 * State used in rendering DrawerFooter
 */
export declare type DrawerFooterState = ComponentState<DrawerFooterSlots>;

/**
 * DrawerHeader provides a structured header for the drawer component.
 */
export declare const DrawerHeader: ForwardRefComponent<DrawerHeaderProps>;

export declare const drawerHeaderClassNames: SlotClassNames<DrawerHeaderSlots>;

/**
 * DrawerHeaderNavigation provides a header navigation area for the Drawer.
 */
export declare const DrawerHeaderNavigation: ForwardRefComponent<DrawerHeaderNavigationProps>;

export declare const drawerHeaderNavigationClassNames: SlotClassNames<DrawerHeaderNavigationSlots>;

/**
 * DrawerHeaderNavigation Props
 */
export declare type DrawerHeaderNavigationProps = ComponentProps<DrawerHeaderNavigationSlots>;

export declare type DrawerHeaderNavigationSlots = {
    root: Slot<'nav'>;
};

/**
 * State used in rendering DrawerHeaderNavigation
 */
export declare type DrawerHeaderNavigationState = ComponentState<DrawerHeaderNavigationSlots>;

/**
 * DrawerHeader Props
 */
export declare type DrawerHeaderProps = ComponentProps<DrawerHeaderSlots>;

export declare type DrawerHeaderSlots = {
    /**
     * The root of the DrawerHeader.
     */
    root: Slot<'header'>;
};

/**
 * State used in rendering DrawerHeader
 */
export declare type DrawerHeaderState = ComponentState<DrawerHeaderSlots>;

/**
 * DrawerHeader provides a structured header for the drawer component.
 */
export declare const DrawerHeaderTitle: ForwardRefComponent<DrawerHeaderTitleProps>;

export declare const drawerHeaderTitleClassNames: SlotClassNames<DrawerHeaderTitleSlots>;

/**
 * DrawerHeaderTitle Props
 */
export declare type DrawerHeaderTitleProps = ComponentProps<DrawerHeaderTitleSlots> & {
    /**
     * Content of the DrawerHeaderTitle
     * Children is mandatory because DrawerHeaderTitle is a wrapper component
     */
    children: React_2.ReactNode | undefined;
};

export declare type DrawerHeaderTitleSlots = {
    root: Slot<'div'>;
    /**
     * By default this is a h2, but can be any heading or div.
     * If `div` is provided do not forget to also provide proper `role="heading"` and `aria-level` attributes
     */
    heading?: DialogTitleSlots['root'];
    /**
     * Action slot for the close button
     */
    action?: DialogTitleSlots['action'];
};

/**
 * State used in rendering DrawerHeaderTitle
 */
export declare type DrawerHeaderTitleState = ComponentState<DrawerHeaderTitleSlots>;

/**
 * DrawerInline is often used for navigation that is not dissmissable. As it is on the same level as
 * the main surface, users can still interact with other UI elements.
 */
export declare const DrawerInline: ForwardRefComponent<DrawerInlineProps>;

export declare const drawerInlineClassNames: SlotClassNames<DrawerInlineSlots>;

/**
 * DrawerInline Props
 */
export declare type DrawerInlineProps = ComponentProps<DrawerInlineSlots> & DrawerBaseProps & {
    /**
     * Whether the drawer has a separator line.
     *
     * @default false
     */
    separator?: boolean;
};

export declare type DrawerInlineSlots = {
    root: Slot<'div'>;
};

/**
 * State used in rendering DrawerInline
 */
export declare type DrawerInlineState = ComponentState<DrawerInlineSlots> & DrawerInlineProps;

/**
 * DrawerOverlay contains supplementary content and are used for complex creation, edit, or management experiences.
 */
export declare const DrawerOverlay: ForwardRefComponent<DrawerOverlayProps>;

export declare const drawerOverlayClassNames: SlotClassNames<DrawerOverlaySlots>;

/**
 * DrawerOverlay Props
 */
export declare type DrawerOverlayProps = ComponentProps<DrawerOverlaySlots> & DrawerBaseProps & Pick<DialogProps, 'modalType' | 'onOpenChange' | 'inertTrapFocus'>;

export declare type DrawerOverlaySlots = DialogSurfaceSlots & {
    root: Slot<DialogSurfaceProps>;
};

/**
 * State used in rendering DrawerOverlay
 */
export declare type DrawerOverlayState = ComponentState<DrawerOverlaySlots> & DrawerBaseProps & {
    dialog: DialogProps;
};

/**
 * Drawer Props
 */
export declare type DrawerProps = ComponentProps<Partial<DrawerSlots>> & {
    /**
     * Type of the drawer.
     * @default overlay
     *
     * - 'overlay' - Drawer is hidden by default and can be opened by clicking on the trigger.
     * - 'inline' - Drawer is stacked with the content
     */
    type?: 'inline' | 'overlay';
};

export declare type DrawerSlots = {
    /**
     * Root slot of the Drawer.
     */
    root: Slot<DrawerOverlayProps | DrawerInlineProps>;
};

/**
 * State used in rendering Drawer
 */
export declare type DrawerState = ComponentState<DrawerSlots>;

/**
 * Render the final JSX of Drawer
 */
export declare const renderDrawer_unstable: (state: DrawerState) => JSX.Element;

/**
 * Render the final JSX of DrawerBody
 */
export declare const renderDrawerBody_unstable: (state: DrawerBodyState) => JSX.Element;

/**
 * Render the final JSX of DrawerFooter
 */
export declare const renderDrawerFooter_unstable: (state: DrawerFooterState) => JSX.Element;

/**
 * Render the final JSX of DrawerHeader
 */
export declare const renderDrawerHeader_unstable: (state: DrawerHeaderState) => JSX.Element;

/**
 * Render the final JSX of DrawerHeaderNavigation
 */
export declare const renderDrawerHeaderNavigation_unstable: (state: DrawerHeaderNavigationState) => JSX.Element;

/**
 * Render the final JSX of DrawerHeaderTitle
 */
export declare const renderDrawerHeaderTitle_unstable: (state: DrawerHeaderTitleState) => JSX.Element;

/**
 * Render the final JSX of DrawerInline
 */
export declare const renderDrawerInline_unstable: (state: DrawerInlineState) => JSX.Element | null;

/**
 * Render the final JSX of DrawerOverlay
 */
export declare const renderDrawerOverlay_unstable: (state: DrawerOverlayState) => JSX.Element;

/**
 * Create the state required to render Drawer.
 *
 * The returned state can be modified with hooks such as useDrawerStyles_unstable,
 * before being passed to renderDrawer_unstable.
 *
 * @param props - props from this instance of Drawer
 * @param ref - reference to root HTMLElement of Drawer
 */
export declare const useDrawer_unstable: (props: DrawerProps, ref: React_2.Ref<HTMLElement>) => DrawerState;

/**
 * Create the state required to render DrawerBody.
 *
 * The returned state can be modified with hooks such as useDrawerBodyStyles_unstable,
 * before being passed to renderDrawerBody_unstable.
 *
 * @param props - props from this instance of DrawerBody
 * @param ref - reference to root HTMLElement of DrawerBody
 */
export declare const useDrawerBody_unstable: (props: DrawerBodyProps, ref: React_2.Ref<HTMLElement>) => DrawerBodyState;

/**
 * Apply styling to the DrawerBody slots based on the state
 */
export declare const useDrawerBodyStyles_unstable: (state: DrawerBodyState) => DrawerBodyState;

/**
 * Create the state required to render DrawerFooter.
 *
 * The returned state can be modified with hooks such as useDrawerFooterStyles_unstable,
 * before being passed to renderDrawerFooter_unstable.
 *
 * @param props - props from this instance of DrawerFooter
 * @param ref - reference to root HTMLElement of DrawerFooter
 */
export declare const useDrawerFooter_unstable: (props: DrawerFooterProps, ref: React_2.Ref<HTMLElement>) => DrawerFooterState;

/**
 * Apply styling to the DrawerFooter slots based on the state
 */
export declare const useDrawerFooterStyles_unstable: (state: DrawerFooterState) => DrawerFooterState;

/**
 * Create the state required to render DrawerHeader.
 *
 * The returned state can be modified with hooks such as useDrawerHeaderStyles_unstable,
 * before being passed to renderDrawerHeader_unstable.
 *
 * @param props - props from this instance of DrawerHeader
 * @param ref - reference to root HTMLElement of DrawerHeader
 */
export declare const useDrawerHeader_unstable: (props: DrawerHeaderProps, ref: React_2.Ref<HTMLElement>) => DrawerHeaderState;

/**
 * Create the state required to render DrawerHeaderNavigation.
 *
 * The returned state can be modified with hooks such as useDrawerHeaderNavigationStyles_unstable,
 * before being passed to renderDrawerHeaderNavigation_unstable.
 *
 * @param props - props from this instance of DrawerHeaderNavigation
 * @param ref - reference to root HTMLElement of DrawerHeaderNavigation
 */
export declare const useDrawerHeaderNavigation_unstable: (props: DrawerHeaderNavigationProps, ref: React_2.Ref<HTMLElement>) => DrawerHeaderNavigationState;

/**
 * Apply styling to the DrawerHeaderNavigation slots based on the state
 */
export declare const useDrawerHeaderNavigationStyles_unstable: (state: DrawerHeaderNavigationState) => DrawerHeaderNavigationState;

/**
 * Apply styling to the DrawerHeader slots based on the state
 */
export declare const useDrawerHeaderStyles_unstable: (state: DrawerHeaderState) => DrawerHeaderState;

/**
 * Create the state required to render DrawerHeaderTitle.
 *
 * The returned state can be modified with hooks such as useDrawerHeaderTitleStyles_unstable,
 * before being passed to renderDrawerHeaderTitle_unstable.
 *
 * @param props - props from this instance of DrawerHeaderTitle
 * @param ref - reference to root HTMLElement of DrawerHeaderTitle
 */
export declare const useDrawerHeaderTitle_unstable: (props: DrawerHeaderTitleProps, ref: React_2.Ref<HTMLDivElement>) => DrawerHeaderTitleState;

/**
 * Apply styling to the DrawerHeaderTitle slots based on the state
 */
export declare const useDrawerHeaderTitleStyles_unstable: (state: DrawerHeaderTitleState) => DrawerHeaderTitleState;

/**
 * Create the state required to render DrawerInline.
 *
 * The returned state can be modified with hooks such as useDrawerInlineStyles_unstable,
 * before being passed to renderDrawerInline_unstable.
 *
 * @param props - props from this instance of DrawerInline
 * @param ref - reference to root HTMLElement of DrawerInline
 */
export declare const useDrawerInline_unstable: (props: DrawerInlineProps, ref: React_2.Ref<HTMLElement>) => DrawerInlineState;

/**
 * Apply styling to the DrawerInline slots based on the state
 */
export declare const useDrawerInlineStyles_unstable: (state: DrawerInlineState) => DrawerInlineState;

/**
 * Create the state required to render DrawerOverlay.
 *
 * The returned state can be modified with hooks such as useDrawerOverlayStyles_unstable,
 * before being passed to renderDrawerOverlay_unstable.
 *
 * @param props - props from this instance of DrawerOverlay
 * @param ref - reference to root HTMLElement of DrawerOverlay
 */
export declare const useDrawerOverlay_unstable: (props: DrawerOverlayProps, ref: React_2.Ref<HTMLElement>) => DrawerOverlayState;

/**
 * Apply styling to the DrawerOverlay slots based on the state
 */
export declare const useDrawerOverlayStyles_unstable: (state: DrawerOverlayState) => DrawerOverlayState;

export { }
