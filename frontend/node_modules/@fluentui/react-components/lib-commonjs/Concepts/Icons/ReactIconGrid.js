"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: ()=>_default
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactIcons = /*#__PURE__*/ _interopRequireWildcard(require("@fluentui/react-icons"));
const _reactInput = require("@fluentui/react-input");
const _react1 = require("@griffel/react");
// eslint-disable-next-line @griffel/styles-file
const useStyles = (0, _react1.makeStyles)({
    grid: {
        display: 'grid',
        gridTemplateColumns: 'auto auto auto auto',
        gridGap: '10px',
        backgroundColor: '#F7F7F7',
        '> div': {
            alignItems: 'center',
            backgroundColor: '#FFFFFF',
            display: 'flex',
            flexDirection: 'column',
            justifyContent: 'space-around',
            ..._react1.shorthands.padding('8px'),
            ..._react1.shorthands.overflow('hidden'),
            '> code': {
                fontSize: '8px',
                display: 'inline-block',
                height: 'auto',
                ..._react1.shorthands.padding('0px 8px')
            }
        }
    },
    searchBox: {
        backgroundColor: '#F7F7F7',
        maxWidth: '320px',
        marginBottom: '10px'
    },
    radio: {
        backgroundColor: '#F7F7F7',
        fontSize: '11px'
    }
});
const reactIcons = Object.keys(_reactIcons) // eslint-disable-next-line @typescript-eslint/no-explicit-any
.map((iconName)=>_reactIcons[iconName]).filter((icon)=>!!icon && !!icon.displayName);
const ReactIconGrid = ()=>{
    const [search, setSearch] = _react.useState('');
    const [size, setSize] = _react.useState(24);
    const styles = useStyles();
    const _onSearchQueryChanged = (ev)=>{
        setSearch(ev ? ev.currentTarget.value : '');
    };
    const _filterBySize = (ev)=>{
        const newSize = ev ? ev.currentTarget.value : '';
        if (newSize === 'All') {
            setSize('');
        } else if (newSize === 'Unsized') {
            setSize('Unsized');
        } else {
            setSize(newSize);
        }
    };
    const _renderIcon = (Icon)=>{
        return /*#__PURE__*/ _react.createElement("div", {
            key: Icon.displayName,
            "aria-label": Icon.displayName
        }, /*#__PURE__*/ _react.createElement(Icon, null), /*#__PURE__*/ _react.createElement("br", null), /*#__PURE__*/ _react.createElement("code", null, Icon.displayName));
    };
    const filteredIcons = _react.useMemo(()=>{
        return reactIcons.filter((icon)=>{
            var _icon_displayName, _icon_displayName1;
            if (size === 'Unsized') {
                var _icon_displayName2;
                return icon.displayName && !/\d/.test(icon.displayName.toLowerCase()) && ((_icon_displayName2 = icon.displayName) === null || _icon_displayName2 === void 0 ? void 0 : _icon_displayName2.toLowerCase().indexOf(search.toLowerCase())) !== -1;
            }
            return ((_icon_displayName = icon.displayName) === null || _icon_displayName === void 0 ? void 0 : _icon_displayName.toLowerCase().indexOf(search.toLowerCase())) !== -1 && ((_icon_displayName1 = icon.displayName) === null || _icon_displayName1 === void 0 ? void 0 : _icon_displayName1.indexOf(String(size))) !== -1;
        });
    }, [
        search,
        size
    ]);
    return /*#__PURE__*/ _react.createElement("div", null, /*#__PURE__*/ _react.createElement(_reactInput.Input, {
        type: "search",
        placeholder: "Search icons",
        value: search,
        "aria-label": "search",
        // eslint-disable-next-line react/jsx-no-bind
        onChange: _onSearchQueryChanged,
        className: styles.searchBox
    }), [
        16,
        20,
        24,
        28,
        32,
        48,
        'Unsized',
        'All'
    ].map((option)=>/*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement("input", {
            id: `option-${option}`,
            defaultChecked: option === 24,
            type: "radio",
            value: option,
            name: "size",
            onChange: _filterBySize
        }), /*#__PURE__*/ _react.createElement("label", {
            htmlFor: `option-${option}`,
            className: styles.radio
        }, option))), /*#__PURE__*/ _react.createElement("div", {
        className: styles.grid
    }, filteredIcons.map(_renderIcon)));
};
const _default = ReactIconGrid;
