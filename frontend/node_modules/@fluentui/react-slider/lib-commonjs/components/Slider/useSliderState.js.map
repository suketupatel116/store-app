{"version":3,"sources":["useSliderState.js"],"sourcesContent":["import * as React from 'react';\nimport { clamp, useControllableState, useEventCallback } from '@fluentui/react-utilities';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { sliderCSSVars } from './useSliderStyles.styles';\nconst { sliderStepsPercentVar , sliderProgressVar , sliderDirectionVar  } = sliderCSSVars;\nconst getPercent = (value, min, max)=>{\n    return max === min ? 0 : (value - min) / (max - min) * 100;\n};\nexport const useSliderState_unstable = (state, props)=>{\n    const { defaultValue =0 , min =0 , max =100 , step , value  } = props;\n    const { dir  } = useFluent();\n    const [currentValue, setCurrentValue] = useControllableState({\n        state: value !== undefined ? clamp(value, min, max) : undefined,\n        defaultState: clamp(defaultValue, min, max),\n        initialState: 0\n    });\n    const valuePercent = getPercent(currentValue, min, max);\n    const inputOnChange = state.input.onChange;\n    const propsOnChange = props.onChange;\n    const onChange = useEventCallback((ev)=>{\n        const newValue = Number(ev.target.value);\n        setCurrentValue(clamp(newValue, min, max));\n        if (inputOnChange && inputOnChange !== propsOnChange) {\n            inputOnChange(ev);\n        } else if (propsOnChange) {\n            propsOnChange(ev, {\n                value: newValue\n            });\n        }\n    });\n    const rootVariables = {\n        [sliderDirectionVar]: state.vertical ? '0deg' : dir === 'ltr' ? '90deg' : '270deg',\n        [sliderStepsPercentVar]: step && step > 0 ? `${step * 100 / (max - min)}%` : '',\n        [sliderProgressVar]: `${valuePercent}%`\n    };\n    // Root props\n    state.root.style = {\n        ...rootVariables,\n        ...state.root.style\n    };\n    // Input Props\n    state.input.value = currentValue;\n    state.input.onChange = onChange;\n    return state;\n};\n"],"names":["useSliderState_unstable","sliderStepsPercentVar","sliderProgressVar","sliderDirectionVar","sliderCSSVars","getPercent","value","min","max","state","props","defaultValue","step","dir","useFluent","currentValue","setCurrentValue","useControllableState","undefined","clamp","defaultState","initialState","valuePercent","inputOnChange","input","onChange","propsOnChange","useEventCallback","ev","newValue","Number","target","rootVariables","vertical","root","style"],"mappings":";;;;+BAQaA;;aAAAA;;;6DARU;gCACuC;qCACd;uCAClB;AAC9B,MAAM,EAAEC,sBAAqB,EAAGC,kBAAiB,EAAGC,mBAAkB,EAAG,GAAGC,oCAAa;AACzF,MAAMC,aAAa,CAACC,OAAOC,KAAKC,MAAM;IAClC,OAAOA,QAAQD,MAAM,IAAI,AAACD,CAAAA,QAAQC,GAAE,IAAMC,CAAAA,MAAMD,GAAE,IAAK,GAAG;AAC9D;AACO,MAAMP,0BAA0B,CAACS,OAAOC,QAAQ;IACnD,MAAM,EAAEC,cAAc,EAAC,EAAGJ,KAAK,EAAC,EAAGC,KAAK,IAAG,EAAGI,KAAI,EAAGN,MAAK,EAAG,GAAGI;IAChE,MAAM,EAAEG,IAAG,EAAG,GAAGC,IAAAA,uCAAS;IAC1B,MAAM,CAACC,cAAcC,gBAAgB,GAAGC,IAAAA,oCAAoB,EAAC;QACzDR,OAAOH,UAAUY,YAAYC,IAAAA,qBAAK,EAACb,OAAOC,KAAKC,OAAOU,SAAS;QAC/DE,cAAcD,IAAAA,qBAAK,EAACR,cAAcJ,KAAKC;QACvCa,cAAc;IAClB;IACA,MAAMC,eAAejB,WAAWU,cAAcR,KAAKC;IACnD,MAAMe,gBAAgBd,MAAMe,KAAK,CAACC,QAAQ;IAC1C,MAAMC,gBAAgBhB,MAAMe,QAAQ;IACpC,MAAMA,WAAWE,IAAAA,gCAAgB,EAAC,CAACC,KAAK;QACpC,MAAMC,WAAWC,OAAOF,GAAGG,MAAM,CAACzB,KAAK;QACvCU,gBAAgBG,IAAAA,qBAAK,EAACU,UAAUtB,KAAKC;QACrC,IAAIe,iBAAiBA,kBAAkBG,eAAe;YAClDH,cAAcK;QAClB,OAAO,IAAIF,eAAe;YACtBA,cAAcE,IAAI;gBACdtB,OAAOuB;YACX;QACJ,CAAC;IACL;IACA,MAAMG,gBAAgB;QAClB,CAAC7B,mBAAmB,EAAEM,MAAMwB,QAAQ,GAAG,SAASpB,QAAQ,QAAQ,UAAU,QAAQ;QAClF,CAACZ,sBAAsB,EAAEW,QAAQA,OAAO,IAAI,CAAC,EAAEA,OAAO,MAAOJ,CAAAA,MAAMD,GAAE,EAAG,CAAC,CAAC,GAAG,EAAE;QAC/E,CAACL,kBAAkB,EAAE,CAAC,EAAEoB,aAAa,CAAC,CAAC;IAC3C;IACA,aAAa;IACbb,MAAMyB,IAAI,CAACC,KAAK,GAAG;QACf,GAAGH,aAAa;QAChB,GAAGvB,MAAMyB,IAAI,CAACC,KAAK;IACvB;IACA,cAAc;IACd1B,MAAMe,KAAK,CAAClB,KAAK,GAAGS;IACpBN,MAAMe,KAAK,CAACC,QAAQ,GAAGA;IACvB,OAAOhB;AACX"}