{"version":3,"sources":["useSpinButton.js"],"sourcesContent":["import * as React from 'react';\nimport { useFieldControlProps_unstable } from '@fluentui/react-field';\nimport { getPartitionedNativeProps, mergeCallbacks, resolveShorthand, useControllableState, useTimeout } from '@fluentui/react-utilities';\nimport { ArrowUp, ArrowDown, End, Enter, Escape, Home, PageDown, PageUp } from '@fluentui/keyboard-keys';\nimport { calculatePrecision, precisionRound, getBound, clamp } from '../../utils/index';\nimport { ChevronUp16Regular, ChevronDown16Regular } from '@fluentui/react-icons';\nimport { useOverrides_unstable as useOverrides } from '@fluentui/react-shared-contexts';\nconst DEFAULT_SPIN_DELAY_MS = 150;\nconst MIN_SPIN_DELAY_MS = 80;\nconst MAX_SPIN_TIME_MS = 1000;\n// This is here to give an ease for the mouse held down case.\n// Exact easing it to be defined. Once it is we'll likely\n// pull this out into a util function in the SpinButton package.\nconst lerp = (start, end, percent)=>start + (end - start) * percent;\n/**\n * Create the state required to render SpinButton.\n *\n * The returned state can be modified with hooks such as useSpinButtonStyles_unstable,\n * before being passed to renderSpinButton_unstable.\n *\n * @param props - props from this instance of SpinButton\n * @param ref - reference to root HTMLElement of SpinButton\n */ export const useSpinButton_unstable = (props, ref)=>{\n    // Merge props from surrounding <Field>, if any\n    props = useFieldControlProps_unstable(props, {\n        supportsLabelFor: true,\n        supportsRequired: true\n    });\n    const nativeProps = getPartitionedNativeProps({\n        props,\n        primarySlotTagName: 'input',\n        excludedPropNames: [\n            'defaultValue',\n            'max',\n            'min',\n            'onChange',\n            'size',\n            'value'\n        ]\n    });\n    const overrides = useOverrides();\n    var _overrides_inputDefaultAppearance;\n    const { value , displayValue , defaultValue , min , max , step =1 , stepPage =1 , precision: precisionFromProps , onChange , size ='medium' , appearance =(_overrides_inputDefaultAppearance = overrides.inputDefaultAppearance) !== null && _overrides_inputDefaultAppearance !== void 0 ? _overrides_inputDefaultAppearance : 'outline' , root , input , incrementButton , decrementButton  } = props;\n    const precision = React.useMemo(()=>{\n        return precisionFromProps !== null && precisionFromProps !== void 0 ? precisionFromProps : Math.max(calculatePrecision(step), 0);\n    }, [\n        precisionFromProps,\n        step\n    ]);\n    const [currentValue, setCurrentValue] = useControllableState({\n        state: value,\n        defaultState: defaultValue,\n        initialState: 0\n    });\n    const isControlled = value !== undefined;\n    const [textValue, setTextValue] = React.useState(undefined);\n    const [keyboardSpinState, setKeyboardSpinState] = React.useState('rest');\n    const internalState = React.useRef({\n        value: currentValue,\n        spinState: 'rest',\n        spinTime: 0,\n        spinDelay: DEFAULT_SPIN_DELAY_MS,\n        atBound: currentValue !== null ? getBound(precisionRound(currentValue, precision), min, max) : 'none'\n    });\n    const [setStepTimeout, clearStepTimeout] = useTimeout();\n    const stepValue = (e, direction, startFrom)=>{\n        let startValue = internalState.current.value;\n        if (startFrom) {\n            const num = parseFloat(startFrom);\n            if (!isNaN(num)) {\n                startValue = num;\n            }\n        }\n        const val = startValue;\n        const dir = direction === 'up' || direction === 'upPage' ? 1 : -1;\n        const stepSize = direction === 'upPage' || direction === 'downPage' ? stepPage : step;\n        if (val === null) {\n            const stepStart = min === undefined ? 0 : min;\n            const nullStep = clamp(stepStart + stepSize * dir, min, max);\n            commit(e, nullStep);\n            return;\n        }\n        let newValue = val + stepSize * dir;\n        if (!Number.isNaN(newValue)) {\n            newValue = clamp(newValue, min, max);\n        }\n        commit(e, newValue);\n        if (internalState.current.spinState !== 'rest') {\n            setStepTimeout(()=>{\n                // Ease the step speed a bit\n                internalState.current.spinTime += internalState.current.spinDelay;\n                internalState.current.spinDelay = lerp(DEFAULT_SPIN_DELAY_MS, MIN_SPIN_DELAY_MS, internalState.current.spinTime / MAX_SPIN_TIME_MS);\n                stepValue(e, direction);\n            }, internalState.current.spinDelay);\n        }\n    };\n    const handleInputChange = (e)=>{\n        if (!internalState.current.previousTextValue) {\n            internalState.current.previousTextValue = textValue !== null && textValue !== void 0 ? textValue : String(currentValue);\n        }\n        const newValue = e.target.value;\n        setTextValue(newValue);\n    };\n    const handleIncrementMouseDown = (e)=>{\n        internalState.current.spinState = 'up';\n        stepValue(e, 'up');\n    };\n    const handleDecrementMouseDown = (e)=>{\n        internalState.current.spinState = 'down';\n        stepValue(e, 'down');\n    };\n    const handleStepMouseUpOrLeave = (e)=>{\n        clearStepTimeout();\n        internalState.current.spinState = 'rest';\n        internalState.current.spinDelay = DEFAULT_SPIN_DELAY_MS;\n        internalState.current.spinTime = 0;\n    };\n    const handleBlur = (e)=>{\n        commit(e, currentValue, textValue);\n        internalState.current.previousTextValue = undefined;\n    };\n    const handleKeyDown = (e)=>{\n        let nextKeyboardSpinState = 'rest';\n        if (e.key === ArrowUp) {\n            stepValue(e, 'up', textValue);\n            nextKeyboardSpinState = 'up';\n        } else if (e.key === ArrowDown) {\n            stepValue(e, 'down', textValue);\n            nextKeyboardSpinState = 'down';\n        } else if (e.key === PageUp) {\n            e.preventDefault();\n            stepValue(e, 'upPage', textValue);\n            nextKeyboardSpinState = 'up';\n        } else if (e.key === PageDown) {\n            e.preventDefault();\n            stepValue(e, 'downPage', textValue);\n            nextKeyboardSpinState = 'down';\n        } else if (!e.shiftKey && e.key === Home && min !== undefined) {\n            commit(e, min);\n            nextKeyboardSpinState = 'down';\n        } else if (!e.shiftKey && e.key === End && max !== undefined) {\n            commit(e, max);\n            nextKeyboardSpinState = 'up';\n        } else if (e.key === Enter) {\n            commit(e, currentValue, textValue);\n            internalState.current.previousTextValue = undefined;\n        } else if (e.key === Escape) {\n            if (internalState.current.previousTextValue) {\n                setTextValue(undefined);\n                internalState.current.previousTextValue = undefined;\n            }\n        }\n        if (keyboardSpinState !== nextKeyboardSpinState) {\n            setKeyboardSpinState(nextKeyboardSpinState);\n        }\n    };\n    const handleKeyUp = (e)=>{\n        if (keyboardSpinState !== 'rest') {\n            setKeyboardSpinState('rest');\n            internalState.current.spinState = 'rest';\n        }\n    };\n    const commit = (e, newValue, newDisplayValue)=>{\n        const valueChanged = newValue !== undefined && currentValue !== newValue;\n        const displayValueChanged = newDisplayValue !== undefined && internalState.current.previousTextValue !== undefined && internalState.current.previousTextValue !== newDisplayValue;\n        let roundedValue;\n        if (valueChanged) {\n            roundedValue = precisionRound(newValue, precision);\n            setCurrentValue(roundedValue);\n        } else if (displayValueChanged && !isControlled) {\n            const nextValue = parseFloat(newDisplayValue);\n            if (!isNaN(nextValue)) {\n                setCurrentValue(precisionRound(nextValue, precision));\n            }\n        }\n        if (valueChanged || displayValueChanged) {\n            onChange === null || onChange === void 0 ? void 0 : onChange(e, {\n                value: roundedValue,\n                displayValue: newDisplayValue\n            });\n        }\n        setTextValue(undefined);\n    };\n    const state = {\n        size,\n        appearance,\n        spinState: keyboardSpinState,\n        atBound: internalState.current.atBound,\n        components: {\n            root: 'span',\n            input: 'input',\n            incrementButton: 'button',\n            decrementButton: 'button'\n        },\n        root: resolveShorthand(root, {\n            required: true,\n            defaultProps: nativeProps.root\n        }),\n        input: resolveShorthand(input, {\n            required: true,\n            defaultProps: {\n                ref,\n                autoComplete: 'off',\n                role: 'spinbutton',\n                appearance,\n                type: 'text',\n                ...nativeProps.primary\n            }\n        }),\n        incrementButton: resolveShorthand(incrementButton, {\n            required: true,\n            defaultProps: {\n                tabIndex: -1,\n                children: /*#__PURE__*/ React.createElement(ChevronUp16Regular, null),\n                disabled: nativeProps.primary.disabled,\n                'aria-label': 'Increment value',\n                type: 'button'\n            }\n        }),\n        decrementButton: resolveShorthand(decrementButton, {\n            required: true,\n            defaultProps: {\n                tabIndex: -1,\n                children: /*#__PURE__*/ React.createElement(ChevronDown16Regular, null),\n                disabled: nativeProps.primary.disabled,\n                'aria-label': 'Decrement value',\n                type: 'button'\n            }\n        })\n    };\n    let valueToDisplay;\n    if (textValue !== undefined) {\n        valueToDisplay = textValue;\n    } else if (value === null || currentValue === null) {\n        valueToDisplay = displayValue !== null && displayValue !== void 0 ? displayValue : '';\n        internalState.current.value = null;\n        internalState.current.atBound = 'none';\n    } else {\n        const roundedValue = precisionRound(currentValue, precision);\n        internalState.current.value = roundedValue;\n        internalState.current.atBound = getBound(roundedValue, min, max);\n        if (isControlled) {\n            valueToDisplay = displayValue !== null && displayValue !== void 0 ? displayValue : String(roundedValue);\n        } else {\n            valueToDisplay = String(roundedValue);\n        }\n    }\n    state.input.value = valueToDisplay;\n    state.input['aria-valuemin'] = min;\n    state.input['aria-valuemax'] = max;\n    state.input['aria-valuenow'] = currentValue !== null && currentValue !== void 0 ? currentValue : undefined;\n    var _state_input_ariavaluetext;\n    state.input['aria-valuetext'] = (_state_input_ariavaluetext = state.input['aria-valuetext']) !== null && _state_input_ariavaluetext !== void 0 ? _state_input_ariavaluetext : value !== undefined && displayValue || undefined;\n    state.input.onChange = mergeCallbacks(state.input.onChange, handleInputChange);\n    state.input.onBlur = mergeCallbacks(state.input.onBlur, handleBlur);\n    state.input.onKeyDown = mergeCallbacks(state.input.onKeyDown, handleKeyDown);\n    state.input.onKeyUp = mergeCallbacks(state.input.onKeyUp, handleKeyUp);\n    state.incrementButton.onMouseDown = mergeCallbacks(handleIncrementMouseDown, state.incrementButton.onMouseDown);\n    state.incrementButton.onMouseUp = mergeCallbacks(state.incrementButton.onMouseUp, handleStepMouseUpOrLeave);\n    state.incrementButton.onMouseLeave = mergeCallbacks(state.incrementButton.onMouseLeave, handleStepMouseUpOrLeave);\n    state.decrementButton.onMouseDown = mergeCallbacks(handleDecrementMouseDown, state.decrementButton.onMouseDown);\n    state.decrementButton.onMouseUp = mergeCallbacks(state.decrementButton.onMouseUp, handleStepMouseUpOrLeave);\n    state.decrementButton.onMouseLeave = mergeCallbacks(state.decrementButton.onMouseLeave, handleStepMouseUpOrLeave);\n    return state;\n};\n"],"names":["useSpinButton_unstable","DEFAULT_SPIN_DELAY_MS","MIN_SPIN_DELAY_MS","MAX_SPIN_TIME_MS","lerp","start","end","percent","props","ref","useFieldControlProps_unstable","supportsLabelFor","supportsRequired","nativeProps","getPartitionedNativeProps","primarySlotTagName","excludedPropNames","overrides","useOverrides","_overrides_inputDefaultAppearance","value","displayValue","defaultValue","min","max","step","stepPage","precision","precisionFromProps","onChange","size","appearance","inputDefaultAppearance","root","input","incrementButton","decrementButton","React","useMemo","Math","calculatePrecision","currentValue","setCurrentValue","useControllableState","state","defaultState","initialState","isControlled","undefined","textValue","setTextValue","useState","keyboardSpinState","setKeyboardSpinState","internalState","useRef","spinState","spinTime","spinDelay","atBound","getBound","precisionRound","setStepTimeout","clearStepTimeout","useTimeout","stepValue","e","direction","startFrom","startValue","current","num","parseFloat","isNaN","val","dir","stepSize","stepStart","nullStep","clamp","commit","newValue","Number","handleInputChange","previousTextValue","String","target","handleIncrementMouseDown","handleDecrementMouseDown","handleStepMouseUpOrLeave","handleBlur","handleKeyDown","nextKeyboardSpinState","key","ArrowUp","ArrowDown","PageUp","preventDefault","PageDown","shiftKey","Home","End","Enter","Escape","handleKeyUp","newDisplayValue","valueChanged","displayValueChanged","roundedValue","nextValue","components","resolveShorthand","required","defaultProps","autoComplete","role","type","primary","tabIndex","children","createElement","ChevronUp16Regular","disabled","ChevronDown16Regular","valueToDisplay","_state_input_ariavaluetext","mergeCallbacks","onBlur","onKeyDown","onKeyUp","onMouseDown","onMouseUp","onMouseLeave"],"mappings":"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"}