"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useField_unstable", {
    enumerable: true,
    get: ()=>useField_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactIcons = require("@fluentui/react-icons");
const _reactLabel = require("@fluentui/react-label");
const _reactUtilities = require("@fluentui/react-utilities");
const validationMessageIcons = {
    error: /*#__PURE__*/ _react.createElement(_reactIcons.ErrorCircle12Filled, null),
    warning: /*#__PURE__*/ _react.createElement(_reactIcons.Warning12Filled, null),
    success: /*#__PURE__*/ _react.createElement(_reactIcons.CheckmarkCircle12Filled, null),
    none: undefined
};
const useField_unstable = (props, ref)=>{
    const { children , orientation ='vertical' , required =false , validationState =props.validationMessage ? 'error' : 'none' , size ='medium'  } = props;
    const baseId = (0, _reactUtilities.useId)('field-');
    const generatedControlId = baseId + '__control';
    const root = (0, _reactUtilities.getNativeElementProps)('div', {
        ...props,
        ref
    }, /*excludedPropNames:*/ [
        'children'
    ]);
    const label = (0, _reactUtilities.resolveShorthand)(props.label, {
        defaultProps: {
            htmlFor: generatedControlId,
            id: baseId + '__label',
            required,
            size
        }
    });
    const validationMessage = (0, _reactUtilities.resolveShorthand)(props.validationMessage, {
        defaultProps: {
            id: baseId + '__validationMessage',
            role: validationState === 'error' ? 'alert' : undefined
        }
    });
    const hint = (0, _reactUtilities.resolveShorthand)(props.hint, {
        defaultProps: {
            id: baseId + '__hint'
        }
    });
    const defaultIcon = validationMessageIcons[validationState];
    const validationMessageIcon = (0, _reactUtilities.resolveShorthand)(props.validationMessageIcon, {
        required: !!defaultIcon,
        defaultProps: {
            children: defaultIcon
        }
    });
    return {
        children,
        generatedControlId,
        orientation,
        required,
        size,
        validationState,
        components: {
            root: 'div',
            label: _reactLabel.Label,
            validationMessage: 'div',
            validationMessageIcon: 'span',
            hint: 'div'
        },
        root,
        label,
        validationMessageIcon,
        validationMessage,
        hint
    };
};
