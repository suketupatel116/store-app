{"version":3,"names":["__resetStyles","__styles","mergeClasses","shorthands","createFocusOutlineStyle","tokens","checkboxClassNames","root","label","input","indicator","indicatorSizeMedium","indicatorSizeLarge","useRootBaseClassName","useRootStyles","unchecked","Bi91k9c","ns3gzv","n5iecx","Bq2lx2j","Bv7p3up","lj723h","B6u2zzw","Be5wueo","Cgwcxn","Btnvhkj","checked","sj55zd","Bvs3sgl","opw9sb","C5wppx","B32epof","Bphahg7","Jctw66","Bq0zqd5","Bgesukf","mixed","cc1l3s","km5s60","disabled","Bceei9c","Bbusuzp","B7bxudy","h","a","d","m","useInputBaseClassName","useInputStyles","before","j35jbq","after","oyh7mz","large","a9b677","useIndicatorBaseClassName","useIndicatorStyles","Be2twd7","Bqenvij","circular","Bbmb7ep","Beyfa6y","B7oj6ja","Btl43ni","useLabelStyles","base","qb2dma","z8tnut","z189sj","Byoj8tv","uwmqm3","medium","B6of3ja","jrapky","useCheckboxStyles_unstable","state","labelPosition","shape","size","rootBaseClassName","rootStyles","className","inputBaseClassName","inputStyles","indicatorBaseClassName","indicatorStyles","labelStyles"],"sources":["useCheckboxStyles.styles.js"],"sourcesContent":["import { makeResetStyles, makeStyles, mergeClasses, shorthands } from '@griffel/react';\nimport { createFocusOutlineStyle } from '@fluentui/react-tabster';\nimport { tokens } from '@fluentui/react-theme';\nexport const checkboxClassNames = {\n    root: 'fui-Checkbox',\n    label: 'fui-Checkbox__label',\n    input: 'fui-Checkbox__input',\n    indicator: 'fui-Checkbox__indicator'\n};\n// The indicator size is used by the indicator and label styles\nconst indicatorSizeMedium = '16px';\nconst indicatorSizeLarge = '20px';\nconst useRootBaseClassName = makeResetStyles({\n    position: 'relative',\n    display: 'inline-flex',\n    cursor: 'pointer',\n    verticalAlign: 'middle',\n    color: tokens.colorNeutralForeground3,\n    ...createFocusOutlineStyle({\n        style: {},\n        selector: 'focus-within'\n    })\n});\nconst useRootStyles = makeStyles({\n    unchecked: {\n        ':hover': {\n            color: tokens.colorNeutralForeground2,\n            [`> .${checkboxClassNames.indicator}`]: {\n                ...shorthands.borderColor(tokens.colorNeutralStrokeAccessibleHover)\n            }\n        },\n        ':active': {\n            color: tokens.colorNeutralForeground1,\n            [`> .${checkboxClassNames.indicator}`]: {\n                ...shorthands.borderColor(tokens.colorNeutralStrokeAccessiblePressed)\n            }\n        }\n    },\n    checked: {\n        color: tokens.colorNeutralForeground1,\n        [`> .${checkboxClassNames.indicator}`]: {\n            backgroundColor: tokens.colorCompoundBrandBackground,\n            color: tokens.colorNeutralForegroundInverted,\n            ...shorthands.borderColor(tokens.colorCompoundBrandBackground)\n        },\n        ':hover': {\n            [`> .${checkboxClassNames.indicator}`]: {\n                backgroundColor: tokens.colorCompoundBrandBackgroundHover,\n                ...shorthands.borderColor(tokens.colorCompoundBrandBackgroundHover)\n            }\n        },\n        ':active': {\n            [`> .${checkboxClassNames.indicator}`]: {\n                backgroundColor: tokens.colorCompoundBrandBackgroundPressed,\n                ...shorthands.borderColor(tokens.colorCompoundBrandBackgroundPressed)\n            }\n        }\n    },\n    mixed: {\n        color: tokens.colorNeutralForeground1,\n        [`> .${checkboxClassNames.indicator}`]: {\n            ...shorthands.borderColor(tokens.colorCompoundBrandStroke),\n            color: tokens.colorCompoundBrandForeground1\n        },\n        ':hover': {\n            [`> .${checkboxClassNames.indicator}`]: {\n                ...shorthands.borderColor(tokens.colorCompoundBrandStrokeHover),\n                color: tokens.colorCompoundBrandForeground1Hover\n            }\n        },\n        ':active': {\n            [`> .${checkboxClassNames.indicator}`]: {\n                ...shorthands.borderColor(tokens.colorCompoundBrandStrokePressed),\n                color: tokens.colorCompoundBrandForeground1Pressed\n            }\n        }\n    },\n    disabled: {\n        cursor: 'default',\n        color: tokens.colorNeutralForegroundDisabled,\n        [`> .${checkboxClassNames.indicator}`]: {\n            ...shorthands.borderColor(tokens.colorNeutralStrokeDisabled),\n            color: tokens.colorNeutralForegroundDisabled\n        },\n        '@media (forced-colors: active)': {\n            color: 'GrayText',\n            [`> .${checkboxClassNames.indicator}`]: {\n                color: 'GrayText'\n            }\n        }\n    }\n});\nconst useInputBaseClassName = makeResetStyles({\n    boxSizing: 'border-box',\n    cursor: 'inherit',\n    height: '100%',\n    margin: 0,\n    opacity: 0,\n    position: 'absolute',\n    top: 0,\n    // Calculate the width of the hidden input by taking into account the size of the indicator + the padding around it.\n    // This is done so that clicking on that \"empty space\" still toggles the checkbox.\n    width: `calc(${indicatorSizeMedium} + 2 * ${tokens.spacingHorizontalS})`\n});\nconst useInputStyles = makeStyles({\n    before: {\n        right: 0\n    },\n    after: {\n        left: 0\n    },\n    large: {\n        width: `calc(${indicatorSizeLarge} + 2 * ${tokens.spacingHorizontalS})`\n    }\n});\nconst useIndicatorBaseClassName = makeResetStyles({\n    alignSelf: 'flex-start',\n    boxSizing: 'border-box',\n    flexShrink: 0,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    border: tokens.strokeWidthThin + ' solid ' + tokens.colorNeutralStrokeAccessible,\n    borderRadius: tokens.borderRadiusSmall,\n    margin: tokens.spacingVerticalS + ' ' + tokens.spacingHorizontalS,\n    fill: 'currentColor',\n    pointerEvents: 'none',\n    fontSize: '12px',\n    height: indicatorSizeMedium,\n    width: indicatorSizeMedium\n});\nconst useIndicatorStyles = makeStyles({\n    large: {\n        fontSize: '16px',\n        height: indicatorSizeLarge,\n        width: indicatorSizeLarge\n    },\n    circular: {\n        ...shorthands.borderRadius(tokens.borderRadiusCircular)\n    }\n});\n// Can't use makeResetStyles here because Label is a component that may itself use makeResetStyles.\nconst useLabelStyles = makeStyles({\n    base: {\n        alignSelf: 'center',\n        color: 'inherit',\n        cursor: 'inherit',\n        ...shorthands.padding(tokens.spacingVerticalS, tokens.spacingHorizontalS)\n    },\n    before: {\n        paddingRight: tokens.spacingHorizontalXS\n    },\n    after: {\n        paddingLeft: tokens.spacingHorizontalXS\n    },\n    // Use a (negative) margin to account for the difference between the indicator's height and the label's line height.\n    // This prevents the label from expanding the height of the checkbox, but preserves line height if the label wraps.\n    medium: {\n        marginTop: `calc((${indicatorSizeMedium} - ${tokens.lineHeightBase300}) / 2)`,\n        marginBottom: `calc((${indicatorSizeMedium} - ${tokens.lineHeightBase300}) / 2)`\n    },\n    large: {\n        marginTop: `calc((${indicatorSizeLarge} - ${tokens.lineHeightBase300}) / 2)`,\n        marginBottom: `calc((${indicatorSizeLarge} - ${tokens.lineHeightBase300}) / 2)`\n    }\n});\n/**\n * Apply styling to the Checkbox slots based on the state\n */ export const useCheckboxStyles_unstable = (state)=>{\n    const { checked , disabled , labelPosition , shape , size  } = state;\n    const rootBaseClassName = useRootBaseClassName();\n    const rootStyles = useRootStyles();\n    state.root.className = mergeClasses(checkboxClassNames.root, rootBaseClassName, disabled ? rootStyles.disabled : checked === 'mixed' ? rootStyles.mixed : checked ? rootStyles.checked : rootStyles.unchecked, state.root.className);\n    const inputBaseClassName = useInputBaseClassName();\n    const inputStyles = useInputStyles();\n    state.input.className = mergeClasses(checkboxClassNames.input, inputBaseClassName, size === 'large' && inputStyles.large, inputStyles[labelPosition], state.input.className);\n    const indicatorBaseClassName = useIndicatorBaseClassName();\n    const indicatorStyles = useIndicatorStyles();\n    if (state.indicator) {\n        state.indicator.className = mergeClasses(checkboxClassNames.indicator, indicatorBaseClassName, size === 'large' && indicatorStyles.large, shape === 'circular' && indicatorStyles.circular, state.indicator.className);\n    }\n    const labelStyles = useLabelStyles();\n    if (state.label) {\n        state.label.className = mergeClasses(checkboxClassNames.label, labelStyles.base, labelStyles[size], labelStyles[labelPosition], state.label.className);\n    }\n    return state;\n};\n"],"mappings":"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"}