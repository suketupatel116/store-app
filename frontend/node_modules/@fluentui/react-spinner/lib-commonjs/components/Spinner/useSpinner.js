"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useSpinner_unstable", {
    enumerable: true,
    get: ()=>useSpinner_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactUtilities = require("@fluentui/react-utilities");
const _reactLabel = require("@fluentui/react-label");
const _defaultSvg = require("./DefaultSvg");
const _spinnerContext = require("../../contexts/SpinnerContext");
const useSpinner_unstable = (props, ref)=>{
    // Props
    const { size: contextSize  } = (0, _spinnerContext.useSpinnerContext)();
    const { appearance ='primary' , labelPosition ='after' , size =contextSize !== null && contextSize !== void 0 ? contextSize : 'medium' , delay =0  } = props;
    const baseId = (0, _reactUtilities.useId)('spinner');
    const { role ='progressbar' , tabIndex , ...rest } = props;
    const nativeRoot = (0, _reactUtilities.getNativeElementProps)('div', {
        ref,
        role,
        ...rest
    }, [
        'size'
    ]);
    const [isVisible, setIsVisible] = _react.useState(true);
    const [setDelayTimeout, clearDelayTimeout] = (0, _reactUtilities.useTimeout)();
    _react.useEffect(()=>{
        if (delay <= 0) {
            return;
        }
        setIsVisible(false);
        setDelayTimeout(()=>{
            setIsVisible(true);
        }, delay);
        return ()=>{
            clearDelayTimeout();
        };
    }, [
        setDelayTimeout,
        clearDelayTimeout,
        delay
    ]);
    const labelShorthand = (0, _reactUtilities.resolveShorthand)(props.label, {
        defaultProps: {
            id: baseId
        },
        required: false
    });
    const spinnerShortHand = (0, _reactUtilities.resolveShorthand)(props.spinner, {
        required: true,
        defaultProps: {
            children: /*#__PURE__*/ _react.createElement(_defaultSvg.DefaultSvg, null),
            tabIndex
        }
    });
    if (labelShorthand && nativeRoot && !nativeRoot['aria-labelledby']) {
        nativeRoot['aria-labelledby'] = labelShorthand.id;
    }
    const state = {
        appearance,
        delay,
        labelPosition,
        size,
        shouldRenderSpinner: isVisible,
        components: {
            root: 'div',
            spinner: 'span',
            label: _reactLabel.Label
        },
        root: nativeRoot,
        spinner: spinnerShortHand,
        label: labelShorthand
    };
    return state;
};
