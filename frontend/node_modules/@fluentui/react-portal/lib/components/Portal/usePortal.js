import { isHTMLElement } from '@fluentui/react-utilities';
import * as React from 'react';
import { setVirtualParent } from '../../virtualParent/index';
import { usePortalMountNode } from './usePortalMountNode';
export function toMountNodeProps(mountNode) {
    if (isHTMLElement(mountNode)) {
        return {
            element: mountNode
        };
    }
    if (typeof mountNode === 'object') {
        if (mountNode === null) {
            return {
                element: null
            };
        }
        return mountNode;
    }
    return {};
}
/**
 * Create the state required to render Portal.
 *
 * The returned state can be modified with hooks such as usePortalStyles, before being passed to renderPortal_unstable.
 *
 * @param props - props from this instance of Portal
 */ export const usePortal_unstable = (props)=>{
    const { element , className  } = toMountNodeProps(props.mountNode);
    const virtualParentRootRef = React.useRef(null);
    const fallbackElement = usePortalMountNode({
        disabled: !!element,
        className
    });
    const state = {
        children: props.children,
        mountNode: element !== null && element !== void 0 ? element : fallbackElement,
        virtualParentRootRef
    };
    React.useEffect(()=>{
        if (state.virtualParentRootRef.current && state.mountNode) {
            setVirtualParent(state.mountNode, state.virtualParentRootRef.current);
        }
        return ()=>{
            if (state.mountNode) {
                setVirtualParent(state.mountNode, undefined);
            }
        };
    }, [
        state.virtualParentRootRef,
        state.mountNode
    ]);
    return state;
};
