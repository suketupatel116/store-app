{"version":3,"sources":["getParent.ts"],"sourcesContent":["import { isVirtualElement } from './isVirtualElement';\n\ntype GetParentOptions = {\n  /**\n   * Indicates if getParent() should ignore a virtual parent.\n   */\n  skipVirtual?: boolean;\n};\n\n/**\n * Gets the virtual parent given the child element, if it exists.\n */\nfunction getVirtualParent(child: Node): Node | null {\n  return isVirtualElement(child) ? child._virtual.parent || null : null;\n}\n\n/**\n * Gets the element which is the parent of a given element.\n * This method prefers the virtual parent over real DOM parent when present.\n */\nexport function getParent(child: Node | null, options: GetParentOptions = {}): Node | null {\n  if (!child) {\n    return null;\n  }\n\n  if (!options.skipVirtual) {\n    const virtualParent = getVirtualParent(child);\n\n    if (virtualParent) {\n      return virtualParent;\n    }\n  }\n\n  return child?.parentNode || null;\n}\n"],"names":["isVirtualElement","getVirtualParent","child","_virtual","parent","getParent","options","skipVirtual","virtualParent","parentNode"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,qBAAqB;AAStD;;CAEC,GACD,SAASC,iBAAiBC,KAAW,EAAe;IAClD,OAAOF,iBAAiBE,SAASA,MAAMC,QAAQ,CAACC,MAAM,IAAI,IAAI,GAAG,IAAI;AACvE;AAEA;;;CAGC,GACD,OAAO,SAASC,UAAUH,KAAkB,EAAEI,UAA4B,CAAC,CAAC,EAAe;IACzF,IAAI,CAACJ,OAAO;QACV,OAAO,IAAI;IACb,CAAC;IAED,IAAI,CAACI,QAAQC,WAAW,EAAE;QACxB,MAAMC,gBAAgBP,iBAAiBC;QAEvC,IAAIM,eAAe;YACjB,OAAOA;QACT,CAAC;IACH,CAAC;IAED,OAAON,CAAAA,kBAAAA,mBAAAA,KAAAA,IAAAA,MAAOO,UAAU,AAAD,KAAK,IAAI;AAClC,CAAC"}