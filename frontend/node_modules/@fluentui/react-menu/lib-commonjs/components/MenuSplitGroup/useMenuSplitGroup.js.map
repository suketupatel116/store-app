{"version":3,"sources":["useMenuSplitGroup.js"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, getRTLSafeKey, useMergedRefs } from '@fluentui/react-utilities';\nimport { useFocusFinders } from '@fluentui/react-tabster';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { ArrowRight, ArrowLeft } from '@fluentui/keyboard-keys';\n/**\n * Create the state required to render MenuSplitGroup.\n *\n * The returned state can be modified with hooks such as useMenuSplitGroupStyles_unstable,\n * before being passed to renderMenuSplitGroup_unstable.\n *\n * @param props - props from this instance of MenuSplitGroup\n * @param ref - reference to root HTMLElement of MenuSplitGroup\n */ export const useMenuSplitGroup_unstable = (props, ref)=>{\n    const innerRef = React.useRef();\n    const { dir , targetDocument  } = useFluent();\n    const nextArrowKey = getRTLSafeKey(ArrowRight, dir);\n    const prevArrowKey = getRTLSafeKey(ArrowLeft, dir);\n    const { findNextFocusable , findPrevFocusable  } = useFocusFinders();\n    const onKeyDown = React.useCallback((e)=>{\n        var _innerRef_current;\n        const activeElement = targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.activeElement;\n        if (!activeElement) {\n            return;\n        }\n        if (!((_innerRef_current = innerRef.current) === null || _innerRef_current === void 0 ? void 0 : _innerRef_current.contains(activeElement))) {\n            return;\n        }\n        if (e.key === nextArrowKey) {\n            const next = findNextFocusable(activeElement, {\n                container: innerRef.current\n            });\n            next === null || next === void 0 ? void 0 : next.focus();\n        }\n        if (e.key === prevArrowKey) {\n            const prev = findPrevFocusable(activeElement, {\n                container: innerRef.current\n            });\n            prev === null || prev === void 0 ? void 0 : prev.focus();\n        }\n    }, [\n        findNextFocusable,\n        findPrevFocusable,\n        targetDocument,\n        nextArrowKey,\n        prevArrowKey\n    ]);\n    return {\n        components: {\n            root: 'div'\n        },\n        root: getNativeElementProps('div', {\n            role: 'group',\n            ref: useMergedRefs(ref, innerRef),\n            onKeyDown,\n            ...props\n        })\n    };\n};\n"],"names":["useMenuSplitGroup_unstable","props","ref","innerRef","React","useRef","dir","targetDocument","useFluent","nextArrowKey","getRTLSafeKey","ArrowRight","prevArrowKey","ArrowLeft","findNextFocusable","findPrevFocusable","useFocusFinders","onKeyDown","useCallback","e","_innerRef_current","activeElement","current","contains","key","next","container","focus","prev","components","root","getNativeElementProps","role","useMergedRefs"],"mappings":";;;;+BAaiBA;;aAAAA;;;6DAbM;gCAC6C;8BACpC;qCACgB;8BACV;AAS3B,MAAMA,6BAA6B,CAACC,OAAOC,MAAM;IACxD,MAAMC,WAAWC,OAAMC,MAAM;IAC7B,MAAM,EAAEC,IAAG,EAAGC,eAAc,EAAG,GAAGC,IAAAA,uCAAS;IAC3C,MAAMC,eAAeC,IAAAA,6BAAa,EAACC,wBAAU,EAAEL;IAC/C,MAAMM,eAAeF,IAAAA,6BAAa,EAACG,uBAAS,EAAEP;IAC9C,MAAM,EAAEQ,kBAAiB,EAAGC,kBAAiB,EAAG,GAAGC,IAAAA,6BAAe;IAClE,MAAMC,YAAYb,OAAMc,WAAW,CAAC,CAACC,IAAI;QACrC,IAAIC;QACJ,MAAMC,gBAAgBd,mBAAmB,IAAI,IAAIA,mBAAmB,KAAK,IAAI,KAAK,IAAIA,eAAec,aAAa;QAClH,IAAI,CAACA,eAAe;YAChB;QACJ,CAAC;QACD,IAAI,CAAE,CAAA,AAACD,CAAAA,oBAAoBjB,SAASmB,OAAO,AAAD,MAAO,IAAI,IAAIF,sBAAsB,KAAK,IAAI,KAAK,IAAIA,kBAAkBG,QAAQ,CAACF,cAAc,AAAD,GAAI;YACzI;QACJ,CAAC;QACD,IAAIF,EAAEK,GAAG,KAAKf,cAAc;YACxB,MAAMgB,OAAOX,kBAAkBO,eAAe;gBAC1CK,WAAWvB,SAASmB,OAAO;YAC/B;YACAG,SAAS,IAAI,IAAIA,SAAS,KAAK,IAAI,KAAK,IAAIA,KAAKE,KAAK,EAAE;QAC5D,CAAC;QACD,IAAIR,EAAEK,GAAG,KAAKZ,cAAc;YACxB,MAAMgB,OAAOb,kBAAkBM,eAAe;gBAC1CK,WAAWvB,SAASmB,OAAO;YAC/B;YACAM,SAAS,IAAI,IAAIA,SAAS,KAAK,IAAI,KAAK,IAAIA,KAAKD,KAAK,EAAE;QAC5D,CAAC;IACL,GAAG;QACCb;QACAC;QACAR;QACAE;QACAG;KACH;IACD,OAAO;QACHiB,YAAY;YACRC,MAAM;QACV;QACAA,MAAMC,IAAAA,qCAAqB,EAAC,OAAO;YAC/BC,MAAM;YACN9B,KAAK+B,IAAAA,6BAAa,EAAC/B,KAAKC;YACxBc;YACA,GAAGhB,KAAK;QACZ;IACJ;AACJ"}