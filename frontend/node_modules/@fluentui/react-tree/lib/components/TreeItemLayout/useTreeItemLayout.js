import * as React from 'react';
import { getNativeElementProps, isResolvedShorthand, resolveShorthand, useMergedRefs } from '@fluentui/react-utilities';
import { useTreeItemContext_unstable, useTreeContext_unstable } from '../../contexts';
import { Checkbox } from '@fluentui/react-checkbox';
import { Radio } from '@fluentui/react-radio';
import { TreeItemChevron } from '../TreeItemChevron';
/**
 * Create the state required to render TreeItemLayout.
 *
 * The returned state can be modified with hooks such as useTreeItemLayoutStyles_unstable,
 * before being passed to renderTreeItemLayout_unstable.
 *
 * @param props - props from this instance of TreeItemLayout
 * @param ref - reference to root HTMLElement of TreeItemLayout
 */ export const useTreeItemLayout_unstable = (props, ref)=>{
    const { content , iconAfter , iconBefore , as ='span'  } = props;
    const layoutRef = useTreeItemContext_unstable((ctx)=>ctx.layoutRef);
    const selectionMode = useTreeContext_unstable((ctx)=>ctx.selectionMode);
    const [isActionsVisibleExternal, actionsShorthand] = isResolvedShorthand(props.actions) ? [
        props.actions.visible,
        {
            ...props.actions,
            visible: undefined
        }
    ] : [
        undefined,
        props.actions
    ];
    const isActionsVisible = useTreeItemContext_unstable((ctx)=>ctx.isActionsVisible) || isActionsVisibleExternal;
    const isAsideVisible = useTreeItemContext_unstable((ctx)=>ctx.isAsideVisible);
    const selectionRef = useTreeItemContext_unstable((ctx)=>ctx.selectionRef);
    const expandIconRef = useTreeItemContext_unstable((ctx)=>ctx.expandIconRef);
    const actionsRef = useTreeItemContext_unstable((ctx)=>ctx.actionsRef);
    const value = useTreeItemContext_unstable((ctx)=>ctx.value);
    var _ctx_checkedItems_get;
    const checked = useTreeContext_unstable((ctx)=>(_ctx_checkedItems_get = ctx.checkedItems.get(value)) !== null && _ctx_checkedItems_get !== void 0 ? _ctx_checkedItems_get : false);
    const isBranch = useTreeItemContext_unstable((ctx)=>ctx.itemType === 'branch');
    const expandIcon = resolveShorthand(props.expandIcon, {
        required: isBranch,
        defaultProps: {
            children: /*#__PURE__*/ React.createElement(TreeItemChevron, null),
            'aria-hidden': true
        }
    });
    const expandIconRefs = useMergedRefs(expandIcon === null || expandIcon === void 0 ? void 0 : expandIcon.ref, expandIconRef);
    if (expandIcon) {
        expandIcon.ref = expandIconRefs;
    }
    const actions = isActionsVisible ? resolveShorthand(actionsShorthand) : undefined;
    const actionsRefs = useMergedRefs(actions === null || actions === void 0 ? void 0 : actions.ref, actionsRef);
    if (actions) {
        actions.ref = actionsRefs;
    }
    return {
        components: {
            root: 'div',
            expandIcon: 'div',
            iconBefore: 'div',
            content: 'div',
            iconAfter: 'div',
            actions: 'div',
            aside: 'div',
            // Casting here to a union between checkbox and radio
            selector: selectionMode === 'multiselect' ? Checkbox : Radio
        },
        buttonContextValue: {
            size: 'small'
        },
        root: getNativeElementProps(as, {
            ...props,
            ref: useMergedRefs(ref, layoutRef)
        }),
        iconBefore: resolveShorthand(iconBefore, {
            defaultProps: {
                'aria-hidden': true
            }
        }),
        content: resolveShorthand(content, {
            required: true
        }),
        iconAfter: resolveShorthand(iconAfter, {
            defaultProps: {
                'aria-hidden': true
            }
        }),
        aside: isAsideVisible ? resolveShorthand(props.aside) : undefined,
        actions,
        expandIcon,
        selector: resolveShorthand(props.selector, {
            required: selectionMode !== 'none',
            defaultProps: {
                checked,
                tabIndex: -1,
                'aria-hidden': true,
                ref: selectionRef
            }
        })
    };
};
