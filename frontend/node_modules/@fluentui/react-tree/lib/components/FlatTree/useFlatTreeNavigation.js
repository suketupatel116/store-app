import { useFluent_unstable } from '@fluentui/react-shared-contexts';
import { useEventCallback, useMergedRefs } from '@fluentui/react-utilities';
import { nextTypeAheadElement } from '../../utils/nextTypeAheadElement';
import { treeDataTypes } from '../../utils/tokens';
import { treeItemFilter } from '../../utils/treeItemFilter';
import { useHTMLElementWalkerRef } from '../../hooks/useHTMLElementWalker';
import { useRovingTabIndex } from '../../hooks/useRovingTabIndexes';
import { dataTreeItemValueAttrName, getTreeItemValueFromElement } from '../../utils/getTreeItemValueFromElement';
export function useFlatTreeNavigation(virtualTree) {
    const { targetDocument  } = useFluent_unstable();
    const [treeItemWalkerRef, treeItemWalkerRootRef] = useHTMLElementWalkerRef(treeItemFilter);
    const [{ rove  }, rovingRootRef] = useRovingTabIndex(treeItemFilter);
    function getNextElement(data) {
        if (!targetDocument || !treeItemWalkerRef.current) {
            return null;
        }
        const treeItemWalker = treeItemWalkerRef.current;
        switch(data.type){
            case treeDataTypes.Click:
                return data.target;
            case treeDataTypes.TypeAhead:
                treeItemWalker.currentElement = data.target;
                return nextTypeAheadElement(treeItemWalker, data.event.key);
            case treeDataTypes.ArrowLeft:
                return parentElement(virtualTree, data.target, treeItemWalker);
            case treeDataTypes.ArrowRight:
                treeItemWalker.currentElement = data.target;
                return firstChild(data.target, treeItemWalker);
            case treeDataTypes.End:
                treeItemWalker.currentElement = treeItemWalker.root;
                return treeItemWalker.lastChild();
            case treeDataTypes.Home:
                treeItemWalker.currentElement = treeItemWalker.root;
                return treeItemWalker.firstChild();
            case treeDataTypes.ArrowDown:
                treeItemWalker.currentElement = data.target;
                return treeItemWalker.nextElement();
            case treeDataTypes.ArrowUp:
                treeItemWalker.currentElement = data.target;
                return treeItemWalker.previousElement();
        }
    }
    const navigate = useEventCallback((data)=>{
        const nextElement = getNextElement(data);
        if (nextElement) {
            rove(nextElement);
        }
    });
    return [
        navigate,
        useMergedRefs(treeItemWalkerRootRef, rovingRootRef)
    ];
}
function firstChild(target, treeWalker) {
    const nextElement = treeWalker.nextElement();
    if (!nextElement) {
        return null;
    }
    const nextElementAriaPosInSet = nextElement.getAttribute('aria-posinset');
    const nextElementAriaLevel = nextElement.getAttribute('aria-level');
    const targetAriaLevel = target.getAttribute('aria-level');
    if (nextElementAriaPosInSet === '1' && Number(nextElementAriaLevel) === Number(targetAriaLevel) + 1) {
        return nextElement;
    }
    return null;
}
function parentElement(virtualTreeItems, target, treeWalker) {
    const value = getTreeItemValueFromElement(target);
    if (value === null) {
        return null;
    }
    const virtualTreeItem = virtualTreeItems.get(value);
    if (virtualTreeItem === null || virtualTreeItem === void 0 ? void 0 : virtualTreeItem.parentValue) {
        return treeWalker.root.querySelector(`[${dataTreeItemValueAttrName}="${virtualTreeItem.parentValue}"]`);
    }
    return null;
}
