import * as React from 'react';
import { useEventCallback, useMergedRefs } from '@fluentui/react-utilities';
import { createNextOpenItems, useControllableOpenItems } from '../../hooks/useControllableOpenItems';
import { useTreeNavigation } from './useTreeNavigation';
import { useControllableCheckedItems } from './useControllableCheckedItems';
import { useTreeContext_unstable } from '../../contexts/treeContext';
import { useRootTree } from '../../hooks/useRootTree';
import { useSubtree } from '../../hooks/useSubtree';
export const useTree_unstable = (props, ref)=>{
    const [openItems, setOpenItems] = useControllableOpenItems(props);
    const [checkedItems] = useControllableCheckedItems(props);
    const [navigate, navigationRef] = useTreeNavigation();
    const handleOpenChange = useEventCallback((event, data)=>{
        var _props_onOpenChange;
        (_props_onOpenChange = props.onOpenChange) === null || _props_onOpenChange === void 0 ? void 0 : _props_onOpenChange.call(props, event, data);
        setOpenItems(createNextOpenItems(data, openItems));
    });
    const handleCheckedChange = useEventCallback((event, data)=>{
        var _props_onCheckedChange;
        (_props_onCheckedChange = props.onCheckedChange) === null || _props_onCheckedChange === void 0 ? void 0 : _props_onCheckedChange.call(props, event, data);
    // TODO: implement next checked items for  tree
    });
    const handleNavigation = useEventCallback((event, data)=>{
        var _props_onNavigation_unstable;
        (_props_onNavigation_unstable = props.onNavigation_unstable) === null || _props_onNavigation_unstable === void 0 ? void 0 : _props_onNavigation_unstable.call(props, event, data);
        navigate(data);
    });
    const baseProps = {
        ...props,
        openItems,
        checkedItems,
        onOpenChange: handleOpenChange,
        // eslint-disable-next-line @typescript-eslint/naming-convention
        onNavigation_unstable: handleNavigation,
        onCheckedChange: handleCheckedChange
    };
    const baseRef = useMergedRefs(ref, navigationRef);
    const isSubtree = useTreeContext_unstable((ctx)=>ctx.level > 0);
    // as isSubTree is static, this doesn't break rule of hooks
    // and if this becomes an issue later on, this can be easily converted
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return isSubtree ? useSubtree(baseProps, baseRef) : useRootTree(baseProps, baseRef);
};
