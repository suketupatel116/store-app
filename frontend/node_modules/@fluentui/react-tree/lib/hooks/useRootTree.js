import { getNativeElementProps, useEventCallback } from '@fluentui/react-utilities';
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { createOpenItems } from '../utils/createOpenItems';
import { createCheckedItems } from '../utils/createCheckedItems';
import { treeDataTypes } from '../utils/tokens';
/**
 * Create the state required to render the root level BaseTree.
 *
 * @param props - props from this instance of BaseTree
 * @param ref - reference to root HTMLElement of BaseTree
 */ export function useRootTree(props, ref) {
    warnIfNoProperPropsRootTree(props);
    const { appearance ='subtle' , size ='medium' , selectionMode ='none'  } = props;
    const openItems = React.useMemo(()=>createOpenItems(props.openItems), [
        props.openItems
    ]);
    const checkedItems = React.useMemo(()=>createCheckedItems(props.checkedItems), [
        props.checkedItems
    ]);
    const requestOpenChange = (data)=>{
        var _props_onOpenChange;
        return (_props_onOpenChange = props.onOpenChange) === null || _props_onOpenChange === void 0 ? void 0 : _props_onOpenChange.call(props, data.event, data);
    };
    const requestCheckedChange = (data)=>{
        var _props_onCheckedChange;
        return (_props_onCheckedChange = props.onCheckedChange) === null || _props_onCheckedChange === void 0 ? void 0 : _props_onCheckedChange.call(props, data.event, data);
    };
    const requestNavigation = (data)=>{
        var _props_onNavigation_unstable;
        (_props_onNavigation_unstable = props.onNavigation_unstable) === null || _props_onNavigation_unstable === void 0 ? void 0 : _props_onNavigation_unstable.call(props, data.event, data);
        if (data.type === treeDataTypes.ArrowDown || data.type === treeDataTypes.ArrowUp) {
            data.event.preventDefault();
        }
    };
    const requestTreeResponse = useEventCallback((request)=>{
        switch(request.type){
            case treeDataTypes.Click:
            case treeDataTypes.ExpandIconClick:
                {
                    return ReactDOM.unstable_batchedUpdates(()=>{
                        requestOpenChange({
                            ...request,
                            open: request.itemType === 'branch' && !openItems.has(request.value)
                        });
                        requestNavigation({
                            ...request,
                            type: treeDataTypes.Click
                        });
                    });
                }
            case treeDataTypes.ArrowRight:
                {
                    if (request.itemType === 'leaf') {
                        return;
                    }
                    const open = openItems.has(request.value);
                    if (!open) {
                        return requestOpenChange({
                            ...request,
                            open: true
                        });
                    }
                    return requestNavigation(request);
                }
            case treeDataTypes.Enter:
                {
                    const open = openItems.has(request.value);
                    return requestOpenChange({
                        ...request,
                        open: request.itemType === 'branch' && !open
                    });
                }
            case treeDataTypes.ArrowLeft:
                {
                    const open = openItems.has(request.value);
                    if (open && request.itemType === 'branch') {
                        return requestOpenChange({
                            ...request,
                            open: false,
                            type: treeDataTypes.ArrowLeft
                        });
                    }
                    return requestNavigation({
                        ...request,
                        type: treeDataTypes.ArrowLeft
                    });
                }
            case treeDataTypes.End:
            case treeDataTypes.Home:
            case treeDataTypes.ArrowUp:
            case treeDataTypes.ArrowDown:
            case treeDataTypes.TypeAhead:
                return requestNavigation({
                    ...request,
                    target: request.event.currentTarget
                });
            case treeDataTypes.Change:
                {
                    const previousCheckedValue = checkedItems.get(request.value);
                    return requestCheckedChange({
                        ...request,
                        selectionMode: selectionMode,
                        checked: previousCheckedValue === 'mixed' ? true : !previousCheckedValue
                    });
                }
        }
    });
    return {
        components: {
            root: 'div'
        },
        selectionMode,
        open: true,
        appearance,
        size,
        level: 1,
        openItems,
        checkedItems,
        requestTreeResponse,
        root: getNativeElementProps('div', {
            ref,
            role: 'baseTree',
            'aria-multiselectable': selectionMode === 'multiselect' ? true : undefined,
            ...props
        })
    };
}
function warnIfNoProperPropsRootTree(props) {
    if (process.env.NODE_ENV === 'development') {
        if (!props['aria-label'] && !props['aria-labelledby']) {
            // eslint-disable-next-line no-console
            console.warn('BaseTree must have either a `aria-label` or `aria-labelledby` property defined');
        }
    }
}
