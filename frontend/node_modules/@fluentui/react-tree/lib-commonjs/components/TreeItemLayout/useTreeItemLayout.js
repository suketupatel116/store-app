"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useTreeItemLayout_unstable", {
    enumerable: true,
    get: ()=>useTreeItemLayout_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactUtilities = require("@fluentui/react-utilities");
const _contexts = require("../../contexts");
const _reactCheckbox = require("@fluentui/react-checkbox");
const _reactRadio = require("@fluentui/react-radio");
const _treeItemChevron = require("../TreeItemChevron");
const useTreeItemLayout_unstable = (props, ref)=>{
    const { content , iconAfter , iconBefore , as ='span'  } = props;
    const layoutRef = (0, _contexts.useTreeItemContext_unstable)((ctx)=>ctx.layoutRef);
    const selectionMode = (0, _contexts.useTreeContext_unstable)((ctx)=>ctx.selectionMode);
    const [isActionsVisibleExternal, actionsShorthand] = (0, _reactUtilities.isResolvedShorthand)(props.actions) ? [
        props.actions.visible,
        {
            ...props.actions,
            visible: undefined
        }
    ] : [
        undefined,
        props.actions
    ];
    const isActionsVisible = (0, _contexts.useTreeItemContext_unstable)((ctx)=>ctx.isActionsVisible) || isActionsVisibleExternal;
    const isAsideVisible = (0, _contexts.useTreeItemContext_unstable)((ctx)=>ctx.isAsideVisible);
    const selectionRef = (0, _contexts.useTreeItemContext_unstable)((ctx)=>ctx.selectionRef);
    const expandIconRef = (0, _contexts.useTreeItemContext_unstable)((ctx)=>ctx.expandIconRef);
    const actionsRef = (0, _contexts.useTreeItemContext_unstable)((ctx)=>ctx.actionsRef);
    const value = (0, _contexts.useTreeItemContext_unstable)((ctx)=>ctx.value);
    var _ctx_checkedItems_get;
    const checked = (0, _contexts.useTreeContext_unstable)((ctx)=>(_ctx_checkedItems_get = ctx.checkedItems.get(value)) !== null && _ctx_checkedItems_get !== void 0 ? _ctx_checkedItems_get : false);
    const isBranch = (0, _contexts.useTreeItemContext_unstable)((ctx)=>ctx.itemType === 'branch');
    const expandIcon = (0, _reactUtilities.resolveShorthand)(props.expandIcon, {
        required: isBranch,
        defaultProps: {
            children: /*#__PURE__*/ _react.createElement(_treeItemChevron.TreeItemChevron, null),
            'aria-hidden': true
        }
    });
    const expandIconRefs = (0, _reactUtilities.useMergedRefs)(expandIcon === null || expandIcon === void 0 ? void 0 : expandIcon.ref, expandIconRef);
    if (expandIcon) {
        expandIcon.ref = expandIconRefs;
    }
    const actions = isActionsVisible ? (0, _reactUtilities.resolveShorthand)(actionsShorthand) : undefined;
    const actionsRefs = (0, _reactUtilities.useMergedRefs)(actions === null || actions === void 0 ? void 0 : actions.ref, actionsRef);
    if (actions) {
        actions.ref = actionsRefs;
    }
    return {
        components: {
            root: 'div',
            expandIcon: 'div',
            iconBefore: 'div',
            content: 'div',
            iconAfter: 'div',
            actions: 'div',
            aside: 'div',
            // Casting here to a union between checkbox and radio
            selector: selectionMode === 'multiselect' ? _reactCheckbox.Checkbox : _reactRadio.Radio
        },
        buttonContextValue: {
            size: 'small'
        },
        root: (0, _reactUtilities.getNativeElementProps)(as, {
            ...props,
            ref: (0, _reactUtilities.useMergedRefs)(ref, layoutRef)
        }),
        iconBefore: (0, _reactUtilities.resolveShorthand)(iconBefore, {
            defaultProps: {
                'aria-hidden': true
            }
        }),
        content: (0, _reactUtilities.resolveShorthand)(content, {
            required: true
        }),
        iconAfter: (0, _reactUtilities.resolveShorthand)(iconAfter, {
            defaultProps: {
                'aria-hidden': true
            }
        }),
        aside: isAsideVisible ? (0, _reactUtilities.resolveShorthand)(props.aside) : undefined,
        actions,
        expandIcon,
        selector: (0, _reactUtilities.resolveShorthand)(props.selector, {
            required: selectionMode !== 'none',
            defaultProps: {
                checked,
                tabIndex: -1,
                'aria-hidden': true,
                ref: selectionRef
            }
        })
    };
};
