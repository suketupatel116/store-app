{"version":3,"sources":["useControllableCheckedItems.js"],"sourcesContent":["import { useControllableState } from '@fluentui/react-utilities';\nimport * as React from 'react';\nimport { ImmutableMap } from '../../utils/ImmutableMap';\nimport { createCheckedItems } from '../../utils/createCheckedItems';\nexport function useControllableCheckedItems(props) {\n    return useControllableState({\n        initialState: ImmutableMap.empty,\n        state: React.useMemo(()=>props.checkedItems && createCheckedItems(props.checkedItems), [\n            props.checkedItems\n        ]),\n        defaultState: ()=>createCheckedItems(props.defaultCheckedItems)\n    });\n} // export function useCheckedItemsState(props: Pick<TreeProps, 'checkedItems' | 'defaultCheckedItems' | 'selectionMode'>) {\n //   const [walkerRef, rootRef] = useHTMLElementWalkerRef(treeItemFilter);\n //   const selections = React.useMemo(() => initializeSelection(props.checkedItems ?? []), [props.checkedItems]);\n //   const defaultSelections = React.useMemo(\n //     () => initializeSelection(props.defaultCheckedItems ?? []),\n //     [props.defaultCheckedItems],\n //   );\n //   const [checkedSelection, checkedSelectionManager] = useSelection<TreeItemValue>({\n //     selectionMode: props.selectionMode ?? 'single',\n //     selectedItems: selections.checkedSelection,\n //     defaultSelectedItems: defaultSelections.checkedSelection,\n //   });\n //   const [mixedSelection, setMixedSelection] = useControllableState({\n //     initialState: ImmutableSet.empty,\n //     defaultState: React.useMemo(\n //       () => ImmutableSet.create(defaultSelections.mixedSelection),\n //       [defaultSelections.mixedSelection],\n //     ),\n //     state: React.useMemo(() => ImmutableSet.create(selections.mixedSelection), [selections.mixedSelection]),\n //   });\n //   const updateCheckedItems = useEventCallback((data: TreeCheckedChangeData) => {\n //     if (props.selectionMode === 'single') {\n //       checkedSelectionManager.selectItem(data.value);\n //       return;\n //     }\n //     if (walkerRef.current === null) {\n //       return;\n //     }\n //     const nextSelectedState = !checkedSelectionManager.isSelected(data.value);\n //     let treeItemValues = getAllSubTreeItemValues(data).add(data.value);\n //     let mixedValues: ImmutableSet<TreeItemValue> = ImmutableSet.empty;\n //     walkerRef.current.currentElement = data.event.currentTarget;\n //     while (walkerRef.current.parentElement() !== null) {\n //       const descendants = Array.from(\n //         walkerRef.current.currentElement.querySelectorAll<HTMLElement>('[role=\"treeitem\"]'),\n //       ).filter(item => item.getAttribute(dataTreeItemValueAttrName) !== data.value);\n //       const isAllSiblingsEqualSelectionState = descendants.every(item => {\n //         return (\n //           (item.getAttribute('aria-selected') === 'true') === nextSelectedState ||\n //           treeItemValues.has(item.getAttribute(dataTreeItemValueAttrName) as TreeItemValue)\n //         );\n //       });\n //       if (isAllSiblingsEqualSelectionState) {\n //         treeItemValues = treeItemValues.add(\n //           walkerRef.current.currentElement.getAttribute(dataTreeItemValueAttrName) as TreeItemValue,\n //         );\n //         mixedValues = mixedValues.delete(\n //           walkerRef.current.currentElement.getAttribute(dataTreeItemValueAttrName) as TreeItemValue,\n //         );\n //       } else {\n //         treeItemValues = treeItemValues\n //           .delete(walkerRef.current.currentElement.getAttribute(dataTreeItemValueAttrName) as TreeItemValue)\n //           .add(data.value);\n //         mixedValues = mixedValues.add(\n //           walkerRef.current.currentElement.getAttribute(dataTreeItemValueAttrName) as TreeItemValue,\n //         );\n //       }\n //     }\n //     unstable_batchedUpdates(() => {\n //       nextSelectedState\n //         ? checkedSelectionManager.selectItems(treeItemValues)\n //         : checkedSelectionManager.deselectItems(treeItemValues);\n //       let nextMixedSelection = ImmutableSet.create(mixedSelection);\n //       for (const value of mixedValues) {\n //         nextMixedSelection = nextMixedSelection.add(value);\n //       }\n //       for (const value of treeItemValues) {\n //         nextMixedSelection = nextMixedSelection.delete(value);\n //       }\n //       setMixedSelection(nextMixedSelection);\n //     });\n //   });\n //   return [checkedSelection, mixedSelection, updateCheckedItems, rootRef] as const;\n // }\n // function getAllSubTreeItemValues(data: TreeCheckedChangeData) {\n //   const subTreeItems = Array.from(data.event.currentTarget.querySelectorAll('[role=\"treeitem\"]'));\n //   const values = new Set<TreeItemValue>();\n //   for (const item of subTreeItems) {\n //     values.add(item.getAttribute(dataTreeItemValueAttrName) as TreeItemValue);\n //   }\n //   return ImmutableSet.dangerouslyCreate(values);\n // }\n"],"names":["useControllableCheckedItems","props","useControllableState","initialState","ImmutableMap","empty","state","React","useMemo","checkedItems","createCheckedItems","defaultState","defaultCheckedItems"],"mappings":";;;;+BAIgBA;;aAAAA;;;gCAJqB;6DACd;8BACM;oCACM;AAC5B,SAASA,4BAA4BC,KAAK,EAAE;IAC/C,OAAOC,IAAAA,oCAAoB,EAAC;QACxBC,cAAcC,0BAAY,CAACC,KAAK;QAChCC,OAAOC,OAAMC,OAAO,CAAC,IAAIP,MAAMQ,YAAY,IAAIC,IAAAA,sCAAkB,EAACT,MAAMQ,YAAY,GAAG;YACnFR,MAAMQ,YAAY;SACrB;QACDE,cAAc,IAAID,IAAAA,sCAAkB,EAACT,MAAMW,mBAAmB;IAClE;AACJ,EAAE,2HAA2H;CAC5H,0EAA0E;CAC1E,iHAAiH;CACjH,6CAA6C;CAC7C,kEAAkE;CAClE,mCAAmC;CACnC,OAAO;CACP,sFAAsF;CACtF,sDAAsD;CACtD,kDAAkD;CAClD,gEAAgE;CAChE,QAAQ;CACR,uEAAuE;CACvE,wCAAwC;CACxC,mCAAmC;CACnC,qEAAqE;CACrE,4CAA4C;CAC5C,SAAS;CACT,+GAA+G;CAC/G,QAAQ;CACR,mFAAmF;CACnF,8CAA8C;CAC9C,wDAAwD;CACxD,gBAAgB;CAChB,QAAQ;CACR,wCAAwC;CACxC,gBAAgB;CAChB,QAAQ;CACR,iFAAiF;CACjF,0EAA0E;CAC1E,yEAAyE;CACzE,mEAAmE;CACnE,2DAA2D;CAC3D,wCAAwC;CACxC,+FAA+F;CAC/F,uFAAuF;CACvF,6EAA6E;CAC7E,mBAAmB;CACnB,qFAAqF;CACrF,8FAA8F;CAC9F,aAAa;CACb,YAAY;CACZ,gDAAgD;CAChD,+CAA+C;CAC/C,uGAAuG;CACvG,aAAa;CACb,4CAA4C;CAC5C,uGAAuG;CACvG,aAAa;CACb,iBAAiB;CACjB,0CAA0C;CAC1C,+GAA+G;CAC/G,8BAA8B;CAC9B,yCAAyC;CACzC,uGAAuG;CACvG,aAAa;CACb,UAAU;CACV,QAAQ;CACR,sCAAsC;CACtC,0BAA0B;CAC1B,gEAAgE;CAChE,mEAAmE;CACnE,sEAAsE;CACtE,2CAA2C;CAC3C,8DAA8D;CAC9D,UAAU;CACV,8CAA8C;CAC9C,iEAAiE;CACjE,UAAU;CACV,+CAA+C;CAC/C,UAAU;CACV,QAAQ;CACR,qFAAqF;CACrF,IAAI;CACJ,kEAAkE;CAClE,qGAAqG;CACrG,6CAA6C;CAC7C,uCAAuC;CACvC,iFAAiF;CACjF,MAAM;CACN,mDAAmD;CACnD,IAAI"}