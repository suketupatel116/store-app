"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useTreeNavigation", {
    enumerable: true,
    get: ()=>useTreeNavigation
});
const _reactUtilities = require("@fluentui/react-utilities");
const _nextTypeAheadElement = require("../../utils/nextTypeAheadElement");
const _tokens = require("../../utils/tokens");
const _treeItemFilter = require("../../utils/treeItemFilter");
const _useRovingTabIndexes = require("../../hooks/useRovingTabIndexes");
const _useHTMLElementWalker = require("../../hooks/useHTMLElementWalker");
function useTreeNavigation() {
    const [{ rove  }, rovingRootRef] = (0, _useRovingTabIndexes.useRovingTabIndex)(_treeItemFilter.treeItemFilter);
    const [walkerRef, rootRef] = (0, _useHTMLElementWalker.useHTMLElementWalkerRef)(_treeItemFilter.treeItemFilter);
    const getNextElement = (data)=>{
        if (!walkerRef.current) {
            return;
        }
        const treeItemWalker = walkerRef.current;
        switch(data.type){
            case _tokens.treeDataTypes.Click:
                return data.target;
            case _tokens.treeDataTypes.TypeAhead:
                treeItemWalker.currentElement = data.target;
                return (0, _nextTypeAheadElement.nextTypeAheadElement)(treeItemWalker, data.event.key);
            case _tokens.treeDataTypes.ArrowLeft:
                treeItemWalker.currentElement = data.target;
                return treeItemWalker.parentElement();
            case _tokens.treeDataTypes.ArrowRight:
                treeItemWalker.currentElement = data.target;
                return treeItemWalker.firstChild();
            case _tokens.treeDataTypes.End:
                treeItemWalker.currentElement = treeItemWalker.root;
                return lastChildRecursive(treeItemWalker);
            case _tokens.treeDataTypes.Home:
                treeItemWalker.currentElement = treeItemWalker.root;
                return treeItemWalker.firstChild();
            case _tokens.treeDataTypes.ArrowDown:
                treeItemWalker.currentElement = data.target;
                return treeItemWalker.nextElement();
            case _tokens.treeDataTypes.ArrowUp:
                treeItemWalker.currentElement = data.target;
                return treeItemWalker.previousElement();
        }
    };
    function navigate(data) {
        const nextElement = getNextElement(data);
        if (nextElement) {
            rove(nextElement);
        }
    }
    return [
        navigate,
        (0, _reactUtilities.useMergedRefs)(rootRef, rovingRootRef)
    ];
}
function lastChildRecursive(walker) {
    let lastElement = null;
    let nextElement = null;
    while(nextElement = walker.lastChild()){
        lastElement = nextElement;
    }
    return lastElement;
}
