"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useHeadlessFlatTree_unstable", {
    enumerable: true,
    get: ()=>useHeadlessFlatTree_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _reactUtilities = require("@fluentui/react-utilities");
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _createHeadlessTree = require("../../utils/createHeadlessTree");
const _tokens = require("../../utils/tokens");
const _useFlatTreeNavigation = require("./useFlatTreeNavigation");
const _useControllableOpenItems = require("../../hooks/useControllableOpenItems");
const _getTreeItemValueFromElement = require("../../utils/getTreeItemValueFromElement");
const _useFlatControllableCheckedItems = require("./useFlatControllableCheckedItems");
function useHeadlessFlatTree_unstable(flatTreeItemProps, options = {}) {
    const flatTreeItems = _react.useMemo(()=>(0, _createHeadlessTree.createHeadlessTree)(flatTreeItemProps), [
        flatTreeItemProps
    ]);
    const [openItems, setOpenItems] = (0, _useControllableOpenItems.useControllableOpenItems)(options);
    const [checkedItems, setCheckedItems] = (0, _useFlatControllableCheckedItems.useFlatControllableCheckedItems)(options);
    const [navigate, navigationRef] = (0, _useFlatTreeNavigation.useFlatTreeNavigation)(flatTreeItems);
    const treeRef = _react.useRef(null);
    const handleOpenChange = (0, _reactUtilities.useEventCallback)((event, data)=>{
        var _options_onOpenChange;
        (_options_onOpenChange = options.onOpenChange) === null || _options_onOpenChange === void 0 ? void 0 : _options_onOpenChange.call(options, event, data);
        setOpenItems((0, _useControllableOpenItems.createNextOpenItems)(data, openItems));
    });
    const handleCheckedChange = (0, _reactUtilities.useEventCallback)((event, data)=>{
        var _options_onCheckedChange;
        (_options_onCheckedChange = options.onCheckedChange) === null || _options_onCheckedChange === void 0 ? void 0 : _options_onCheckedChange.call(options, event, data);
        setCheckedItems((0, _useFlatControllableCheckedItems.createNextFlatCheckedItems)(data, checkedItems, flatTreeItems));
    });
    const handleNavigation = (0, _reactUtilities.useEventCallback)((event, data)=>{
        var _options_onNavigation_unstable;
        (_options_onNavigation_unstable = options.onNavigation_unstable) === null || _options_onNavigation_unstable === void 0 ? void 0 : _options_onNavigation_unstable.call(options, event, data);
        navigate(data);
    });
    const getNextNavigableItem = (0, _reactUtilities.useEventCallback)((visibleItems, data)=>{
        const item = flatTreeItems.get(data.value);
        if (item) {
            switch(data.type){
                case _tokens.treeDataTypes.TypeAhead:
                    return item;
                case _tokens.treeDataTypes.ArrowLeft:
                    return flatTreeItems.get(item.parentValue);
                case _tokens.treeDataTypes.ArrowRight:
                    return visibleItems[item.index + 1];
                case _tokens.treeDataTypes.End:
                    return visibleItems[visibleItems.length - 1];
                case _tokens.treeDataTypes.Home:
                    return visibleItems[0];
                case _tokens.treeDataTypes.ArrowDown:
                    return visibleItems[item.index + 1];
                case _tokens.treeDataTypes.ArrowUp:
                    return visibleItems[item.index - 1];
            }
        }
    });
    const getElementFromItem = _react.useCallback((item)=>{
        var _treeRef_current;
        return (_treeRef_current = treeRef.current) === null || _treeRef_current === void 0 ? void 0 : _treeRef_current.querySelector(`[${_getTreeItemValueFromElement.dataTreeItemValueAttrName}="${item.value}"]`);
    }, []);
    const ref = (0, _reactUtilities.useMergedRefs)(treeRef, navigationRef);
    const getTreeProps = _react.useCallback(()=>({
            ref,
            openItems,
            selectionMode: options.selectionMode,
            checkedItems,
            onOpenChange: handleOpenChange,
            onCheckedChange: handleCheckedChange,
            // eslint-disable-next-line @typescript-eslint/naming-convention
            onNavigation_unstable: handleNavigation
        }), [
        openItems,
        checkedItems
    ]);
    const items = _react.useCallback(()=>flatTreeItems.visibleItems(openItems), [
        openItems,
        flatTreeItems
    ]);
    return _react.useMemo(()=>({
            navigate,
            getTreeProps,
            getNextNavigableItem,
            getElementFromItem,
            items
        }), [
        navigate,
        getTreeProps,
        getNextNavigableItem,
        getElementFromItem,
        items
    ]);
}
