{"version":3,"sources":["useTreeItemPersonaLayout.js"],"sourcesContent":["import * as React from 'react';\nimport { resolveShorthand } from '@fluentui/react-utilities';\nimport { useTreeContext_unstable } from '../../contexts';\nimport { treeAvatarSize } from '../../utils/tokens';\nimport { useTreeItemLayout_unstable } from '../TreeItemLayout/useTreeItemLayout';\nimport { Checkbox } from '@fluentui/react-checkbox';\nimport { Radio } from '@fluentui/react-radio';\n/**\n * Create the state required to render TreeItemPersonaLayout.\n *\n * The returned state can be modified with hooks such as useTreeItemPersonaLayoutStyles_unstable,\n * before being passed to renderTreeItemPersonaLayout_unstable.\n *\n * @param props - props from this instance of TreeItemPersonaLayout\n * @param ref - reference to root HTMLElement of TreeItemPersonaLayout\n */ export const useTreeItemPersonaLayout_unstable = (props, ref)=>{\n    const { media , children , content , description  } = props;\n    const treeItemLayoutState = useTreeItemLayout_unstable({\n        ...props,\n        iconBefore: null,\n        iconAfter: null\n    }, ref);\n    const size = useTreeContext_unstable((ctx)=>ctx.size);\n    const selectionMode = useTreeContext_unstable((ctx)=>ctx.selectionMode);\n    return {\n        ...treeItemLayoutState,\n        components: {\n            expandIcon: 'div',\n            content: 'div',\n            description: 'div',\n            root: 'div',\n            media: 'div',\n            aside: 'div',\n            actions: 'div',\n            // Casting here to a union between checkbox and radio\n            selector: selectionMode === 'multiselect' ? Checkbox : Radio\n        },\n        avatarSize: treeAvatarSize[size],\n        content: resolveShorthand(content, {\n            required: true,\n            defaultProps: {\n                children\n            }\n        }),\n        media: resolveShorthand(media, {\n            required: true\n        }),\n        description: resolveShorthand(description)\n    };\n};\n"],"names":["useTreeItemPersonaLayout_unstable","props","ref","media","children","content","description","treeItemLayoutState","useTreeItemLayout_unstable","iconBefore","iconAfter","size","useTreeContext_unstable","ctx","selectionMode","components","expandIcon","root","aside","actions","selector","Checkbox","Radio","avatarSize","treeAvatarSize","resolveShorthand","required","defaultProps"],"mappings":";;;;+BAeiBA;;aAAAA;;;6DAfM;gCACU;0BACO;wBACT;mCACY;+BAClB;4BACH;AASX,MAAMA,oCAAoC,CAACC,OAAOC,MAAM;IAC/D,MAAM,EAAEC,MAAK,EAAGC,SAAQ,EAAGC,QAAO,EAAGC,YAAW,EAAG,GAAGL;IACtD,MAAMM,sBAAsBC,IAAAA,6CAA0B,EAAC;QACnD,GAAGP,KAAK;QACRQ,YAAY,IAAI;QAChBC,WAAW,IAAI;IACnB,GAAGR;IACH,MAAMS,OAAOC,IAAAA,iCAAuB,EAAC,CAACC,MAAMA,IAAIF,IAAI;IACpD,MAAMG,gBAAgBF,IAAAA,iCAAuB,EAAC,CAACC,MAAMA,IAAIC,aAAa;IACtE,OAAO;QACH,GAAGP,mBAAmB;QACtBQ,YAAY;YACRC,YAAY;YACZX,SAAS;YACTC,aAAa;YACbW,MAAM;YACNd,OAAO;YACPe,OAAO;YACPC,SAAS;YACT,qDAAqD;YACrDC,UAAUN,kBAAkB,gBAAgBO,uBAAQ,GAAGC,iBAAK;QAChE;QACAC,YAAYC,sBAAc,CAACb,KAAK;QAChCN,SAASoB,IAAAA,gCAAgB,EAACpB,SAAS;YAC/BqB,UAAU,IAAI;YACdC,cAAc;gBACVvB;YACJ;QACJ;QACAD,OAAOsB,IAAAA,gCAAgB,EAACtB,OAAO;YAC3BuB,UAAU,IAAI;QAClB;QACApB,aAAamB,IAAAA,gCAAgB,EAACnB;IAClC;AACJ"}