"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useRootTree", {
    enumerable: true,
    get: ()=>useRootTree
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _reactUtilities = require("@fluentui/react-utilities");
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactDom = /*#__PURE__*/ _interopRequireWildcard(require("react-dom"));
const _createOpenItems = require("../utils/createOpenItems");
const _createCheckedItems = require("../utils/createCheckedItems");
const _tokens = require("../utils/tokens");
function useRootTree(props, ref) {
    warnIfNoProperPropsRootTree(props);
    const { appearance ='subtle' , size ='medium' , selectionMode ='none'  } = props;
    const openItems = _react.useMemo(()=>(0, _createOpenItems.createOpenItems)(props.openItems), [
        props.openItems
    ]);
    const checkedItems = _react.useMemo(()=>(0, _createCheckedItems.createCheckedItems)(props.checkedItems), [
        props.checkedItems
    ]);
    const requestOpenChange = (data)=>{
        var _props_onOpenChange;
        return (_props_onOpenChange = props.onOpenChange) === null || _props_onOpenChange === void 0 ? void 0 : _props_onOpenChange.call(props, data.event, data);
    };
    const requestCheckedChange = (data)=>{
        var _props_onCheckedChange;
        return (_props_onCheckedChange = props.onCheckedChange) === null || _props_onCheckedChange === void 0 ? void 0 : _props_onCheckedChange.call(props, data.event, data);
    };
    const requestNavigation = (data)=>{
        var _props_onNavigation_unstable;
        (_props_onNavigation_unstable = props.onNavigation_unstable) === null || _props_onNavigation_unstable === void 0 ? void 0 : _props_onNavigation_unstable.call(props, data.event, data);
        if (data.type === _tokens.treeDataTypes.ArrowDown || data.type === _tokens.treeDataTypes.ArrowUp) {
            data.event.preventDefault();
        }
    };
    const requestTreeResponse = (0, _reactUtilities.useEventCallback)((request)=>{
        switch(request.type){
            case _tokens.treeDataTypes.Click:
            case _tokens.treeDataTypes.ExpandIconClick:
                {
                    return _reactDom.unstable_batchedUpdates(()=>{
                        requestOpenChange({
                            ...request,
                            open: request.itemType === 'branch' && !openItems.has(request.value)
                        });
                        requestNavigation({
                            ...request,
                            type: _tokens.treeDataTypes.Click
                        });
                    });
                }
            case _tokens.treeDataTypes.ArrowRight:
                {
                    if (request.itemType === 'leaf') {
                        return;
                    }
                    const open = openItems.has(request.value);
                    if (!open) {
                        return requestOpenChange({
                            ...request,
                            open: true
                        });
                    }
                    return requestNavigation(request);
                }
            case _tokens.treeDataTypes.Enter:
                {
                    const open = openItems.has(request.value);
                    return requestOpenChange({
                        ...request,
                        open: request.itemType === 'branch' && !open
                    });
                }
            case _tokens.treeDataTypes.ArrowLeft:
                {
                    const open = openItems.has(request.value);
                    if (open && request.itemType === 'branch') {
                        return requestOpenChange({
                            ...request,
                            open: false,
                            type: _tokens.treeDataTypes.ArrowLeft
                        });
                    }
                    return requestNavigation({
                        ...request,
                        type: _tokens.treeDataTypes.ArrowLeft
                    });
                }
            case _tokens.treeDataTypes.End:
            case _tokens.treeDataTypes.Home:
            case _tokens.treeDataTypes.ArrowUp:
            case _tokens.treeDataTypes.ArrowDown:
            case _tokens.treeDataTypes.TypeAhead:
                return requestNavigation({
                    ...request,
                    target: request.event.currentTarget
                });
            case _tokens.treeDataTypes.Change:
                {
                    const previousCheckedValue = checkedItems.get(request.value);
                    return requestCheckedChange({
                        ...request,
                        selectionMode: selectionMode,
                        checked: previousCheckedValue === 'mixed' ? true : !previousCheckedValue
                    });
                }
        }
    });
    return {
        components: {
            root: 'div'
        },
        selectionMode,
        open: true,
        appearance,
        size,
        level: 1,
        openItems,
        checkedItems,
        requestTreeResponse,
        root: (0, _reactUtilities.getNativeElementProps)('div', {
            ref,
            role: 'baseTree',
            'aria-multiselectable': selectionMode === 'multiselect' ? true : undefined,
            ...props
        })
    };
}
function warnIfNoProperPropsRootTree(props) {
    if (process.env.NODE_ENV === 'development') {
        if (!props['aria-label'] && !props['aria-labelledby']) {
            // eslint-disable-next-line no-console
            console.warn('BaseTree must have either a `aria-label` or `aria-labelledby` property defined');
        }
    }
}
