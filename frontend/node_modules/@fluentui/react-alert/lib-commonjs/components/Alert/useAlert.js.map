{"version":3,"sources":["useAlert.js"],"sourcesContent":["import * as React from 'react';\nimport { Avatar } from '@fluentui/react-avatar';\nimport { Button } from '@fluentui/react-button';\nimport { CheckmarkCircleFilled, DismissCircleFilled, InfoFilled, WarningFilled } from '@fluentui/react-icons';\nimport { getNativeElementProps, resolveShorthand } from '@fluentui/react-utilities';\n/**\n * Create the state required to render Alert.\n *\n * The returned state can be modified with hooks such as useAlertStyles_unstable,\n * before being passed to renderAlert_unstable.\n *\n * @param props - props from this instance of Alert\n * @param ref - reference to root HTMLElement of Alert\n */ export const useAlert_unstable = (props, ref)=>{\n    const { appearance ='primary' , intent  } = props;\n    /** Determine the role and icon to render based on the intent */ let defaultIcon;\n    let defaultRole = 'status';\n    switch(intent){\n        case 'success':\n            defaultIcon = /*#__PURE__*/ React.createElement(CheckmarkCircleFilled, null);\n            break;\n        case 'error':\n            defaultIcon = /*#__PURE__*/ React.createElement(DismissCircleFilled, null);\n            defaultRole = 'alert';\n            break;\n        case 'warning':\n            defaultIcon = /*#__PURE__*/ React.createElement(WarningFilled, null);\n            defaultRole = 'alert';\n            break;\n        case 'info':\n            defaultIcon = /*#__PURE__*/ React.createElement(InfoFilled, null);\n            break;\n    }\n    const action = resolveShorthand(props.action, {\n        defaultProps: {\n            appearance: 'transparent'\n        }\n    });\n    const avatar = resolveShorthand(props.avatar);\n    let icon;\n    /** Avatar prop takes precedence over the icon or intent prop */ if (!avatar) {\n        icon = resolveShorthand(props.icon, {\n            defaultProps: {\n                children: defaultIcon\n            },\n            required: !!props.intent\n        });\n    }\n    return {\n        action,\n        appearance,\n        avatar,\n        components: {\n            root: 'div',\n            icon: 'span',\n            action: Button,\n            avatar: Avatar\n        },\n        icon,\n        intent,\n        root: getNativeElementProps('div', {\n            ref,\n            role: defaultRole,\n            children: props.children,\n            ...props\n        })\n    };\n};\n"],"names":["useAlert_unstable","props","ref","appearance","intent","defaultIcon","defaultRole","React","createElement","CheckmarkCircleFilled","DismissCircleFilled","WarningFilled","InfoFilled","action","resolveShorthand","defaultProps","avatar","icon","children","required","components","root","Button","Avatar","getNativeElementProps","role"],"mappings":";;;;+BAaiBA;;aAAAA;;;6DAbM;6BACA;6BACA;4BAC+D;gCAC9B;AAS7C,MAAMA,oBAAoB,CAACC,OAAOC,MAAM;IAC/C,MAAM,EAAEC,YAAY,UAAS,EAAGC,OAAM,EAAG,GAAGH;IAC5C,8DAA8D,GAAG,IAAII;IACrE,IAAIC,cAAc;IAClB,OAAOF;QACH,KAAK;YACDC,cAAc,WAAW,GAAGE,OAAMC,aAAa,CAACC,iCAAqB,EAAE,IAAI;YAC3E,KAAM;QACV,KAAK;YACDJ,cAAc,WAAW,GAAGE,OAAMC,aAAa,CAACE,+BAAmB,EAAE,IAAI;YACzEJ,cAAc;YACd,KAAM;QACV,KAAK;YACDD,cAAc,WAAW,GAAGE,OAAMC,aAAa,CAACG,yBAAa,EAAE,IAAI;YACnEL,cAAc;YACd,KAAM;QACV,KAAK;YACDD,cAAc,WAAW,GAAGE,OAAMC,aAAa,CAACI,sBAAU,EAAE,IAAI;YAChE,KAAM;IACd;IACA,MAAMC,SAASC,IAAAA,gCAAgB,EAACb,MAAMY,MAAM,EAAE;QAC1CE,cAAc;YACVZ,YAAY;QAChB;IACJ;IACA,MAAMa,SAASF,IAAAA,gCAAgB,EAACb,MAAMe,MAAM;IAC5C,IAAIC;IACJ,8DAA8D,GAAG,IAAI,CAACD,QAAQ;QAC1EC,OAAOH,IAAAA,gCAAgB,EAACb,MAAMgB,IAAI,EAAE;YAChCF,cAAc;gBACVG,UAAUb;YACd;YACAc,UAAU,CAAC,CAAClB,MAAMG,MAAM;QAC5B;IACJ,CAAC;IACD,OAAO;QACHS;QACAV;QACAa;QACAI,YAAY;YACRC,MAAM;YACNJ,MAAM;YACNJ,QAAQS,mBAAM;YACdN,QAAQO,mBAAM;QAClB;QACAN;QACAb;QACAiB,MAAMG,IAAAA,qCAAqB,EAAC,OAAO;YAC/BtB;YACAuB,MAAMnB;YACNY,UAAUjB,MAAMiB,QAAQ;YACxB,GAAGjB,KAAK;QACZ;IACJ;AACJ"}