/** @jsxRuntime classic */ /** @jsx createElement */ import { createElement } from '@fluentui/react-jsx-runtime';
import { canUseDOM, getSlotsNext } from '@fluentui/react-utilities';
import { TextDirectionProvider } from '@griffel/react';
import { OverridesProvider_unstable as OverridesProvider, Provider_unstable as Provider, TooltipVisibilityProvider_unstable as TooltipVisibilityProvider, ThemeProvider_unstable as ThemeProvider, ThemeClassNameProvider_unstable as ThemeClassNameProvider, CustomStyleHooksProvider_unstable as CustomStyleHooksProvider } from '@fluentui/react-shared-contexts';
/**
 * Render the final JSX of FluentProvider
 */ export const renderFluentProvider_unstable = (state, contextValues)=>{
    const { slots , slotProps  } = getSlotsNext(state);
    // Typescript (vscode) incorrectly references the FluentProviderProps.customStyleHooks_unstable
    // instead of FluentProviderContextValues.customStyleHooks_unstable and thinks it is
    // Partial<CustomStyleHooksContextValue>, so it needs to be cast to Required<CustomStyleHooksContextValue>
    return /*#__PURE__*/ createElement(Provider, {
        value: contextValues.provider
    }, /*#__PURE__*/ createElement(ThemeProvider, {
        value: contextValues.theme
    }, /*#__PURE__*/ createElement(ThemeClassNameProvider, {
        value: contextValues.themeClassName
    }, /*#__PURE__*/ createElement(CustomStyleHooksProvider, {
        value: contextValues.customStyleHooks_unstable
    }, /*#__PURE__*/ createElement(TooltipVisibilityProvider, {
        value: contextValues.tooltip
    }, /*#__PURE__*/ createElement(TextDirectionProvider, {
        dir: contextValues.textDirection
    }, /*#__PURE__*/ createElement(OverridesProvider, {
        value: contextValues.overrides_unstable
    }, /*#__PURE__*/ createElement(slots.root, slotProps.root, canUseDOM() ? null : /*#__PURE__*/ createElement("style", {
        // Using dangerous HTML because react can escape characters
        // which can lead to invalid CSS.
        // eslint-disable-next-line react/no-danger
        dangerouslySetInnerHTML: {
            __html: state.serverStyleProps.cssRule
        },
        ...state.serverStyleProps.attributes
    }), slotProps.root.children))))))));
};
